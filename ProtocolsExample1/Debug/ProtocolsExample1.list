
ProtocolsExample1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005570  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  0800567c  0800567c  0001567c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080057ec  080057ec  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080057ec  080057ec  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080057ec  080057ec  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080057ec  080057ec  000157ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080057f0  080057f0  000157f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080057f4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000180  20000070  08005864  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001f0  08005864  000201f0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000dc46  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ddc  00000000  00000000  0002dcdf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  0002fac0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e88  00000000  00000000  000309d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000180d6  00000000  00000000  00031860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010031  00000000  00000000  00049936  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cea4  00000000  00000000  00059967  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e680b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000044b4  00000000  00000000  000e685c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08005664 	.word	0x08005664

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08005664 	.word	0x08005664

0800014c <uart1_log>:
uint32_t offset = 0;
uint32_t size = 0;

uint8_t * i2c_current;

void uart1_log(char * message, size_t len){
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
 8000154:	6039      	str	r1, [r7, #0]
	// opportunistic log - if the HAL is busy, we throw away the message.
	HAL_StatusTypeDef status;
	status = HAL_UART_Transmit_IT(&huart1, (uint8_t *) message, len);
 8000156:	683b      	ldr	r3, [r7, #0]
 8000158:	b29b      	uxth	r3, r3
 800015a:	461a      	mov	r2, r3
 800015c:	6879      	ldr	r1, [r7, #4]
 800015e:	4807      	ldr	r0, [pc, #28]	; (800017c <uart1_log+0x30>)
 8000160:	f004 f917 	bl	8004392 <HAL_UART_Transmit_IT>
 8000164:	4603      	mov	r3, r0
 8000166:	73fb      	strb	r3, [r7, #15]
	if (status != HAL_OK)
 8000168:	7bfb      	ldrb	r3, [r7, #15]
 800016a:	2b00      	cmp	r3, #0
 800016c:	d002      	beq.n	8000174 <uart1_log+0x28>
		free(message);
 800016e:	6878      	ldr	r0, [r7, #4]
 8000170:	f004 fe0e 	bl	8004d90 <free>
}
 8000174:	bf00      	nop
 8000176:	3710      	adds	r7, #16
 8000178:	46bd      	mov	sp, r7
 800017a:	bd80      	pop	{r7, pc}
 800017c:	20000128 	.word	0x20000128

08000180 <parse_uart2_rx_buffer>:

void parse_uart2_rx_buffer(){
 8000180:	b480      	push	{r7}
 8000182:	b083      	sub	sp, #12
 8000184:	af00      	add	r7, sp, #0
	 * [uint32_t command] [uint32_t storage_id] [uint32_t offset] [uint32_t size]
	 *
	 * The receive buffer is an array of uint8_t and we just cast it, so we can interpret it as
	 * a uint32_t[4].
	 */
	uint32_t * casted_buffer = (uint32_t *) uart2_rx_buffer;
 8000186:	4b0d      	ldr	r3, [pc, #52]	; (80001bc <parse_uart2_rx_buffer+0x3c>)
 8000188:	607b      	str	r3, [r7, #4]
	command = (uint32_t) casted_buffer[0];
 800018a:	687b      	ldr	r3, [r7, #4]
 800018c:	681b      	ldr	r3, [r3, #0]
 800018e:	4a0c      	ldr	r2, [pc, #48]	; (80001c0 <parse_uart2_rx_buffer+0x40>)
 8000190:	6013      	str	r3, [r2, #0]
	storage_id = (uint32_t) casted_buffer[1];
 8000192:	687b      	ldr	r3, [r7, #4]
 8000194:	3304      	adds	r3, #4
 8000196:	681b      	ldr	r3, [r3, #0]
 8000198:	4a0a      	ldr	r2, [pc, #40]	; (80001c4 <parse_uart2_rx_buffer+0x44>)
 800019a:	6013      	str	r3, [r2, #0]
	offset = (uint32_t) casted_buffer[2];
 800019c:	687b      	ldr	r3, [r7, #4]
 800019e:	3308      	adds	r3, #8
 80001a0:	681b      	ldr	r3, [r3, #0]
 80001a2:	4a09      	ldr	r2, [pc, #36]	; (80001c8 <parse_uart2_rx_buffer+0x48>)
 80001a4:	6013      	str	r3, [r2, #0]
	size = (uint32_t) casted_buffer[3];
 80001a6:	687b      	ldr	r3, [r7, #4]
 80001a8:	330c      	adds	r3, #12
 80001aa:	681b      	ldr	r3, [r3, #0]
 80001ac:	4a07      	ldr	r2, [pc, #28]	; (80001cc <parse_uart2_rx_buffer+0x4c>)
 80001ae:	6013      	str	r3, [r2, #0]
}
 80001b0:	bf00      	nop
 80001b2:	370c      	adds	r7, #12
 80001b4:	46bd      	mov	sp, r7
 80001b6:	bc80      	pop	{r7}
 80001b8:	4770      	bx	lr
 80001ba:	bf00      	nop
 80001bc:	200001b0 	.word	0x200001b0
 80001c0:	200001c4 	.word	0x200001c4
 80001c4:	200001c8 	.word	0x200001c8
 80001c8:	200001cc 	.word	0x200001cc
 80001cc:	200001d0 	.word	0x200001d0

080001d0 <HAL_TIM_PeriodElapsedCallback>:
/* This is called when TIM2 (every 5 seconds) overflows.
 * We use this to print "Hello World! on UART1
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80001d0:	b580      	push	{r7, lr}
 80001d2:	b084      	sub	sp, #16
 80001d4:	af00      	add	r7, sp, #0
 80001d6:	6078      	str	r0, [r7, #4]
	char* buffer;
	int len;
	len = asprintf(&buffer, "Hello world!\r\n");
 80001d8:	f107 0308 	add.w	r3, r7, #8
 80001dc:	4907      	ldr	r1, [pc, #28]	; (80001fc <HAL_TIM_PeriodElapsedCallback+0x2c>)
 80001de:	4618      	mov	r0, r3
 80001e0:	f004 fd88 	bl	8004cf4 <asiprintf>
 80001e4:	60f8      	str	r0, [r7, #12]
	uart1_log(buffer, len);
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	68fa      	ldr	r2, [r7, #12]
 80001ea:	4611      	mov	r1, r2
 80001ec:	4618      	mov	r0, r3
 80001ee:	f7ff ffad 	bl	800014c <uart1_log>
}
 80001f2:	bf00      	nop
 80001f4:	3710      	adds	r7, #16
 80001f6:	46bd      	mov	sp, r7
 80001f8:	bd80      	pop	{r7, pc}
 80001fa:	bf00      	nop
 80001fc:	0800567c 	.word	0x0800567c

08000200 <uart2_reset>:

void uart2_reset(){
 8000200:	b480      	push	{r7}
 8000202:	af00      	add	r7, sp, #0
	 command = 0;
 8000204:	4b07      	ldr	r3, [pc, #28]	; (8000224 <uart2_reset+0x24>)
 8000206:	2200      	movs	r2, #0
 8000208:	601a      	str	r2, [r3, #0]
	 storage_id = 0;
 800020a:	4b07      	ldr	r3, [pc, #28]	; (8000228 <uart2_reset+0x28>)
 800020c:	2200      	movs	r2, #0
 800020e:	601a      	str	r2, [r3, #0]
	 offset = 0;
 8000210:	4b06      	ldr	r3, [pc, #24]	; (800022c <uart2_reset+0x2c>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
	 size = 0;
 8000216:	4b06      	ldr	r3, [pc, #24]	; (8000230 <uart2_reset+0x30>)
 8000218:	2200      	movs	r2, #0
 800021a:	601a      	str	r2, [r3, #0]
}
 800021c:	bf00      	nop
 800021e:	46bd      	mov	sp, r7
 8000220:	bc80      	pop	{r7}
 8000222:	4770      	bx	lr
 8000224:	200001c4 	.word	0x200001c4
 8000228:	200001c8 	.word	0x200001c8
 800022c:	200001cc 	.word	0x200001cc
 8000230:	200001d0 	.word	0x200001d0

08000234 <uart2_read>:

/* Here we execute the UART "READ FLASH" command (0x2c) */
void uart2_read(){
 8000234:	b580      	push	{r7, lr}
 8000236:	b084      	sub	sp, #16
 8000238:	af00      	add	r7, sp, #0
	HAL_StatusTypeDef status;
	status = HAL_UART_Transmit(&huart2, (uint8_t *)FLASH_BASE + offset, size, 500);
 800023a:	4b14      	ldr	r3, [pc, #80]	; (800028c <uart2_read+0x58>)
 800023c:	681b      	ldr	r3, [r3, #0]
 800023e:	f103 6100 	add.w	r1, r3, #134217728	; 0x8000000
 8000242:	4b13      	ldr	r3, [pc, #76]	; (8000290 <uart2_read+0x5c>)
 8000244:	681b      	ldr	r3, [r3, #0]
 8000246:	b29a      	uxth	r2, r3
 8000248:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800024c:	4811      	ldr	r0, [pc, #68]	; (8000294 <uart2_read+0x60>)
 800024e:	f004 f80e 	bl	800426e <HAL_UART_Transmit>
 8000252:	4603      	mov	r3, r0
 8000254:	72fb      	strb	r3, [r7, #11]

	char* buffer;
	int len;
	if(status == HAL_OK){
 8000256:	7afb      	ldrb	r3, [r7, #11]
 8000258:	2b00      	cmp	r3, #0
 800025a:	d106      	bne.n	800026a <uart2_read+0x36>
		len = asprintf(&buffer, "UART2: Transmitted!\r\n");
 800025c:	1d3b      	adds	r3, r7, #4
 800025e:	490e      	ldr	r1, [pc, #56]	; (8000298 <uart2_read+0x64>)
 8000260:	4618      	mov	r0, r3
 8000262:	f004 fd47 	bl	8004cf4 <asiprintf>
 8000266:	60f8      	str	r0, [r7, #12]
 8000268:	e005      	b.n	8000276 <uart2_read+0x42>
	}else {
		len = asprintf(&buffer, "UART2: Transmission Error!\r\n");
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	490b      	ldr	r1, [pc, #44]	; (800029c <uart2_read+0x68>)
 800026e:	4618      	mov	r0, r3
 8000270:	f004 fd40 	bl	8004cf4 <asiprintf>
 8000274:	60f8      	str	r0, [r7, #12]
	}
	uart1_log(buffer, len);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	68fa      	ldr	r2, [r7, #12]
 800027a:	4611      	mov	r1, r2
 800027c:	4618      	mov	r0, r3
 800027e:	f7ff ff65 	bl	800014c <uart1_log>
}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	200001cc 	.word	0x200001cc
 8000290:	200001d0 	.word	0x200001d0
 8000294:	2000016c 	.word	0x2000016c
 8000298:	0800568c 	.word	0x0800568c
 800029c:	080056a4 	.word	0x080056a4

080002a0 <uart2_command_parse>:

void uart2_command_parse(){
 80002a0:	b580      	push	{r7, lr}
 80002a2:	b082      	sub	sp, #8
 80002a4:	af00      	add	r7, sp, #0
	char * buffer;
 	int len;

	switch(command){
 80002a6:	4b0d      	ldr	r3, [pc, #52]	; (80002dc <uart2_command_parse+0x3c>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	2b2c      	cmp	r3, #44	; 0x2c
 80002ac:	d102      	bne.n	80002b4 <uart2_command_parse+0x14>
		// 2c is the READ FLASH command.
		case 0x2c:
			uart2_read();
 80002ae:	f7ff ffc1 	bl	8000234 <uart2_read>
			break;
 80002b2:	e00d      	b.n	80002d0 <uart2_command_parse+0x30>
		default:
		 	len = asprintf(&buffer, "UART2: Invalid command received: 0x%lX\r\n", command);
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <uart2_command_parse+0x3c>)
 80002b6:	681a      	ldr	r2, [r3, #0]
 80002b8:	463b      	mov	r3, r7
 80002ba:	4909      	ldr	r1, [pc, #36]	; (80002e0 <uart2_command_parse+0x40>)
 80002bc:	4618      	mov	r0, r3
 80002be:	f004 fd19 	bl	8004cf4 <asiprintf>
 80002c2:	6078      	str	r0, [r7, #4]
			uart1_log(buffer, len);
 80002c4:	683b      	ldr	r3, [r7, #0]
 80002c6:	687a      	ldr	r2, [r7, #4]
 80002c8:	4611      	mov	r1, r2
 80002ca:	4618      	mov	r0, r3
 80002cc:	f7ff ff3e 	bl	800014c <uart1_log>
	}
	uart2_reset();
 80002d0:	f7ff ff96 	bl	8000200 <uart2_reset>
}
 80002d4:	bf00      	nop
 80002d6:	3708      	adds	r7, #8
 80002d8:	46bd      	mov	sp, r7
 80002da:	bd80      	pop	{r7, pc}
 80002dc:	200001c4 	.word	0x200001c4
 80002e0:	080056c4 	.word	0x080056c4

080002e4 <HAL_UART_TxCpltCallback>:

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b084      	sub	sp, #16
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
	 if(huart == &huart1){
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a08      	ldr	r2, [pc, #32]	; (8000310 <HAL_UART_TxCpltCallback+0x2c>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d109      	bne.n	8000308 <HAL_UART_TxCpltCallback+0x24>
		 // Transmits via huart1 are our log. These are done via Interrupt.
		 // Messages are allocated on the Heap. We need to free it here after successful transmission.
		 // The transmit buffer is moved byte by byte during transmission.
		 // We calculate the original pointer to free it.
		 uint8_t * buff = (huart->pTxBuffPtr) - huart->TxXferSize;
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6a1a      	ldr	r2, [r3, #32]
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80002fc:	425b      	negs	r3, r3
 80002fe:	4413      	add	r3, r2
 8000300:	60fb      	str	r3, [r7, #12]
		 free(buff);
 8000302:	68f8      	ldr	r0, [r7, #12]
 8000304:	f004 fd44 	bl	8004d90 <free>
	 }
}
 8000308:	bf00      	nop
 800030a:	3710      	adds	r7, #16
 800030c:	46bd      	mov	sp, r7
 800030e:	bd80      	pop	{r7, pc}
 8000310:	20000128 	.word	0x20000128

08000314 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af02      	add	r7, sp, #8
 800031a:	6078      	str	r0, [r7, #4]

 if(huart == &huart2){
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a12      	ldr	r2, [pc, #72]	; (8000368 <HAL_UART_RxCpltCallback+0x54>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d117      	bne.n	8000354 <HAL_UART_RxCpltCallback+0x40>
	 // We received data on UART! get the command, offset and size from the RX buffer.
	 parse_uart2_rx_buffer();
 8000324:	f7ff ff2c 	bl	8000180 <parse_uart2_rx_buffer>

	 char * buffer;
 	 int len = asprintf(&buffer, "UART2: READ FLASH command received! Command: 0x%lX, Offset:%lX, Size: %lX\r\n", command, offset, size);
 8000328:	4b10      	ldr	r3, [pc, #64]	; (800036c <HAL_UART_RxCpltCallback+0x58>)
 800032a:	681a      	ldr	r2, [r3, #0]
 800032c:	4b10      	ldr	r3, [pc, #64]	; (8000370 <HAL_UART_RxCpltCallback+0x5c>)
 800032e:	6819      	ldr	r1, [r3, #0]
 8000330:	4b10      	ldr	r3, [pc, #64]	; (8000374 <HAL_UART_RxCpltCallback+0x60>)
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f107 0008 	add.w	r0, r7, #8
 8000338:	9300      	str	r3, [sp, #0]
 800033a:	460b      	mov	r3, r1
 800033c:	490e      	ldr	r1, [pc, #56]	; (8000378 <HAL_UART_RxCpltCallback+0x64>)
 800033e:	f004 fcd9 	bl	8004cf4 <asiprintf>
 8000342:	60f8      	str	r0, [r7, #12]
	 uart1_log(buffer, len);
 8000344:	68bb      	ldr	r3, [r7, #8]
 8000346:	68fa      	ldr	r2, [r7, #12]
 8000348:	4611      	mov	r1, r2
 800034a:	4618      	mov	r0, r3
 800034c:	f7ff fefe 	bl	800014c <uart1_log>

	 // Now execute whatever was requested.
	 uart2_command_parse();
 8000350:	f7ff ffa6 	bl	80002a0 <uart2_command_parse>

 }
 // Enable UART RX...
 HAL_UART_Receive_IT(&huart2, uart2_rx_buffer, 16);
 8000354:	2210      	movs	r2, #16
 8000356:	4909      	ldr	r1, [pc, #36]	; (800037c <HAL_UART_RxCpltCallback+0x68>)
 8000358:	4803      	ldr	r0, [pc, #12]	; (8000368 <HAL_UART_RxCpltCallback+0x54>)
 800035a:	f004 f85e 	bl	800441a <HAL_UART_Receive_IT>
}
 800035e:	bf00      	nop
 8000360:	3710      	adds	r7, #16
 8000362:	46bd      	mov	sp, r7
 8000364:	bd80      	pop	{r7, pc}
 8000366:	bf00      	nop
 8000368:	2000016c 	.word	0x2000016c
 800036c:	200001c4 	.word	0x200001c4
 8000370:	200001cc 	.word	0x200001cc
 8000374:	200001d0 	.word	0x200001d0
 8000378:	080056f0 	.word	0x080056f0
 800037c:	200001b0 	.word	0x200001b0

08000380 <HAL_I2C_SlaveRxCpltCallback>:

void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c1){
 8000380:	b580      	push	{r7, lr}
 8000382:	b086      	sub	sp, #24
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]

	/* We have only 128 kByte of flash, from 3 bytes received, we only need 17 bits.
	 * make sure the upper 7 bits are not set.
	 */

	if(!(i2c1_rx_buffer[0] && 0xFE)){
 8000388:	4b16      	ldr	r3, [pc, #88]	; (80003e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800038a:	781b      	ldrb	r3, [r3, #0]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d116      	bne.n	80003be <HAL_I2C_SlaveRxCpltCallback+0x3e>
			// we have a valid address
			uint32_t received_address = 0x00000000 | (i2c1_rx_buffer[0] << 16);
 8000390:	4b14      	ldr	r3, [pc, #80]	; (80003e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	041b      	lsls	r3, r3, #16
 8000396:	617b      	str	r3, [r7, #20]
			received_address = received_address | (i2c1_rx_buffer[1] << 8);
 8000398:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 800039a:	785b      	ldrb	r3, [r3, #1]
 800039c:	021b      	lsls	r3, r3, #8
 800039e:	461a      	mov	r2, r3
 80003a0:	697b      	ldr	r3, [r7, #20]
 80003a2:	4313      	orrs	r3, r2
 80003a4:	617b      	str	r3, [r7, #20]
			received_address = received_address | (i2c1_rx_buffer[2]);
 80003a6:	4b0f      	ldr	r3, [pc, #60]	; (80003e4 <HAL_I2C_SlaveRxCpltCallback+0x64>)
 80003a8:	789b      	ldrb	r3, [r3, #2]
 80003aa:	461a      	mov	r2, r3
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	4313      	orrs	r3, r2
 80003b0:	617b      	str	r3, [r7, #20]

			i2c_current = (uint8_t *) (FLASH_BASE + received_address);
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 80003b8:	461a      	mov	r2, r3
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003bc:	601a      	str	r2, [r3, #0]
	}

	char * buffer;
	int len = asprintf(&buffer, "I2C1: READ FLASH offset set: %p\r\n", i2c_current);
 80003be:	4b0a      	ldr	r3, [pc, #40]	; (80003e8 <HAL_I2C_SlaveRxCpltCallback+0x68>)
 80003c0:	681a      	ldr	r2, [r3, #0]
 80003c2:	f107 030c 	add.w	r3, r7, #12
 80003c6:	4909      	ldr	r1, [pc, #36]	; (80003ec <HAL_I2C_SlaveRxCpltCallback+0x6c>)
 80003c8:	4618      	mov	r0, r3
 80003ca:	f004 fc93 	bl	8004cf4 <asiprintf>
 80003ce:	6138      	str	r0, [r7, #16]
	uart1_log(buffer, len);
 80003d0:	68fb      	ldr	r3, [r7, #12]
 80003d2:	693a      	ldr	r2, [r7, #16]
 80003d4:	4611      	mov	r1, r2
 80003d6:	4618      	mov	r0, r3
 80003d8:	f7ff feb8 	bl	800014c <uart1_log>

}
 80003dc:	bf00      	nop
 80003de:	3718      	adds	r7, #24
 80003e0:	46bd      	mov	sp, r7
 80003e2:	bd80      	pop	{r7, pc}
 80003e4:	200001c0 	.word	0x200001c0
 80003e8:	200001d4 	.word	0x200001d4
 80003ec:	0800573c 	.word	0x0800573c

080003f0 <HAL_I2C_AddrCallback>:

void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c1, uint8_t TransferDirection, uint16_t AddrMatchCode){
 80003f0:	b580      	push	{r7, lr}
 80003f2:	b082      	sub	sp, #8
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	6078      	str	r0, [r7, #4]
 80003f8:	460b      	mov	r3, r1
 80003fa:	70fb      	strb	r3, [r7, #3]
 80003fc:	4613      	mov	r3, r2
 80003fe:	803b      	strh	r3, [r7, #0]
	 */

	// TransferDirection is seen from the Master, but we are on a Slave

	// We send data to the master
	if(TransferDirection == I2C_DIRECTION_RECEIVE){
 8000400:	78fb      	ldrb	r3, [r7, #3]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d107      	bne.n	8000416 <HAL_I2C_AddrCallback+0x26>
		// We do not know how many bytes the master wants. This means we transmit everythin.
		// The controller will stop receiving bytes by sending a NACK. This will result in a Error and
		// subsequently into a callback to HAL_I2C_ErrorCallback.
		HAL_I2C_Slave_Seq_Transmit_IT(hi2c1, i2c_current, (uint16_t)0xFFFFF, I2C_FIRST_FRAME);
 8000406:	4b0a      	ldr	r3, [pc, #40]	; (8000430 <HAL_I2C_AddrCallback+0x40>)
 8000408:	6819      	ldr	r1, [r3, #0]
 800040a:	2301      	movs	r3, #1
 800040c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000410:	6878      	ldr	r0, [r7, #4]
 8000412:	f001 f8ef 	bl	80015f4 <HAL_I2C_Slave_Seq_Transmit_IT>
	  }

	// We receive the address from the master.
	// This is normally a command to set the flash pointer offset. When the transfer is done,
	// HAL_I2C_SlaveRxCpltCallback is called. There we will parse the received data.
	if(TransferDirection == I2C_DIRECTION_TRANSMIT){
 8000416:	78fb      	ldrb	r3, [r7, #3]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d105      	bne.n	8000428 <HAL_I2C_AddrCallback+0x38>
		HAL_I2C_Slave_Seq_Receive_IT(hi2c1, i2c1_rx_buffer, 3, I2C_FIRST_AND_LAST_FRAME);
 800041c:	2308      	movs	r3, #8
 800041e:	2203      	movs	r2, #3
 8000420:	4904      	ldr	r1, [pc, #16]	; (8000434 <HAL_I2C_AddrCallback+0x44>)
 8000422:	6878      	ldr	r0, [r7, #4]
 8000424:	f001 f958 	bl	80016d8 <HAL_I2C_Slave_Seq_Receive_IT>
	}
}
 8000428:	bf00      	nop
 800042a:	3708      	adds	r7, #8
 800042c:	46bd      	mov	sp, r7
 800042e:	bd80      	pop	{r7, pc}
 8000430:	200001d4 	.word	0x200001d4
 8000434:	200001c0 	.word	0x200001c0

08000438 <HAL_I2C_ErrorCallback>:

void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c){
 8000438:	b580      	push	{r7, lr}
 800043a:	b086      	sub	sp, #24
 800043c:	af00      	add	r7, sp, #0
 800043e:	6078      	str	r0, [r7, #4]
	// This is a hack. The current_address pointer is always shifted one byte too far.
	// If the error was HAL_I2C_ERROR_AF (ACK Failed), we substract one to correct that.
	if(hi2c->ErrorCode == HAL_I2C_ERROR_AF){
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000444:	2b04      	cmp	r3, #4
 8000446:	d11c      	bne.n	8000482 <HAL_I2C_ErrorCallback+0x4a>
		uint32_t bytes_transferred = ((hi2c->XferSize - hi2c->XferCount) - 1);
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800044c:	461a      	mov	r2, r3
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000452:	b29b      	uxth	r3, r3
 8000454:	1ad3      	subs	r3, r2, r3
 8000456:	3b01      	subs	r3, #1
 8000458:	617b      	str	r3, [r7, #20]
		i2c_current = i2c_current + bytes_transferred;
 800045a:	4b0c      	ldr	r3, [pc, #48]	; (800048c <HAL_I2C_ErrorCallback+0x54>)
 800045c:	681a      	ldr	r2, [r3, #0]
 800045e:	697b      	ldr	r3, [r7, #20]
 8000460:	4413      	add	r3, r2
 8000462:	4a0a      	ldr	r2, [pc, #40]	; (800048c <HAL_I2C_ErrorCallback+0x54>)
 8000464:	6013      	str	r3, [r2, #0]
		char * buffer;
		int len;
		len = asprintf(&buffer, "I2C1: READ FLASH ended! %lu bytes transferred\r\n", bytes_transferred);
 8000466:	f107 030c 	add.w	r3, r7, #12
 800046a:	697a      	ldr	r2, [r7, #20]
 800046c:	4908      	ldr	r1, [pc, #32]	; (8000490 <HAL_I2C_ErrorCallback+0x58>)
 800046e:	4618      	mov	r0, r3
 8000470:	f004 fc40 	bl	8004cf4 <asiprintf>
 8000474:	6138      	str	r0, [r7, #16]
		uart1_log(buffer, len);
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	693a      	ldr	r2, [r7, #16]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff fe65 	bl	800014c <uart1_log>
	}
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
 800048a:	bf00      	nop
 800048c:	200001d4 	.word	0x200001d4
 8000490:	08005760 	.word	0x08005760

08000494 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b082      	sub	sp, #8
 8000498:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800049a:	f000 fb9f 	bl	8000bdc <HAL_Init>

  /* USER CODE BEGIN Init */
  i2c_current = (uint8_t *) FLASH_BASE;
 800049e:	4b16      	ldr	r3, [pc, #88]	; (80004f8 <main+0x64>)
 80004a0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80004a4:	601a      	str	r2, [r3, #0]

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004a6:	f000 f831 	bl	800050c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004aa:	f000 f945 	bl	8000738 <MX_GPIO_Init>
  MX_I2C1_Init();
 80004ae:	f000 f873 	bl	8000598 <MX_I2C1_Init>
  MX_USART1_UART_Init();
 80004b2:	f000 f8ed 	bl	8000690 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80004b6:	f000 f915 	bl	80006e4 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004ba:	f000 f89b 	bl	80005f4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 80004be:	480f      	ldr	r0, [pc, #60]	; (80004fc <main+0x68>)
 80004c0:	f003 fade 	bl	8003a80 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_UART_StateTypeDef uart2_status = HAL_UART_GetState(&huart2);
 80004c4:	480e      	ldr	r0, [pc, #56]	; (8000500 <main+0x6c>)
 80004c6:	f004 f997 	bl	80047f8 <HAL_UART_GetState>
 80004ca:	4603      	mov	r3, r0
 80004cc:	71fb      	strb	r3, [r7, #7]
	  if (uart2_status == HAL_UART_STATE_READY)
 80004ce:	79fb      	ldrb	r3, [r7, #7]
 80004d0:	2b20      	cmp	r3, #32
 80004d2:	d104      	bne.n	80004de <main+0x4a>
		  HAL_UART_Receive_IT(&huart2, uart2_rx_buffer, 16);
 80004d4:	2210      	movs	r2, #16
 80004d6:	490b      	ldr	r1, [pc, #44]	; (8000504 <main+0x70>)
 80004d8:	4809      	ldr	r0, [pc, #36]	; (8000500 <main+0x6c>)
 80004da:	f003 ff9e 	bl	800441a <HAL_UART_Receive_IT>
	  HAL_I2C_StateTypeDef i2c1_status = HAL_I2C_GetState(&hi2c1);
 80004de:	480a      	ldr	r0, [pc, #40]	; (8000508 <main+0x74>)
 80004e0:	f001 fc00 	bl	8001ce4 <HAL_I2C_GetState>
 80004e4:	4603      	mov	r3, r0
 80004e6:	71bb      	strb	r3, [r7, #6]
	  if (i2c1_status == HAL_I2C_STATE_READY)
 80004e8:	79bb      	ldrb	r3, [r7, #6]
 80004ea:	2b20      	cmp	r3, #32
 80004ec:	d1ea      	bne.n	80004c4 <main+0x30>
		  HAL_I2C_EnableListen_IT(&hi2c1);
 80004ee:	4806      	ldr	r0, [pc, #24]	; (8000508 <main+0x74>)
 80004f0:	f001 f964 	bl	80017bc <HAL_I2C_EnableListen_IT>
  {
 80004f4:	e7e6      	b.n	80004c4 <main+0x30>
 80004f6:	bf00      	nop
 80004f8:	200001d4 	.word	0x200001d4
 80004fc:	200000e0 	.word	0x200000e0
 8000500:	2000016c 	.word	0x2000016c
 8000504:	200001b0 	.word	0x200001b0
 8000508:	2000008c 	.word	0x2000008c

0800050c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b090      	sub	sp, #64	; 0x40
 8000510:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000512:	f107 0318 	add.w	r3, r7, #24
 8000516:	2228      	movs	r2, #40	; 0x28
 8000518:	2100      	movs	r1, #0
 800051a:	4618      	mov	r0, r3
 800051c:	f004 fc40 	bl	8004da0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000520:	1d3b      	adds	r3, r7, #4
 8000522:	2200      	movs	r2, #0
 8000524:	601a      	str	r2, [r3, #0]
 8000526:	605a      	str	r2, [r3, #4]
 8000528:	609a      	str	r2, [r3, #8]
 800052a:	60da      	str	r2, [r3, #12]
 800052c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800052e:	2301      	movs	r3, #1
 8000530:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000532:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000536:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000538:	2300      	movs	r3, #0
 800053a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800053c:	2301      	movs	r3, #1
 800053e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000540:	2302      	movs	r3, #2
 8000542:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000544:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000548:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800054a:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800054e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000550:	f107 0318 	add.w	r3, r7, #24
 8000554:	4618      	mov	r0, r3
 8000556:	f002 fe29 	bl	80031ac <HAL_RCC_OscConfig>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d001      	beq.n	8000564 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000560:	f000 f942 	bl	80007e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000564:	230f      	movs	r3, #15
 8000566:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000568:	2302      	movs	r3, #2
 800056a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800056c:	2300      	movs	r3, #0
 800056e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000570:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000574:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000576:	2300      	movs	r3, #0
 8000578:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800057a:	1d3b      	adds	r3, r7, #4
 800057c:	2102      	movs	r1, #2
 800057e:	4618      	mov	r0, r3
 8000580:	f003 f896 	bl	80036b0 <HAL_RCC_ClockConfig>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800058a:	f000 f92d 	bl	80007e8 <Error_Handler>
  }
}
 800058e:	bf00      	nop
 8000590:	3740      	adds	r7, #64	; 0x40
 8000592:	46bd      	mov	sp, r7
 8000594:	bd80      	pop	{r7, pc}
	...

08000598 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <MX_I2C1_Init+0x50>)
 800059e:	4a13      	ldr	r2, [pc, #76]	; (80005ec <MX_I2C1_Init+0x54>)
 80005a0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80005a2:	4b11      	ldr	r3, [pc, #68]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005a4:	4a12      	ldr	r2, [pc, #72]	; (80005f0 <MX_I2C1_Init+0x58>)
 80005a6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80005a8:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 66;
 80005ae:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b0:	2242      	movs	r2, #66	; 0x42
 80005b2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80005b4:	4b0c      	ldr	r3, [pc, #48]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005b6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80005ba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80005bc:	4b0a      	ldr	r3, [pc, #40]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005be:	2200      	movs	r2, #0
 80005c0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80005c8:	4b07      	ldr	r3, [pc, #28]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80005ce:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80005d4:	4804      	ldr	r0, [pc, #16]	; (80005e8 <MX_I2C1_Init+0x50>)
 80005d6:	f000 fec9 	bl	800136c <HAL_I2C_Init>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80005e0:	f000 f902 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	2000008c 	.word	0x2000008c
 80005ec:	40005400 	.word	0x40005400
 80005f0:	000186a0 	.word	0x000186a0

080005f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b086      	sub	sp, #24
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005fa:	f107 0308 	add.w	r3, r7, #8
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000608:	463b      	mov	r3, r7
 800060a:	2200      	movs	r2, #0
 800060c:	601a      	str	r2, [r3, #0]
 800060e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <MX_TIM2_Init+0x98>)
 8000612:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000616:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10000;
 8000618:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_TIM2_Init+0x98>)
 800061a:	f242 7210 	movw	r2, #10000	; 0x2710
 800061e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_TIM2_Init+0x98>)
 8000622:	2200      	movs	r2, #0
 8000624:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 36000;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_TIM2_Init+0x98>)
 8000628:	f648 42a0 	movw	r2, #36000	; 0x8ca0
 800062c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_TIM2_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_TIM2_Init+0x98>)
 8000636:	2280      	movs	r2, #128	; 0x80
 8000638:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800063a:	4814      	ldr	r0, [pc, #80]	; (800068c <MX_TIM2_Init+0x98>)
 800063c:	f003 f9d0 	bl	80039e0 <HAL_TIM_Base_Init>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000646:	f000 f8cf 	bl	80007e8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800064a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800064e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000650:	f107 0308 	add.w	r3, r7, #8
 8000654:	4619      	mov	r1, r3
 8000656:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_TIM2_Init+0x98>)
 8000658:	f003 fb6c 	bl	8003d34 <HAL_TIM_ConfigClockSource>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000662:	f000 f8c1 	bl	80007e8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000666:	2300      	movs	r3, #0
 8000668:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800066a:	2300      	movs	r3, #0
 800066c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800066e:	463b      	mov	r3, r7
 8000670:	4619      	mov	r1, r3
 8000672:	4806      	ldr	r0, [pc, #24]	; (800068c <MX_TIM2_Init+0x98>)
 8000674:	f003 fd3e 	bl	80040f4 <HAL_TIMEx_MasterConfigSynchronization>
 8000678:	4603      	mov	r3, r0
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800067e:	f000 f8b3 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000682:	bf00      	nop
 8000684:	3718      	adds	r7, #24
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}
 800068a:	bf00      	nop
 800068c:	200000e0 	.word	0x200000e0

08000690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000694:	4b11      	ldr	r3, [pc, #68]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 8000696:	4a12      	ldr	r2, [pc, #72]	; (80006e0 <MX_USART1_UART_Init+0x50>)
 8000698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 800069c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b0e      	ldr	r3, [pc, #56]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0c      	ldr	r3, [pc, #48]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0b      	ldr	r3, [pc, #44]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 80006b4:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006b6:	2208      	movs	r2, #8
 80006b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b08      	ldr	r3, [pc, #32]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80006c6:	4805      	ldr	r0, [pc, #20]	; (80006dc <MX_USART1_UART_Init+0x4c>)
 80006c8:	f003 fd84 	bl	80041d4 <HAL_UART_Init>
 80006cc:	4603      	mov	r3, r0
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d001      	beq.n	80006d6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80006d2:	f000 f889 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80006d6:	bf00      	nop
 80006d8:	bd80      	pop	{r7, pc}
 80006da:	bf00      	nop
 80006dc:	20000128 	.word	0x20000128
 80006e0:	40013800 	.word	0x40013800

080006e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006e8:	4b11      	ldr	r3, [pc, #68]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006ea:	4a12      	ldr	r2, [pc, #72]	; (8000734 <MX_USART2_UART_Init+0x50>)
 80006ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80006ee:	4b10      	ldr	r3, [pc, #64]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80006f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006f6:	4b0e      	ldr	r3, [pc, #56]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006fc:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 80006fe:	2200      	movs	r2, #0
 8000700:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000702:	4b0b      	ldr	r3, [pc, #44]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000704:	2200      	movs	r2, #0
 8000706:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000708:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800070a:	220c      	movs	r2, #12
 800070c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800070e:	4b08      	ldr	r3, [pc, #32]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000710:	2200      	movs	r2, #0
 8000712:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000714:	4b06      	ldr	r3, [pc, #24]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 8000716:	2200      	movs	r2, #0
 8000718:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800071a:	4805      	ldr	r0, [pc, #20]	; (8000730 <MX_USART2_UART_Init+0x4c>)
 800071c:	f003 fd5a 	bl	80041d4 <HAL_UART_Init>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000726:	f000 f85f 	bl	80007e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800072a:	bf00      	nop
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	2000016c 	.word	0x2000016c
 8000734:	40004400 	.word	0x40004400

08000738 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073e:	f107 0310 	add.w	r3, r7, #16
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
 8000746:	605a      	str	r2, [r3, #4]
 8000748:	609a      	str	r2, [r3, #8]
 800074a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074c:	4b24      	ldr	r3, [pc, #144]	; (80007e0 <MX_GPIO_Init+0xa8>)
 800074e:	699b      	ldr	r3, [r3, #24]
 8000750:	4a23      	ldr	r2, [pc, #140]	; (80007e0 <MX_GPIO_Init+0xa8>)
 8000752:	f043 0310 	orr.w	r3, r3, #16
 8000756:	6193      	str	r3, [r2, #24]
 8000758:	4b21      	ldr	r3, [pc, #132]	; (80007e0 <MX_GPIO_Init+0xa8>)
 800075a:	699b      	ldr	r3, [r3, #24]
 800075c:	f003 0310 	and.w	r3, r3, #16
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000764:	4b1e      	ldr	r3, [pc, #120]	; (80007e0 <MX_GPIO_Init+0xa8>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <MX_GPIO_Init+0xa8>)
 800076a:	f043 0320 	orr.w	r3, r3, #32
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b1b      	ldr	r3, [pc, #108]	; (80007e0 <MX_GPIO_Init+0xa8>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0320 	and.w	r3, r3, #32
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800077c:	4b18      	ldr	r3, [pc, #96]	; (80007e0 <MX_GPIO_Init+0xa8>)
 800077e:	699b      	ldr	r3, [r3, #24]
 8000780:	4a17      	ldr	r2, [pc, #92]	; (80007e0 <MX_GPIO_Init+0xa8>)
 8000782:	f043 0304 	orr.w	r3, r3, #4
 8000786:	6193      	str	r3, [r2, #24]
 8000788:	4b15      	ldr	r3, [pc, #84]	; (80007e0 <MX_GPIO_Init+0xa8>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	f003 0304 	and.w	r3, r3, #4
 8000790:	607b      	str	r3, [r7, #4]
 8000792:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000794:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <MX_GPIO_Init+0xa8>)
 8000796:	699b      	ldr	r3, [r3, #24]
 8000798:	4a11      	ldr	r2, [pc, #68]	; (80007e0 <MX_GPIO_Init+0xa8>)
 800079a:	f043 0308 	orr.w	r3, r3, #8
 800079e:	6193      	str	r3, [r2, #24]
 80007a0:	4b0f      	ldr	r3, [pc, #60]	; (80007e0 <MX_GPIO_Init+0xa8>)
 80007a2:	699b      	ldr	r3, [r3, #24]
 80007a4:	f003 0308 	and.w	r3, r3, #8
 80007a8:	603b      	str	r3, [r7, #0]
 80007aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80007ac:	2200      	movs	r2, #0
 80007ae:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80007b2:	480c      	ldr	r0, [pc, #48]	; (80007e4 <MX_GPIO_Init+0xac>)
 80007b4:	f000 fdc2 	bl	800133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2301      	movs	r3, #1
 80007c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c2:	2300      	movs	r3, #0
 80007c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c6:	2302      	movs	r3, #2
 80007c8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80007ca:	f107 0310 	add.w	r3, r7, #16
 80007ce:	4619      	mov	r1, r3
 80007d0:	4804      	ldr	r0, [pc, #16]	; (80007e4 <MX_GPIO_Init+0xac>)
 80007d2:	f000 fc2f 	bl	8001034 <HAL_GPIO_Init>

}
 80007d6:	bf00      	nop
 80007d8:	3720      	adds	r7, #32
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000
 80007e4:	40011000 	.word	0x40011000

080007e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007e8:	b480      	push	{r7}
 80007ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007ec:	b672      	cpsid	i
}
 80007ee:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f0:	e7fe      	b.n	80007f0 <Error_Handler+0x8>
	...

080007f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80007fa:	4b15      	ldr	r3, [pc, #84]	; (8000850 <HAL_MspInit+0x5c>)
 80007fc:	699b      	ldr	r3, [r3, #24]
 80007fe:	4a14      	ldr	r2, [pc, #80]	; (8000850 <HAL_MspInit+0x5c>)
 8000800:	f043 0301 	orr.w	r3, r3, #1
 8000804:	6193      	str	r3, [r2, #24]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_MspInit+0x5c>)
 8000808:	699b      	ldr	r3, [r3, #24]
 800080a:	f003 0301 	and.w	r3, r3, #1
 800080e:	60bb      	str	r3, [r7, #8]
 8000810:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x5c>)
 8000814:	69db      	ldr	r3, [r3, #28]
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_MspInit+0x5c>)
 8000818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081c:	61d3      	str	r3, [r2, #28]
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_MspInit+0x5c>)
 8000820:	69db      	ldr	r3, [r3, #28]
 8000822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800082a:	4b0a      	ldr	r3, [pc, #40]	; (8000854 <HAL_MspInit+0x60>)
 800082c:	685b      	ldr	r3, [r3, #4]
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000836:	60fb      	str	r3, [r7, #12]
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800083e:	60fb      	str	r3, [r7, #12]
 8000840:	4a04      	ldr	r2, [pc, #16]	; (8000854 <HAL_MspInit+0x60>)
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3714      	adds	r7, #20
 800084a:	46bd      	mov	sp, r7
 800084c:	bc80      	pop	{r7}
 800084e:	4770      	bx	lr
 8000850:	40021000 	.word	0x40021000
 8000854:	40010000 	.word	0x40010000

08000858 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b088      	sub	sp, #32
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	2200      	movs	r2, #0
 8000866:	601a      	str	r2, [r3, #0]
 8000868:	605a      	str	r2, [r3, #4]
 800086a:	609a      	str	r2, [r3, #8]
 800086c:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a1d      	ldr	r2, [pc, #116]	; (80008e8 <HAL_I2C_MspInit+0x90>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d133      	bne.n	80008e0 <HAL_I2C_MspInit+0x88>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000878:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <HAL_I2C_MspInit+0x94>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	4a1b      	ldr	r2, [pc, #108]	; (80008ec <HAL_I2C_MspInit+0x94>)
 800087e:	f043 0308 	orr.w	r3, r3, #8
 8000882:	6193      	str	r3, [r2, #24]
 8000884:	4b19      	ldr	r3, [pc, #100]	; (80008ec <HAL_I2C_MspInit+0x94>)
 8000886:	699b      	ldr	r3, [r3, #24]
 8000888:	f003 0308 	and.w	r3, r3, #8
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000890:	23c0      	movs	r3, #192	; 0xc0
 8000892:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000894:	2312      	movs	r3, #18
 8000896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000898:	2303      	movs	r3, #3
 800089a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800089c:	f107 0310 	add.w	r3, r7, #16
 80008a0:	4619      	mov	r1, r3
 80008a2:	4813      	ldr	r0, [pc, #76]	; (80008f0 <HAL_I2C_MspInit+0x98>)
 80008a4:	f000 fbc6 	bl	8001034 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80008a8:	4b10      	ldr	r3, [pc, #64]	; (80008ec <HAL_I2C_MspInit+0x94>)
 80008aa:	69db      	ldr	r3, [r3, #28]
 80008ac:	4a0f      	ldr	r2, [pc, #60]	; (80008ec <HAL_I2C_MspInit+0x94>)
 80008ae:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80008b2:	61d3      	str	r3, [r2, #28]
 80008b4:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <HAL_I2C_MspInit+0x94>)
 80008b6:	69db      	ldr	r3, [r3, #28]
 80008b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008bc:	60bb      	str	r3, [r7, #8]
 80008be:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80008c0:	2200      	movs	r2, #0
 80008c2:	2100      	movs	r1, #0
 80008c4:	201f      	movs	r0, #31
 80008c6:	f000 fac2 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80008ca:	201f      	movs	r0, #31
 80008cc:	f000 fadb 	bl	8000e86 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2100      	movs	r1, #0
 80008d4:	2020      	movs	r0, #32
 80008d6:	f000 faba 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80008da:	2020      	movs	r0, #32
 80008dc:	f000 fad3 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80008e0:	bf00      	nop
 80008e2:	3720      	adds	r7, #32
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40005400 	.word	0x40005400
 80008ec:	40021000 	.word	0x40021000
 80008f0:	40010c00 	.word	0x40010c00

080008f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b084      	sub	sp, #16
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000904:	d113      	bne.n	800092e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000906:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <HAL_TIM_Base_MspInit+0x44>)
 8000908:	69db      	ldr	r3, [r3, #28]
 800090a:	4a0b      	ldr	r2, [pc, #44]	; (8000938 <HAL_TIM_Base_MspInit+0x44>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	61d3      	str	r3, [r2, #28]
 8000912:	4b09      	ldr	r3, [pc, #36]	; (8000938 <HAL_TIM_Base_MspInit+0x44>)
 8000914:	69db      	ldr	r3, [r3, #28]
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	60fb      	str	r3, [r7, #12]
 800091c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 7, 0);
 800091e:	2200      	movs	r2, #0
 8000920:	2107      	movs	r1, #7
 8000922:	201c      	movs	r0, #28
 8000924:	f000 fa93 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000928:	201c      	movs	r0, #28
 800092a:	f000 faac 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800092e:	bf00      	nop
 8000930:	3710      	adds	r7, #16
 8000932:	46bd      	mov	sp, r7
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	40021000 	.word	0x40021000

0800093c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	; 0x28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000944:	f107 0318 	add.w	r3, r7, #24
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a3f      	ldr	r2, [pc, #252]	; (8000a54 <HAL_UART_MspInit+0x118>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d13a      	bne.n	80009d2 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800095c:	4b3e      	ldr	r3, [pc, #248]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 800095e:	699b      	ldr	r3, [r3, #24]
 8000960:	4a3d      	ldr	r2, [pc, #244]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b3b      	ldr	r3, [pc, #236]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000970:	617b      	str	r3, [r7, #20]
 8000972:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000974:	4b38      	ldr	r3, [pc, #224]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 8000976:	699b      	ldr	r3, [r3, #24]
 8000978:	4a37      	ldr	r2, [pc, #220]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 800097a:	f043 0304 	orr.w	r3, r3, #4
 800097e:	6193      	str	r3, [r2, #24]
 8000980:	4b35      	ldr	r3, [pc, #212]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 8000982:	699b      	ldr	r3, [r3, #24]
 8000984:	f003 0304 	and.w	r3, r3, #4
 8000988:	613b      	str	r3, [r7, #16]
 800098a:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800098c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000990:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000992:	2302      	movs	r3, #2
 8000994:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000996:	2303      	movs	r3, #3
 8000998:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800099a:	f107 0318 	add.w	r3, r7, #24
 800099e:	4619      	mov	r1, r3
 80009a0:	482e      	ldr	r0, [pc, #184]	; (8000a5c <HAL_UART_MspInit+0x120>)
 80009a2:	f000 fb47 	bl	8001034 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b0:	2300      	movs	r3, #0
 80009b2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b4:	f107 0318 	add.w	r3, r7, #24
 80009b8:	4619      	mov	r1, r3
 80009ba:	4828      	ldr	r0, [pc, #160]	; (8000a5c <HAL_UART_MspInit+0x120>)
 80009bc:	f000 fb3a 	bl	8001034 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80009c0:	2200      	movs	r2, #0
 80009c2:	2107      	movs	r1, #7
 80009c4:	2025      	movs	r0, #37	; 0x25
 80009c6:	f000 fa42 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80009ca:	2025      	movs	r0, #37	; 0x25
 80009cc:	f000 fa5b 	bl	8000e86 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80009d0:	e03c      	b.n	8000a4c <HAL_UART_MspInit+0x110>
  else if(huart->Instance==USART2)
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	4a22      	ldr	r2, [pc, #136]	; (8000a60 <HAL_UART_MspInit+0x124>)
 80009d8:	4293      	cmp	r3, r2
 80009da:	d137      	bne.n	8000a4c <HAL_UART_MspInit+0x110>
    __HAL_RCC_USART2_CLK_ENABLE();
 80009dc:	4b1e      	ldr	r3, [pc, #120]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 80009de:	69db      	ldr	r3, [r3, #28]
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 80009e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e6:	61d3      	str	r3, [r2, #28]
 80009e8:	4b1b      	ldr	r3, [pc, #108]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 80009ea:	69db      	ldr	r3, [r3, #28]
 80009ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f4:	4b18      	ldr	r3, [pc, #96]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 80009fa:	f043 0304 	orr.w	r3, r3, #4
 80009fe:	6193      	str	r3, [r2, #24]
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <HAL_UART_MspInit+0x11c>)
 8000a02:	699b      	ldr	r3, [r3, #24]
 8000a04:	f003 0304 	and.w	r3, r3, #4
 8000a08:	60bb      	str	r3, [r7, #8]
 8000a0a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a0c:	2304      	movs	r3, #4
 8000a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a10:	2302      	movs	r3, #2
 8000a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000a14:	2303      	movs	r3, #3
 8000a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a18:	f107 0318 	add.w	r3, r7, #24
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	480f      	ldr	r0, [pc, #60]	; (8000a5c <HAL_UART_MspInit+0x120>)
 8000a20:	f000 fb08 	bl	8001034 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000a24:	2308      	movs	r3, #8
 8000a26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a30:	f107 0318 	add.w	r3, r7, #24
 8000a34:	4619      	mov	r1, r3
 8000a36:	4809      	ldr	r0, [pc, #36]	; (8000a5c <HAL_UART_MspInit+0x120>)
 8000a38:	f000 fafc 	bl	8001034 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2100      	movs	r1, #0
 8000a40:	2026      	movs	r0, #38	; 0x26
 8000a42:	f000 fa04 	bl	8000e4e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a46:	2026      	movs	r0, #38	; 0x26
 8000a48:	f000 fa1d 	bl	8000e86 <HAL_NVIC_EnableIRQ>
}
 8000a4c:	bf00      	nop
 8000a4e:	3728      	adds	r7, #40	; 0x28
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40013800 	.word	0x40013800
 8000a58:	40021000 	.word	0x40021000
 8000a5c:	40010800 	.word	0x40010800
 8000a60:	40004400 	.word	0x40004400

08000a64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a68:	e7fe      	b.n	8000a68 <NMI_Handler+0x4>

08000a6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a6a:	b480      	push	{r7}
 8000a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a6e:	e7fe      	b.n	8000a6e <HardFault_Handler+0x4>

08000a70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a70:	b480      	push	{r7}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a74:	e7fe      	b.n	8000a74 <MemManage_Handler+0x4>

08000a76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a76:	b480      	push	{r7}
 8000a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a7a:	e7fe      	b.n	8000a7a <BusFault_Handler+0x4>

08000a7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a80:	e7fe      	b.n	8000a80 <UsageFault_Handler+0x4>

08000a82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a82:	b480      	push	{r7}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a86:	bf00      	nop
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bc80      	pop	{r7}
 8000a8c:	4770      	bx	lr

08000a8e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bc80      	pop	{r7}
 8000a98:	4770      	bx	lr

08000a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a9e:	bf00      	nop
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bc80      	pop	{r7}
 8000aa4:	4770      	bx	lr

08000aa6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000aa6:	b580      	push	{r7, lr}
 8000aa8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000aaa:	f000 f8dd 	bl	8000c68 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000aae:	bf00      	nop
 8000ab0:	bd80      	pop	{r7, pc}
	...

08000ab4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM2_IRQHandler+0x10>)
 8000aba:	f003 f833 	bl	8003b24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000e0 	.word	0x200000e0

08000ac8 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <I2C1_EV_IRQHandler+0x10>)
 8000ace:	f000 feaa 	bl	8001826 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000008c 	.word	0x2000008c

08000adc <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000ae0:	4802      	ldr	r0, [pc, #8]	; (8000aec <I2C1_ER_IRQHandler+0x10>)
 8000ae2:	f001 f811 	bl	8001b08 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	2000008c 	.word	0x2000008c

08000af0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000af4:	4802      	ldr	r0, [pc, #8]	; (8000b00 <USART1_IRQHandler+0x10>)
 8000af6:	f003 fcc1 	bl	800447c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	20000128 	.word	0x20000128

08000b04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b08:	4802      	ldr	r0, [pc, #8]	; (8000b14 <USART2_IRQHandler+0x10>)
 8000b0a:	f003 fcb7 	bl	800447c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b0e:	bf00      	nop
 8000b10:	bd80      	pop	{r7, pc}
 8000b12:	bf00      	nop
 8000b14:	2000016c 	.word	0x2000016c

08000b18 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b086      	sub	sp, #24
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b20:	4a14      	ldr	r2, [pc, #80]	; (8000b74 <_sbrk+0x5c>)
 8000b22:	4b15      	ldr	r3, [pc, #84]	; (8000b78 <_sbrk+0x60>)
 8000b24:	1ad3      	subs	r3, r2, r3
 8000b26:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b2c:	4b13      	ldr	r3, [pc, #76]	; (8000b7c <_sbrk+0x64>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d102      	bne.n	8000b3a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b34:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <_sbrk+0x64>)
 8000b36:	4a12      	ldr	r2, [pc, #72]	; (8000b80 <_sbrk+0x68>)
 8000b38:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b3a:	4b10      	ldr	r3, [pc, #64]	; (8000b7c <_sbrk+0x64>)
 8000b3c:	681a      	ldr	r2, [r3, #0]
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	4413      	add	r3, r2
 8000b42:	693a      	ldr	r2, [r7, #16]
 8000b44:	429a      	cmp	r2, r3
 8000b46:	d207      	bcs.n	8000b58 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b48:	f004 f8f8 	bl	8004d3c <__errno>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	220c      	movs	r2, #12
 8000b50:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	e009      	b.n	8000b6c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b58:	4b08      	ldr	r3, [pc, #32]	; (8000b7c <_sbrk+0x64>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b5e:	4b07      	ldr	r3, [pc, #28]	; (8000b7c <_sbrk+0x64>)
 8000b60:	681a      	ldr	r2, [r3, #0]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4413      	add	r3, r2
 8000b66:	4a05      	ldr	r2, [pc, #20]	; (8000b7c <_sbrk+0x64>)
 8000b68:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b6a:	68fb      	ldr	r3, [r7, #12]
}
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	3718      	adds	r7, #24
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20005000 	.word	0x20005000
 8000b78:	00000400 	.word	0x00000400
 8000b7c:	200001d8 	.word	0x200001d8
 8000b80:	200001f0 	.word	0x200001f0

08000b84 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b88:	bf00      	nop
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bc80      	pop	{r7}
 8000b8e:	4770      	bx	lr

08000b90 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b90:	480c      	ldr	r0, [pc, #48]	; (8000bc4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b92:	490d      	ldr	r1, [pc, #52]	; (8000bc8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b94:	4a0d      	ldr	r2, [pc, #52]	; (8000bcc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b98:	e002      	b.n	8000ba0 <LoopCopyDataInit>

08000b9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b9e:	3304      	adds	r3, #4

08000ba0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ba0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ba2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ba4:	d3f9      	bcc.n	8000b9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ba6:	4a0a      	ldr	r2, [pc, #40]	; (8000bd0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ba8:	4c0a      	ldr	r4, [pc, #40]	; (8000bd4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000baa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bac:	e001      	b.n	8000bb2 <LoopFillZerobss>

08000bae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bb0:	3204      	adds	r2, #4

08000bb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bb4:	d3fb      	bcc.n	8000bae <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000bb6:	f7ff ffe5 	bl	8000b84 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bba:	f004 f8c5 	bl	8004d48 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bbe:	f7ff fc69 	bl	8000494 <main>
  bx lr
 8000bc2:	4770      	bx	lr
  ldr r0, =_sdata
 8000bc4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc8:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000bcc:	080057f4 	.word	0x080057f4
  ldr r2, =_sbss
 8000bd0:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000bd4:	200001f0 	.word	0x200001f0

08000bd8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd8:	e7fe      	b.n	8000bd8 <ADC1_2_IRQHandler>
	...

08000bdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000be0:	4b08      	ldr	r3, [pc, #32]	; (8000c04 <HAL_Init+0x28>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a07      	ldr	r2, [pc, #28]	; (8000c04 <HAL_Init+0x28>)
 8000be6:	f043 0310 	orr.w	r3, r3, #16
 8000bea:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bec:	2003      	movs	r0, #3
 8000bee:	f000 f923 	bl	8000e38 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bf2:	200f      	movs	r0, #15
 8000bf4:	f000 f808 	bl	8000c08 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bf8:	f7ff fdfc 	bl	80007f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bfc:	2300      	movs	r3, #0
}
 8000bfe:	4618      	mov	r0, r3
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40022000 	.word	0x40022000

08000c08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <HAL_InitTick+0x54>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_InitTick+0x58>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	4619      	mov	r1, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	4618      	mov	r0, r3
 8000c28:	f000 f93b 	bl	8000ea2 <HAL_SYSTICK_Config>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d001      	beq.n	8000c36 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c32:	2301      	movs	r3, #1
 8000c34:	e00e      	b.n	8000c54 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	2b0f      	cmp	r3, #15
 8000c3a:	d80a      	bhi.n	8000c52 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	6879      	ldr	r1, [r7, #4]
 8000c40:	f04f 30ff 	mov.w	r0, #4294967295
 8000c44:	f000 f903 	bl	8000e4e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c48:	4a06      	ldr	r2, [pc, #24]	; (8000c64 <HAL_InitTick+0x5c>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	e000      	b.n	8000c54 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c52:	2301      	movs	r3, #1
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20000000 	.word	0x20000000
 8000c60:	20000008 	.word	0x20000008
 8000c64:	20000004 	.word	0x20000004

08000c68 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <HAL_IncTick+0x1c>)
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	461a      	mov	r2, r3
 8000c72:	4b05      	ldr	r3, [pc, #20]	; (8000c88 <HAL_IncTick+0x20>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4413      	add	r3, r2
 8000c78:	4a03      	ldr	r2, [pc, #12]	; (8000c88 <HAL_IncTick+0x20>)
 8000c7a:	6013      	str	r3, [r2, #0]
}
 8000c7c:	bf00      	nop
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bc80      	pop	{r7}
 8000c82:	4770      	bx	lr
 8000c84:	20000008 	.word	0x20000008
 8000c88:	200001dc 	.word	0x200001dc

08000c8c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c90:	4b02      	ldr	r3, [pc, #8]	; (8000c9c <HAL_GetTick+0x10>)
 8000c92:	681b      	ldr	r3, [r3, #0]
}
 8000c94:	4618      	mov	r0, r3
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bc80      	pop	{r7}
 8000c9a:	4770      	bx	lr
 8000c9c:	200001dc 	.word	0x200001dc

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ccc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cd2:	4a04      	ldr	r2, [pc, #16]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cd4:	68bb      	ldr	r3, [r7, #8]
 8000cd6:	60d3      	str	r3, [r2, #12]
}
 8000cd8:	bf00      	nop
 8000cda:	3714      	adds	r7, #20
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bc80      	pop	{r7}
 8000ce0:	4770      	bx	lr
 8000ce2:	bf00      	nop
 8000ce4:	e000ed00 	.word	0xe000ed00

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bc80      	pop	{r7}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4906      	ldr	r1, [pc, #24]	; (8000d38 <__NVIC_EnableIRQ+0x34>)
 8000d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bc80      	pop	{r7}
 8000d36:	4770      	bx	lr
 8000d38:	e000e100 	.word	0xe000e100

08000d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	db0a      	blt.n	8000d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d50:	683b      	ldr	r3, [r7, #0]
 8000d52:	b2da      	uxtb	r2, r3
 8000d54:	490c      	ldr	r1, [pc, #48]	; (8000d88 <__NVIC_SetPriority+0x4c>)
 8000d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d5a:	0112      	lsls	r2, r2, #4
 8000d5c:	b2d2      	uxtb	r2, r2
 8000d5e:	440b      	add	r3, r1
 8000d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d64:	e00a      	b.n	8000d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d66:	683b      	ldr	r3, [r7, #0]
 8000d68:	b2da      	uxtb	r2, r3
 8000d6a:	4908      	ldr	r1, [pc, #32]	; (8000d8c <__NVIC_SetPriority+0x50>)
 8000d6c:	79fb      	ldrb	r3, [r7, #7]
 8000d6e:	f003 030f 	and.w	r3, r3, #15
 8000d72:	3b04      	subs	r3, #4
 8000d74:	0112      	lsls	r2, r2, #4
 8000d76:	b2d2      	uxtb	r2, r2
 8000d78:	440b      	add	r3, r1
 8000d7a:	761a      	strb	r2, [r3, #24]
}
 8000d7c:	bf00      	nop
 8000d7e:	370c      	adds	r7, #12
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bc80      	pop	{r7}
 8000d84:	4770      	bx	lr
 8000d86:	bf00      	nop
 8000d88:	e000e100 	.word	0xe000e100
 8000d8c:	e000ed00 	.word	0xe000ed00

08000d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b089      	sub	sp, #36	; 0x24
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	60f8      	str	r0, [r7, #12]
 8000d98:	60b9      	str	r1, [r7, #8]
 8000d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	f003 0307 	and.w	r3, r3, #7
 8000da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da4:	69fb      	ldr	r3, [r7, #28]
 8000da6:	f1c3 0307 	rsb	r3, r3, #7
 8000daa:	2b04      	cmp	r3, #4
 8000dac:	bf28      	it	cs
 8000dae:	2304      	movcs	r3, #4
 8000db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db2:	69fb      	ldr	r3, [r7, #28]
 8000db4:	3304      	adds	r3, #4
 8000db6:	2b06      	cmp	r3, #6
 8000db8:	d902      	bls.n	8000dc0 <NVIC_EncodePriority+0x30>
 8000dba:	69fb      	ldr	r3, [r7, #28]
 8000dbc:	3b03      	subs	r3, #3
 8000dbe:	e000      	b.n	8000dc2 <NVIC_EncodePriority+0x32>
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8000dc8:	69bb      	ldr	r3, [r7, #24]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	43da      	mvns	r2, r3
 8000dd0:	68bb      	ldr	r3, [r7, #8]
 8000dd2:	401a      	ands	r2, r3
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	43d9      	mvns	r1, r3
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de8:	4313      	orrs	r3, r2
         );
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3724      	adds	r7, #36	; 0x24
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bc80      	pop	{r7}
 8000df2:	4770      	bx	lr

08000df4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b082      	sub	sp, #8
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	3b01      	subs	r3, #1
 8000e00:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e04:	d301      	bcc.n	8000e0a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e06:	2301      	movs	r3, #1
 8000e08:	e00f      	b.n	8000e2a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e0a:	4a0a      	ldr	r2, [pc, #40]	; (8000e34 <SysTick_Config+0x40>)
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e12:	210f      	movs	r1, #15
 8000e14:	f04f 30ff 	mov.w	r0, #4294967295
 8000e18:	f7ff ff90 	bl	8000d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <SysTick_Config+0x40>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e22:	4b04      	ldr	r3, [pc, #16]	; (8000e34 <SysTick_Config+0x40>)
 8000e24:	2207      	movs	r2, #7
 8000e26:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e28:	2300      	movs	r3, #0
}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	e000e010 	.word	0xe000e010

08000e38 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff2d 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b086      	sub	sp, #24
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	4603      	mov	r3, r0
 8000e56:	60b9      	str	r1, [r7, #8]
 8000e58:	607a      	str	r2, [r7, #4]
 8000e5a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e60:	f7ff ff42 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e64:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e66:	687a      	ldr	r2, [r7, #4]
 8000e68:	68b9      	ldr	r1, [r7, #8]
 8000e6a:	6978      	ldr	r0, [r7, #20]
 8000e6c:	f7ff ff90 	bl	8000d90 <NVIC_EncodePriority>
 8000e70:	4602      	mov	r2, r0
 8000e72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e76:	4611      	mov	r1, r2
 8000e78:	4618      	mov	r0, r3
 8000e7a:	f7ff ff5f 	bl	8000d3c <__NVIC_SetPriority>
}
 8000e7e:	bf00      	nop
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e86:	b580      	push	{r7, lr}
 8000e88:	b082      	sub	sp, #8
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff35 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eaa:	6878      	ldr	r0, [r7, #4]
 8000eac:	f7ff ffa2 	bl	8000df4 <SysTick_Config>
 8000eb0:	4603      	mov	r3, r0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b085      	sub	sp, #20
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000ecc:	2b02      	cmp	r3, #2
 8000ece:	d008      	beq.n	8000ee2 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	2200      	movs	r2, #0
 8000eda:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e020      	b.n	8000f24 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	681a      	ldr	r2, [r3, #0]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f022 020e 	bic.w	r2, r2, #14
 8000ef0:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f022 0201 	bic.w	r2, r2, #1
 8000f00:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000f0a:	2101      	movs	r1, #1
 8000f0c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f10:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2201      	movs	r2, #1
 8000f16:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000f22:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	3714      	adds	r7, #20
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bc80      	pop	{r7}
 8000f2c:	4770      	bx	lr
	...

08000f30 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b084      	sub	sp, #16
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000f42:	2b02      	cmp	r3, #2
 8000f44:	d005      	beq.n	8000f52 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	2204      	movs	r2, #4
 8000f4a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	73fb      	strb	r3, [r7, #15]
 8000f50:	e051      	b.n	8000ff6 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f022 020e 	bic.w	r2, r2, #14
 8000f60:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	681a      	ldr	r2, [r3, #0]
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f022 0201 	bic.w	r2, r2, #1
 8000f70:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a22      	ldr	r2, [pc, #136]	; (8001000 <HAL_DMA_Abort_IT+0xd0>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d029      	beq.n	8000fd0 <HAL_DMA_Abort_IT+0xa0>
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a20      	ldr	r2, [pc, #128]	; (8001004 <HAL_DMA_Abort_IT+0xd4>)
 8000f82:	4293      	cmp	r3, r2
 8000f84:	d022      	beq.n	8000fcc <HAL_DMA_Abort_IT+0x9c>
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4a1f      	ldr	r2, [pc, #124]	; (8001008 <HAL_DMA_Abort_IT+0xd8>)
 8000f8c:	4293      	cmp	r3, r2
 8000f8e:	d01a      	beq.n	8000fc6 <HAL_DMA_Abort_IT+0x96>
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	4a1d      	ldr	r2, [pc, #116]	; (800100c <HAL_DMA_Abort_IT+0xdc>)
 8000f96:	4293      	cmp	r3, r2
 8000f98:	d012      	beq.n	8000fc0 <HAL_DMA_Abort_IT+0x90>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	4a1c      	ldr	r2, [pc, #112]	; (8001010 <HAL_DMA_Abort_IT+0xe0>)
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d00a      	beq.n	8000fba <HAL_DMA_Abort_IT+0x8a>
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a1a      	ldr	r2, [pc, #104]	; (8001014 <HAL_DMA_Abort_IT+0xe4>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d102      	bne.n	8000fb4 <HAL_DMA_Abort_IT+0x84>
 8000fae:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000fb2:	e00e      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xa2>
 8000fb4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb8:	e00b      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xa2>
 8000fba:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fbe:	e008      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xa2>
 8000fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc4:	e005      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xa2>
 8000fc6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000fca:	e002      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xa2>
 8000fcc:	2310      	movs	r3, #16
 8000fce:	e000      	b.n	8000fd2 <HAL_DMA_Abort_IT+0xa2>
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	4a11      	ldr	r2, [pc, #68]	; (8001018 <HAL_DMA_Abort_IT+0xe8>)
 8000fd4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ff2:	6878      	ldr	r0, [r7, #4]
 8000ff4:	4798      	blx	r3
    } 
  }
  return status;
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	3710      	adds	r7, #16
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	40020008 	.word	0x40020008
 8001004:	4002001c 	.word	0x4002001c
 8001008:	40020030 	.word	0x40020030
 800100c:	40020044 	.word	0x40020044
 8001010:	40020058 	.word	0x40020058
 8001014:	4002006c 	.word	0x4002006c
 8001018:	40020000 	.word	0x40020000

0800101c <HAL_DMA_GetState>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	bc80      	pop	{r7}
 8001032:	4770      	bx	lr

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b08b      	sub	sp, #44	; 0x2c
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800103e:	2300      	movs	r3, #0
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001042:	2300      	movs	r3, #0
 8001044:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	e169      	b.n	800131c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001048:	2201      	movs	r2, #1
 800104a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	69fa      	ldr	r2, [r7, #28]
 8001058:	4013      	ands	r3, r2
 800105a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	429a      	cmp	r2, r3
 8001062:	f040 8158 	bne.w	8001316 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	4a9a      	ldr	r2, [pc, #616]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d05e      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001070:	4a98      	ldr	r2, [pc, #608]	; (80012d4 <HAL_GPIO_Init+0x2a0>)
 8001072:	4293      	cmp	r3, r2
 8001074:	d875      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001076:	4a98      	ldr	r2, [pc, #608]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d058      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 800107c:	4a96      	ldr	r2, [pc, #600]	; (80012d8 <HAL_GPIO_Init+0x2a4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d86f      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 8001082:	4a96      	ldr	r2, [pc, #600]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 8001084:	4293      	cmp	r3, r2
 8001086:	d052      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001088:	4a94      	ldr	r2, [pc, #592]	; (80012dc <HAL_GPIO_Init+0x2a8>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d869      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800108e:	4a94      	ldr	r2, [pc, #592]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001090:	4293      	cmp	r3, r2
 8001092:	d04c      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 8001094:	4a92      	ldr	r2, [pc, #584]	; (80012e0 <HAL_GPIO_Init+0x2ac>)
 8001096:	4293      	cmp	r3, r2
 8001098:	d863      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 800109a:	4a92      	ldr	r2, [pc, #584]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d046      	beq.n	800112e <HAL_GPIO_Init+0xfa>
 80010a0:	4a90      	ldr	r2, [pc, #576]	; (80012e4 <HAL_GPIO_Init+0x2b0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d85d      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010a6:	2b12      	cmp	r3, #18
 80010a8:	d82a      	bhi.n	8001100 <HAL_GPIO_Init+0xcc>
 80010aa:	2b12      	cmp	r3, #18
 80010ac:	d859      	bhi.n	8001162 <HAL_GPIO_Init+0x12e>
 80010ae:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <HAL_GPIO_Init+0x80>)
 80010b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b4:	0800112f 	.word	0x0800112f
 80010b8:	08001109 	.word	0x08001109
 80010bc:	0800111b 	.word	0x0800111b
 80010c0:	0800115d 	.word	0x0800115d
 80010c4:	08001163 	.word	0x08001163
 80010c8:	08001163 	.word	0x08001163
 80010cc:	08001163 	.word	0x08001163
 80010d0:	08001163 	.word	0x08001163
 80010d4:	08001163 	.word	0x08001163
 80010d8:	08001163 	.word	0x08001163
 80010dc:	08001163 	.word	0x08001163
 80010e0:	08001163 	.word	0x08001163
 80010e4:	08001163 	.word	0x08001163
 80010e8:	08001163 	.word	0x08001163
 80010ec:	08001163 	.word	0x08001163
 80010f0:	08001163 	.word	0x08001163
 80010f4:	08001163 	.word	0x08001163
 80010f8:	08001111 	.word	0x08001111
 80010fc:	08001125 	.word	0x08001125
 8001100:	4a79      	ldr	r2, [pc, #484]	; (80012e8 <HAL_GPIO_Init+0x2b4>)
 8001102:	4293      	cmp	r3, r2
 8001104:	d013      	beq.n	800112e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001106:	e02c      	b.n	8001162 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	68db      	ldr	r3, [r3, #12]
 800110c:	623b      	str	r3, [r7, #32]
          break;
 800110e:	e029      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001110:	683b      	ldr	r3, [r7, #0]
 8001112:	68db      	ldr	r3, [r3, #12]
 8001114:	3304      	adds	r3, #4
 8001116:	623b      	str	r3, [r7, #32]
          break;
 8001118:	e024      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	68db      	ldr	r3, [r3, #12]
 800111e:	3308      	adds	r3, #8
 8001120:	623b      	str	r3, [r7, #32]
          break;
 8001122:	e01f      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	330c      	adds	r3, #12
 800112a:	623b      	str	r3, [r7, #32]
          break;
 800112c:	e01a      	b.n	8001164 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	689b      	ldr	r3, [r3, #8]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d102      	bne.n	800113c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001136:	2304      	movs	r3, #4
 8001138:	623b      	str	r3, [r7, #32]
          break;
 800113a:	e013      	b.n	8001164 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	2b01      	cmp	r3, #1
 8001142:	d105      	bne.n	8001150 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001144:	2308      	movs	r3, #8
 8001146:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	69fa      	ldr	r2, [r7, #28]
 800114c:	611a      	str	r2, [r3, #16]
          break;
 800114e:	e009      	b.n	8001164 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001150:	2308      	movs	r3, #8
 8001152:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	69fa      	ldr	r2, [r7, #28]
 8001158:	615a      	str	r2, [r3, #20]
          break;
 800115a:	e003      	b.n	8001164 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800115c:	2300      	movs	r3, #0
 800115e:	623b      	str	r3, [r7, #32]
          break;
 8001160:	e000      	b.n	8001164 <HAL_GPIO_Init+0x130>
          break;
 8001162:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	2bff      	cmp	r3, #255	; 0xff
 8001168:	d801      	bhi.n	800116e <HAL_GPIO_Init+0x13a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	e001      	b.n	8001172 <HAL_GPIO_Init+0x13e>
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3304      	adds	r3, #4
 8001172:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2bff      	cmp	r3, #255	; 0xff
 8001178:	d802      	bhi.n	8001180 <HAL_GPIO_Init+0x14c>
 800117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800117c:	009b      	lsls	r3, r3, #2
 800117e:	e002      	b.n	8001186 <HAL_GPIO_Init+0x152>
 8001180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001182:	3b08      	subs	r3, #8
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	210f      	movs	r1, #15
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	fa01 f303 	lsl.w	r3, r1, r3
 8001194:	43db      	mvns	r3, r3
 8001196:	401a      	ands	r2, r3
 8001198:	6a39      	ldr	r1, [r7, #32]
 800119a:	693b      	ldr	r3, [r7, #16]
 800119c:	fa01 f303 	lsl.w	r3, r1, r3
 80011a0:	431a      	orrs	r2, r3
 80011a2:	697b      	ldr	r3, [r7, #20]
 80011a4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	f000 80b1 	beq.w	8001316 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80011b4:	4b4d      	ldr	r3, [pc, #308]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011b6:	699b      	ldr	r3, [r3, #24]
 80011b8:	4a4c      	ldr	r2, [pc, #304]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011ba:	f043 0301 	orr.w	r3, r3, #1
 80011be:	6193      	str	r3, [r2, #24]
 80011c0:	4b4a      	ldr	r3, [pc, #296]	; (80012ec <HAL_GPIO_Init+0x2b8>)
 80011c2:	699b      	ldr	r3, [r3, #24]
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	60bb      	str	r3, [r7, #8]
 80011ca:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80011cc:	4a48      	ldr	r2, [pc, #288]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 80011ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011d0:	089b      	lsrs	r3, r3, #2
 80011d2:	3302      	adds	r3, #2
 80011d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011d8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80011da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011dc:	f003 0303 	and.w	r3, r3, #3
 80011e0:	009b      	lsls	r3, r3, #2
 80011e2:	220f      	movs	r2, #15
 80011e4:	fa02 f303 	lsl.w	r3, r2, r3
 80011e8:	43db      	mvns	r3, r3
 80011ea:	68fa      	ldr	r2, [r7, #12]
 80011ec:	4013      	ands	r3, r2
 80011ee:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	4a40      	ldr	r2, [pc, #256]	; (80012f4 <HAL_GPIO_Init+0x2c0>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d013      	beq.n	8001220 <HAL_GPIO_Init+0x1ec>
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	4a3f      	ldr	r2, [pc, #252]	; (80012f8 <HAL_GPIO_Init+0x2c4>)
 80011fc:	4293      	cmp	r3, r2
 80011fe:	d00d      	beq.n	800121c <HAL_GPIO_Init+0x1e8>
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	4a3e      	ldr	r2, [pc, #248]	; (80012fc <HAL_GPIO_Init+0x2c8>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d007      	beq.n	8001218 <HAL_GPIO_Init+0x1e4>
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4a3d      	ldr	r2, [pc, #244]	; (8001300 <HAL_GPIO_Init+0x2cc>)
 800120c:	4293      	cmp	r3, r2
 800120e:	d101      	bne.n	8001214 <HAL_GPIO_Init+0x1e0>
 8001210:	2303      	movs	r3, #3
 8001212:	e006      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001214:	2304      	movs	r3, #4
 8001216:	e004      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001218:	2302      	movs	r3, #2
 800121a:	e002      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 800121c:	2301      	movs	r3, #1
 800121e:	e000      	b.n	8001222 <HAL_GPIO_Init+0x1ee>
 8001220:	2300      	movs	r3, #0
 8001222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001224:	f002 0203 	and.w	r2, r2, #3
 8001228:	0092      	lsls	r2, r2, #2
 800122a:	4093      	lsls	r3, r2
 800122c:	68fa      	ldr	r2, [r7, #12]
 800122e:	4313      	orrs	r3, r2
 8001230:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001232:	492f      	ldr	r1, [pc, #188]	; (80012f0 <HAL_GPIO_Init+0x2bc>)
 8001234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001236:	089b      	lsrs	r3, r3, #2
 8001238:	3302      	adds	r3, #2
 800123a:	68fa      	ldr	r2, [r7, #12]
 800123c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d006      	beq.n	800125a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800124c:	4b2d      	ldr	r3, [pc, #180]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	492c      	ldr	r1, [pc, #176]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e006      	b.n	8001268 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800125a:	4b2a      	ldr	r3, [pc, #168]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	43db      	mvns	r3, r3
 8001262:	4928      	ldr	r1, [pc, #160]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001264:	4013      	ands	r3, r2
 8001266:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001270:	2b00      	cmp	r3, #0
 8001272:	d006      	beq.n	8001282 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001274:	4b23      	ldr	r3, [pc, #140]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	4922      	ldr	r1, [pc, #136]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800127a:	69bb      	ldr	r3, [r7, #24]
 800127c:	4313      	orrs	r3, r2
 800127e:	604b      	str	r3, [r1, #4]
 8001280:	e006      	b.n	8001290 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001282:	4b20      	ldr	r3, [pc, #128]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 8001284:	685a      	ldr	r2, [r3, #4]
 8001286:	69bb      	ldr	r3, [r7, #24]
 8001288:	43db      	mvns	r3, r3
 800128a:	491e      	ldr	r1, [pc, #120]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800128c:	4013      	ands	r3, r2
 800128e:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001298:	2b00      	cmp	r3, #0
 800129a:	d006      	beq.n	80012aa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800129c:	4b19      	ldr	r3, [pc, #100]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 800129e:	689a      	ldr	r2, [r3, #8]
 80012a0:	4918      	ldr	r1, [pc, #96]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012a2:	69bb      	ldr	r3, [r7, #24]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	608b      	str	r3, [r1, #8]
 80012a8:	e006      	b.n	80012b8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012aa:	4b16      	ldr	r3, [pc, #88]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ac:	689a      	ldr	r2, [r3, #8]
 80012ae:	69bb      	ldr	r3, [r7, #24]
 80012b0:	43db      	mvns	r3, r3
 80012b2:	4914      	ldr	r1, [pc, #80]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012b4:	4013      	ands	r3, r2
 80012b6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d021      	beq.n	8001308 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80012c4:	4b0f      	ldr	r3, [pc, #60]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012c6:	68da      	ldr	r2, [r3, #12]
 80012c8:	490e      	ldr	r1, [pc, #56]	; (8001304 <HAL_GPIO_Init+0x2d0>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	60cb      	str	r3, [r1, #12]
 80012d0:	e021      	b.n	8001316 <HAL_GPIO_Init+0x2e2>
 80012d2:	bf00      	nop
 80012d4:	10320000 	.word	0x10320000
 80012d8:	10310000 	.word	0x10310000
 80012dc:	10220000 	.word	0x10220000
 80012e0:	10210000 	.word	0x10210000
 80012e4:	10120000 	.word	0x10120000
 80012e8:	10110000 	.word	0x10110000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010000 	.word	0x40010000
 80012f4:	40010800 	.word	0x40010800
 80012f8:	40010c00 	.word	0x40010c00
 80012fc:	40011000 	.word	0x40011000
 8001300:	40011400 	.word	0x40011400
 8001304:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001308:	4b0b      	ldr	r3, [pc, #44]	; (8001338 <HAL_GPIO_Init+0x304>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	43db      	mvns	r3, r3
 8001310:	4909      	ldr	r1, [pc, #36]	; (8001338 <HAL_GPIO_Init+0x304>)
 8001312:	4013      	ands	r3, r2
 8001314:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001318:	3301      	adds	r3, #1
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800131c:	683b      	ldr	r3, [r7, #0]
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001322:	fa22 f303 	lsr.w	r3, r2, r3
 8001326:	2b00      	cmp	r3, #0
 8001328:	f47f ae8e 	bne.w	8001048 <HAL_GPIO_Init+0x14>
  }
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	372c      	adds	r7, #44	; 0x2c
 8001332:	46bd      	mov	sp, r7
 8001334:	bc80      	pop	{r7}
 8001336:	4770      	bx	lr
 8001338:	40010400 	.word	0x40010400

0800133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
 8001344:	460b      	mov	r3, r1
 8001346:	807b      	strh	r3, [r7, #2]
 8001348:	4613      	mov	r3, r2
 800134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800134c:	787b      	ldrb	r3, [r7, #1]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d003      	beq.n	800135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001352:	887a      	ldrh	r2, [r7, #2]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001358:	e003      	b.n	8001362 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800135a:	887b      	ldrh	r3, [r7, #2]
 800135c:	041a      	lsls	r2, r3, #16
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	611a      	str	r2, [r3, #16]
}
 8001362:	bf00      	nop
 8001364:	370c      	adds	r7, #12
 8001366:	46bd      	mov	sp, r7
 8001368:	bc80      	pop	{r7}
 800136a:	4770      	bx	lr

0800136c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b084      	sub	sp, #16
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d101      	bne.n	800137e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800137a:	2301      	movs	r3, #1
 800137c:	e12b      	b.n	80015d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001384:	b2db      	uxtb	r3, r3
 8001386:	2b00      	cmp	r3, #0
 8001388:	d106      	bne.n	8001398 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2200      	movs	r2, #0
 800138e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f7ff fa60 	bl	8000858 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2224      	movs	r2, #36	; 0x24
 800139c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	681a      	ldr	r2, [r3, #0]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 0201 	bic.w	r2, r2, #1
 80013ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	681a      	ldr	r2, [r3, #0]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	681a      	ldr	r2, [r3, #0]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013d0:	f002 fac0 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 80013d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	4a81      	ldr	r2, [pc, #516]	; (80015e0 <HAL_I2C_Init+0x274>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d807      	bhi.n	80013f0 <HAL_I2C_Init+0x84>
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	4a80      	ldr	r2, [pc, #512]	; (80015e4 <HAL_I2C_Init+0x278>)
 80013e4:	4293      	cmp	r3, r2
 80013e6:	bf94      	ite	ls
 80013e8:	2301      	movls	r3, #1
 80013ea:	2300      	movhi	r3, #0
 80013ec:	b2db      	uxtb	r3, r3
 80013ee:	e006      	b.n	80013fe <HAL_I2C_Init+0x92>
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	4a7d      	ldr	r2, [pc, #500]	; (80015e8 <HAL_I2C_Init+0x27c>)
 80013f4:	4293      	cmp	r3, r2
 80013f6:	bf94      	ite	ls
 80013f8:	2301      	movls	r3, #1
 80013fa:	2300      	movhi	r3, #0
 80013fc:	b2db      	uxtb	r3, r3
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001402:	2301      	movs	r3, #1
 8001404:	e0e7      	b.n	80015d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	4a78      	ldr	r2, [pc, #480]	; (80015ec <HAL_I2C_Init+0x280>)
 800140a:	fba2 2303 	umull	r2, r3, r2, r3
 800140e:	0c9b      	lsrs	r3, r3, #18
 8001410:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	685b      	ldr	r3, [r3, #4]
 8001418:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	68ba      	ldr	r2, [r7, #8]
 8001422:	430a      	orrs	r2, r1
 8001424:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	6a1b      	ldr	r3, [r3, #32]
 800142c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	4a6a      	ldr	r2, [pc, #424]	; (80015e0 <HAL_I2C_Init+0x274>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d802      	bhi.n	8001440 <HAL_I2C_Init+0xd4>
 800143a:	68bb      	ldr	r3, [r7, #8]
 800143c:	3301      	adds	r3, #1
 800143e:	e009      	b.n	8001454 <HAL_I2C_Init+0xe8>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001446:	fb02 f303 	mul.w	r3, r2, r3
 800144a:	4a69      	ldr	r2, [pc, #420]	; (80015f0 <HAL_I2C_Init+0x284>)
 800144c:	fba2 2303 	umull	r2, r3, r2, r3
 8001450:	099b      	lsrs	r3, r3, #6
 8001452:	3301      	adds	r3, #1
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	6812      	ldr	r2, [r2, #0]
 8001458:	430b      	orrs	r3, r1
 800145a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	69db      	ldr	r3, [r3, #28]
 8001462:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001466:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	685b      	ldr	r3, [r3, #4]
 800146e:	495c      	ldr	r1, [pc, #368]	; (80015e0 <HAL_I2C_Init+0x274>)
 8001470:	428b      	cmp	r3, r1
 8001472:	d819      	bhi.n	80014a8 <HAL_I2C_Init+0x13c>
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	1e59      	subs	r1, r3, #1
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	005b      	lsls	r3, r3, #1
 800147e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001482:	1c59      	adds	r1, r3, #1
 8001484:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001488:	400b      	ands	r3, r1
 800148a:	2b00      	cmp	r3, #0
 800148c:	d00a      	beq.n	80014a4 <HAL_I2C_Init+0x138>
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	1e59      	subs	r1, r3, #1
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	fbb1 f3f3 	udiv	r3, r1, r3
 800149c:	3301      	adds	r3, #1
 800149e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014a2:	e051      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 80014a4:	2304      	movs	r3, #4
 80014a6:	e04f      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d111      	bne.n	80014d4 <HAL_I2C_Init+0x168>
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	1e58      	subs	r0, r3, #1
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	6859      	ldr	r1, [r3, #4]
 80014b8:	460b      	mov	r3, r1
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	440b      	add	r3, r1
 80014be:	fbb0 f3f3 	udiv	r3, r0, r3
 80014c2:	3301      	adds	r3, #1
 80014c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	bf0c      	ite	eq
 80014cc:	2301      	moveq	r3, #1
 80014ce:	2300      	movne	r3, #0
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	e012      	b.n	80014fa <HAL_I2C_Init+0x18e>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	1e58      	subs	r0, r3, #1
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	6859      	ldr	r1, [r3, #4]
 80014dc:	460b      	mov	r3, r1
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	0099      	lsls	r1, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80014ea:	3301      	adds	r3, #1
 80014ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	bf0c      	ite	eq
 80014f4:	2301      	moveq	r3, #1
 80014f6:	2300      	movne	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <HAL_I2C_Init+0x196>
 80014fe:	2301      	movs	r3, #1
 8001500:	e022      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	689b      	ldr	r3, [r3, #8]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d10e      	bne.n	8001528 <HAL_I2C_Init+0x1bc>
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	1e58      	subs	r0, r3, #1
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6859      	ldr	r1, [r3, #4]
 8001512:	460b      	mov	r3, r1
 8001514:	005b      	lsls	r3, r3, #1
 8001516:	440b      	add	r3, r1
 8001518:	fbb0 f3f3 	udiv	r3, r0, r3
 800151c:	3301      	adds	r3, #1
 800151e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001522:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001526:	e00f      	b.n	8001548 <HAL_I2C_Init+0x1dc>
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	1e58      	subs	r0, r3, #1
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6859      	ldr	r1, [r3, #4]
 8001530:	460b      	mov	r3, r1
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	0099      	lsls	r1, r3, #2
 8001538:	440b      	add	r3, r1
 800153a:	fbb0 f3f3 	udiv	r3, r0, r3
 800153e:	3301      	adds	r3, #1
 8001540:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001544:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001548:	6879      	ldr	r1, [r7, #4]
 800154a:	6809      	ldr	r1, [r1, #0]
 800154c:	4313      	orrs	r3, r2
 800154e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	69da      	ldr	r2, [r3, #28]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	6a1b      	ldr	r3, [r3, #32]
 8001562:	431a      	orrs	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001576:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	6911      	ldr	r1, [r2, #16]
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	68d2      	ldr	r2, [r2, #12]
 8001582:	4311      	orrs	r1, r2
 8001584:	687a      	ldr	r2, [r7, #4]
 8001586:	6812      	ldr	r2, [r2, #0]
 8001588:	430b      	orrs	r3, r1
 800158a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	68db      	ldr	r3, [r3, #12]
 8001592:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	695a      	ldr	r2, [r3, #20]
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	699b      	ldr	r3, [r3, #24]
 800159e:	431a      	orrs	r2, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	430a      	orrs	r2, r1
 80015a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681a      	ldr	r2, [r3, #0]
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f042 0201 	orr.w	r2, r2, #1
 80015b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2200      	movs	r2, #0
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	2220      	movs	r2, #32
 80015c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2200      	movs	r2, #0
 80015ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015d4:	2300      	movs	r3, #0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3710      	adds	r7, #16
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	000186a0 	.word	0x000186a0
 80015e4:	001e847f 	.word	0x001e847f
 80015e8:	003d08ff 	.word	0x003d08ff
 80015ec:	431bde83 	.word	0x431bde83
 80015f0:	10624dd3 	.word	0x10624dd3

080015f4 <HAL_I2C_Slave_Seq_Transmit_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b087      	sub	sp, #28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	603b      	str	r3, [r7, #0]
 8001600:	4613      	mov	r3, r2
 8001602:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800160a:	b2db      	uxtb	r3, r3
 800160c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8001610:	2b28      	cmp	r3, #40	; 0x28
 8001612:	d15b      	bne.n	80016cc <HAL_I2C_Slave_Seq_Transmit_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 8001614:	68bb      	ldr	r3, [r7, #8]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d002      	beq.n	8001620 <HAL_I2C_Slave_Seq_Transmit_IT+0x2c>
 800161a:	88fb      	ldrh	r3, [r7, #6]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d101      	bne.n	8001624 <HAL_I2C_Slave_Seq_Transmit_IT+0x30>
    {
      return  HAL_ERROR;
 8001620:	2301      	movs	r3, #1
 8001622:	e054      	b.n	80016ce <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800162a:	2b01      	cmp	r3, #1
 800162c:	d101      	bne.n	8001632 <HAL_I2C_Slave_Seq_Transmit_IT+0x3e>
 800162e:	2302      	movs	r3, #2
 8001630:	e04d      	b.n	80016ce <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0301 	and.w	r3, r3, #1
 8001644:	2b01      	cmp	r3, #1
 8001646:	d007      	beq.n	8001658 <HAL_I2C_Slave_Seq_Transmit_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681a      	ldr	r2, [r3, #0]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 0201 	orr.w	r2, r2, #1
 8001656:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681a      	ldr	r2, [r3, #0]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001666:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX_LISTEN;
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	2229      	movs	r2, #41	; 0x29
 800166c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	2220      	movs	r2, #32
 8001674:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2200      	movs	r2, #0
 800167c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	68ba      	ldr	r2, [r7, #8]
 8001682:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	88fa      	ldrh	r2, [r7, #6]
 8001688:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800168e:	b29a      	uxth	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	683a      	ldr	r2, [r7, #0]
 8001698:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800169a:	2300      	movs	r3, #0
 800169c:	617b      	str	r3, [r7, #20]
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	695b      	ldr	r3, [r3, #20]
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	617b      	str	r3, [r7, #20]
 80016ae:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016b0:	68fb      	ldr	r3, [r7, #12]
 80016b2:	2200      	movs	r2, #0
 80016b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	685a      	ldr	r2, [r3, #4]
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80016c6:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80016c8:	2300      	movs	r3, #0
 80016ca:	e000      	b.n	80016ce <HAL_I2C_Slave_Seq_Transmit_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80016cc:	2302      	movs	r3, #2
  }
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	371c      	adds	r7, #28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bc80      	pop	{r7}
 80016d6:	4770      	bx	lr

080016d8 <HAL_I2C_Slave_Seq_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @param  XferOptions Options of Transfer, value of @ref I2C_XferOptions_definition
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Seq_Receive_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size, uint32_t XferOptions)
{
 80016d8:	b480      	push	{r7}
 80016da:	b087      	sub	sp, #28
 80016dc:	af00      	add	r7, sp, #0
 80016de:	60f8      	str	r0, [r7, #12]
 80016e0:	60b9      	str	r1, [r7, #8]
 80016e2:	603b      	str	r3, [r7, #0]
 80016e4:	4613      	mov	r3, r2
 80016e6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_I2C_TRANSFER_OPTIONS_REQUEST(XferOptions));

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80016f4:	2b28      	cmp	r3, #40	; 0x28
 80016f6:	d15b      	bne.n	80017b0 <HAL_I2C_Slave_Seq_Receive_IT+0xd8>
  {
    if ((pData == NULL) || (Size == 0U))
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <HAL_I2C_Slave_Seq_Receive_IT+0x2c>
 80016fe:	88fb      	ldrh	r3, [r7, #6]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d101      	bne.n	8001708 <HAL_I2C_Slave_Seq_Receive_IT+0x30>
    {
      return  HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	e054      	b.n	80017b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800170e:	2b01      	cmp	r3, #1
 8001710:	d101      	bne.n	8001716 <HAL_I2C_Slave_Seq_Receive_IT+0x3e>
 8001712:	2302      	movs	r3, #2
 8001714:	e04d      	b.n	80017b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0301 	and.w	r3, r3, #1
 8001728:	2b01      	cmp	r3, #1
 800172a:	d007      	beq.n	800173c <HAL_I2C_Slave_Seq_Receive_IT+0x64>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f042 0201 	orr.w	r2, r2, #1
 800173a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681a      	ldr	r2, [r3, #0]
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX_LISTEN;
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	222a      	movs	r2, #42	; 0x2a
 8001750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_SLAVE;
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2220      	movs	r2, #32
 8001758:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	68ba      	ldr	r2, [r7, #8]
 8001766:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	88fa      	ldrh	r2, [r7, #6]
 800176c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = XferOptions;
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800177e:	2300      	movs	r3, #0
 8001780:	617b      	str	r3, [r7, #20]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	695b      	ldr	r3, [r3, #20]
 8001788:	617b      	str	r3, [r7, #20]
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	699b      	ldr	r3, [r3, #24]
 8001790:	617b      	str	r3, [r7, #20]
 8001792:	697b      	ldr	r3, [r7, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 80017aa:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 80017ac:	2300      	movs	r3, #0
 80017ae:	e000      	b.n	80017b2 <HAL_I2C_Slave_Seq_Receive_IT+0xda>
  }
  else
  {
    return HAL_BUSY;
 80017b0:	2302      	movs	r3, #2
  }
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	371c      	adds	r7, #28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bc80      	pop	{r7}
 80017ba:	4770      	bx	lr

080017bc <HAL_I2C_EnableListen_IT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_EnableListen_IT(I2C_HandleTypeDef *hi2c)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_READY)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017ca:	b2db      	uxtb	r3, r3
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d124      	bne.n	800181a <HAL_I2C_EnableListen_IT+0x5e>
  {
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2228      	movs	r2, #40	; 0x28
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d007      	beq.n	80017f6 <HAL_I2C_EnableListen_IT+0x3a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	681a      	ldr	r2, [r3, #0]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f042 0201 	orr.w	r2, r2, #1
 80017f4:	601a      	str	r2, [r3, #0]
    }

    /* Enable Address Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	681a      	ldr	r2, [r3, #0]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001804:	601a      	str	r2, [r3, #0]

    /* Enable EVT and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8001814:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_I2C_EnableListen_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800181a:	2302      	movs	r3, #2
  }
}
 800181c:	4618      	mov	r0, r3
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	bc80      	pop	{r7}
 8001824:	4770      	bx	lr

08001826 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001826:	b580      	push	{r7, lr}
 8001828:	b088      	sub	sp, #32
 800182a:	af00      	add	r7, sp, #0
 800182c:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800182e:	2300      	movs	r3, #0
 8001830:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800183e:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001846:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800184e:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001850:	7bfb      	ldrb	r3, [r7, #15]
 8001852:	2b10      	cmp	r3, #16
 8001854:	d003      	beq.n	800185e <HAL_I2C_EV_IRQHandler+0x38>
 8001856:	7bfb      	ldrb	r3, [r7, #15]
 8001858:	2b40      	cmp	r3, #64	; 0x40
 800185a:	f040 80c1 	bne.w	80019e0 <HAL_I2C_EV_IRQHandler+0x1ba>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	695b      	ldr	r3, [r3, #20]
 800186c:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	f003 0301 	and.w	r3, r3, #1
 8001874:	2b00      	cmp	r3, #0
 8001876:	d10d      	bne.n	8001894 <HAL_I2C_EV_IRQHandler+0x6e>
 8001878:	693b      	ldr	r3, [r7, #16]
 800187a:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800187e:	d003      	beq.n	8001888 <HAL_I2C_EV_IRQHandler+0x62>
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8001886:	d101      	bne.n	800188c <HAL_I2C_EV_IRQHandler+0x66>
 8001888:	2301      	movs	r3, #1
 800188a:	e000      	b.n	800188e <HAL_I2C_EV_IRQHandler+0x68>
 800188c:	2300      	movs	r3, #0
 800188e:	2b01      	cmp	r3, #1
 8001890:	f000 8132 	beq.w	8001af8 <HAL_I2C_EV_IRQHandler+0x2d2>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001894:	69fb      	ldr	r3, [r7, #28]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d00c      	beq.n	80018b8 <HAL_I2C_EV_IRQHandler+0x92>
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	0a5b      	lsrs	r3, r3, #9
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f001 fc64 	bl	8003178 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	f000 fd65 	bl	8002380 <I2C_Master_SB>
 80018b6:	e092      	b.n	80019de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	08db      	lsrs	r3, r3, #3
 80018bc:	f003 0301 	and.w	r3, r3, #1
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d009      	beq.n	80018d8 <HAL_I2C_EV_IRQHandler+0xb2>
 80018c4:	697b      	ldr	r3, [r7, #20]
 80018c6:	0a5b      	lsrs	r3, r3, #9
 80018c8:	f003 0301 	and.w	r3, r3, #1
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	f000 fdda 	bl	800248a <I2C_Master_ADD10>
 80018d6:	e082      	b.n	80019de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	085b      	lsrs	r3, r3, #1
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d009      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0xd2>
 80018e4:	697b      	ldr	r3, [r7, #20]
 80018e6:	0a5b      	lsrs	r3, r3, #9
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d003      	beq.n	80018f8 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	f000 fdf3 	bl	80024dc <I2C_Master_ADDR>
 80018f6:	e072      	b.n	80019de <HAL_I2C_EV_IRQHandler+0x1b8>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	089b      	lsrs	r3, r3, #2
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d03b      	beq.n	800197c <HAL_I2C_EV_IRQHandler+0x156>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800190e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001912:	f000 80f3 	beq.w	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001916:	69fb      	ldr	r3, [r7, #28]
 8001918:	09db      	lsrs	r3, r3, #7
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d00f      	beq.n	8001942 <HAL_I2C_EV_IRQHandler+0x11c>
 8001922:	697b      	ldr	r3, [r7, #20]
 8001924:	0a9b      	lsrs	r3, r3, #10
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d009      	beq.n	8001942 <HAL_I2C_EV_IRQHandler+0x11c>
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	089b      	lsrs	r3, r3, #2
 8001932:	f003 0301 	and.w	r3, r3, #1
 8001936:	2b00      	cmp	r3, #0
 8001938:	d103      	bne.n	8001942 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 800193a:	6878      	ldr	r0, [r7, #4]
 800193c:	f000 f9df 	bl	8001cfe <I2C_MasterTransmit_TXE>
 8001940:	e04d      	b.n	80019de <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	2b00      	cmp	r3, #0
 800194c:	f000 80d6 	beq.w	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	0a5b      	lsrs	r3, r3, #9
 8001954:	f003 0301 	and.w	r3, r3, #1
 8001958:	2b00      	cmp	r3, #0
 800195a:	f000 80cf 	beq.w	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800195e:	7bbb      	ldrb	r3, [r7, #14]
 8001960:	2b21      	cmp	r3, #33	; 0x21
 8001962:	d103      	bne.n	800196c <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8001964:	6878      	ldr	r0, [r7, #4]
 8001966:	f000 fa66 	bl	8001e36 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800196a:	e0c7      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 800196c:	7bfb      	ldrb	r3, [r7, #15]
 800196e:	2b40      	cmp	r3, #64	; 0x40
 8001970:	f040 80c4 	bne.w	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 fad4 	bl	8001f22 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800197a:	e0bf      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	685b      	ldr	r3, [r3, #4]
 8001982:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001986:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800198a:	f000 80b7 	beq.w	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d00f      	beq.n	80019ba <HAL_I2C_EV_IRQHandler+0x194>
 800199a:	697b      	ldr	r3, [r7, #20]
 800199c:	0a9b      	lsrs	r3, r3, #10
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d009      	beq.n	80019ba <HAL_I2C_EV_IRQHandler+0x194>
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	089b      	lsrs	r3, r3, #2
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d103      	bne.n	80019ba <HAL_I2C_EV_IRQHandler+0x194>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80019b2:	6878      	ldr	r0, [r7, #4]
 80019b4:	f000 fb49 	bl	800204a <I2C_MasterReceive_RXNE>
 80019b8:	e011      	b.n	80019de <HAL_I2C_EV_IRQHandler+0x1b8>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019ba:	69fb      	ldr	r3, [r7, #28]
 80019bc:	089b      	lsrs	r3, r3, #2
 80019be:	f003 0301 	and.w	r3, r3, #1
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	f000 809a 	beq.w	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	0a5b      	lsrs	r3, r3, #9
 80019cc:	f003 0301 	and.w	r3, r3, #1
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	f000 8093 	beq.w	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
        {
          I2C_MasterReceive_BTF(hi2c);
 80019d6:	6878      	ldr	r0, [r7, #4]
 80019d8:	f000 fbe8 	bl	80021ac <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80019dc:	e08e      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
 80019de:	e08d      	b.n	8001afc <HAL_I2C_EV_IRQHandler+0x2d6>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d004      	beq.n	80019f2 <HAL_I2C_EV_IRQHandler+0x1cc>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	695b      	ldr	r3, [r3, #20]
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	e007      	b.n	8001a02 <HAL_I2C_EV_IRQHandler+0x1dc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	695b      	ldr	r3, [r3, #20]
 8001a00:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a02:	69fb      	ldr	r3, [r7, #28]
 8001a04:	085b      	lsrs	r3, r3, #1
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d012      	beq.n	8001a34 <HAL_I2C_EV_IRQHandler+0x20e>
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	0a5b      	lsrs	r3, r3, #9
 8001a12:	f003 0301 	and.w	r3, r3, #1
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d00c      	beq.n	8001a34 <HAL_I2C_EV_IRQHandler+0x20e>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d003      	beq.n	8001a2a <HAL_I2C_EV_IRQHandler+0x204>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	699b      	ldr	r3, [r3, #24]
 8001a28:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8001a2a:	69b9      	ldr	r1, [r7, #24]
 8001a2c:	6878      	ldr	r0, [r7, #4]
 8001a2e:	f000 ffac 	bl	800298a <I2C_Slave_ADDR>
 8001a32:	e066      	b.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	091b      	lsrs	r3, r3, #4
 8001a38:	f003 0301 	and.w	r3, r3, #1
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d009      	beq.n	8001a54 <HAL_I2C_EV_IRQHandler+0x22e>
 8001a40:	697b      	ldr	r3, [r7, #20]
 8001a42:	0a5b      	lsrs	r3, r3, #9
 8001a44:	f003 0301 	and.w	r3, r3, #1
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d003      	beq.n	8001a54 <HAL_I2C_EV_IRQHandler+0x22e>
    {
      I2C_Slave_STOPF(hi2c);
 8001a4c:	6878      	ldr	r0, [r7, #4]
 8001a4e:	f000 ffe7 	bl	8002a20 <I2C_Slave_STOPF>
 8001a52:	e056      	b.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2dc>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8001a54:	7bbb      	ldrb	r3, [r7, #14]
 8001a56:	2b21      	cmp	r3, #33	; 0x21
 8001a58:	d002      	beq.n	8001a60 <HAL_I2C_EV_IRQHandler+0x23a>
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	2b29      	cmp	r3, #41	; 0x29
 8001a5e:	d125      	bne.n	8001aac <HAL_I2C_EV_IRQHandler+0x286>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a60:	69fb      	ldr	r3, [r7, #28]
 8001a62:	09db      	lsrs	r3, r3, #7
 8001a64:	f003 0301 	and.w	r3, r3, #1
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d00f      	beq.n	8001a8c <HAL_I2C_EV_IRQHandler+0x266>
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	0a9b      	lsrs	r3, r3, #10
 8001a70:	f003 0301 	and.w	r3, r3, #1
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d009      	beq.n	8001a8c <HAL_I2C_EV_IRQHandler+0x266>
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	089b      	lsrs	r3, r3, #2
 8001a7c:	f003 0301 	and.w	r3, r3, #1
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d103      	bne.n	8001a8c <HAL_I2C_EV_IRQHandler+0x266>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 fec4 	bl	8002812 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001a8a:	e039      	b.n	8001b00 <HAL_I2C_EV_IRQHandler+0x2da>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	089b      	lsrs	r3, r3, #2
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d033      	beq.n	8001b00 <HAL_I2C_EV_IRQHandler+0x2da>
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	0a5b      	lsrs	r3, r3, #9
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d02d      	beq.n	8001b00 <HAL_I2C_EV_IRQHandler+0x2da>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fef1 	bl	800288c <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aaa:	e029      	b.n	8001b00 <HAL_I2C_EV_IRQHandler+0x2da>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001aac:	69fb      	ldr	r3, [r7, #28]
 8001aae:	099b      	lsrs	r3, r3, #6
 8001ab0:	f003 0301 	and.w	r3, r3, #1
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00f      	beq.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	0a9b      	lsrs	r3, r3, #10
 8001abc:	f003 0301 	and.w	r3, r3, #1
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d009      	beq.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x2b2>
 8001ac4:	69fb      	ldr	r3, [r7, #28]
 8001ac6:	089b      	lsrs	r3, r3, #2
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d103      	bne.n	8001ad8 <HAL_I2C_EV_IRQHandler+0x2b2>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8001ad0:	6878      	ldr	r0, [r7, #4]
 8001ad2:	f000 fefb 	bl	80028cc <I2C_SlaveReceive_RXNE>
 8001ad6:	e014      	b.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2dc>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001ad8:	69fb      	ldr	r3, [r7, #28]
 8001ada:	089b      	lsrs	r3, r3, #2
 8001adc:	f003 0301 	and.w	r3, r3, #1
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00e      	beq.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2dc>
 8001ae4:	697b      	ldr	r3, [r7, #20]
 8001ae6:	0a5b      	lsrs	r3, r3, #9
 8001ae8:	f003 0301 	and.w	r3, r3, #1
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d008      	beq.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2dc>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f000 ff29 	bl	8002948 <I2C_SlaveReceive_BTF>
 8001af6:	e004      	b.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2dc>
      return;
 8001af8:	bf00      	nop
 8001afa:	e002      	b.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2dc>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8001afc:	bf00      	nop
 8001afe:	e000      	b.n	8001b02 <HAL_I2C_EV_IRQHandler+0x2dc>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8001b00:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8001b02:	3720      	adds	r7, #32
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}

08001b08 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b08a      	sub	sp, #40	; 0x28
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8001b20:	2300      	movs	r3, #0
 8001b22:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b2a:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b2c:	6a3b      	ldr	r3, [r7, #32]
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	f003 0301 	and.w	r3, r3, #1
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d016      	beq.n	8001b66 <HAL_I2C_ER_IRQHandler+0x5e>
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	0a1b      	lsrs	r3, r3, #8
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d010      	beq.n	8001b66 <HAL_I2C_ER_IRQHandler+0x5e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8001b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b46:	f043 0301 	orr.w	r3, r3, #1
 8001b4a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8001b54:	615a      	str	r2, [r3, #20]

    /* Workaround: Start cannot be generated after a misplaced Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_SWRST);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	681a      	ldr	r2, [r3, #0]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001b64:	601a      	str	r2, [r3, #0]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b66:	6a3b      	ldr	r3, [r7, #32]
 8001b68:	0a5b      	lsrs	r3, r3, #9
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d00e      	beq.n	8001b90 <HAL_I2C_ER_IRQHandler+0x88>
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	0a1b      	lsrs	r3, r3, #8
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d008      	beq.n	8001b90 <HAL_I2C_ER_IRQHandler+0x88>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8001b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b80:	f043 0302 	orr.w	r3, r3, #2
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8001b8e:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001b90:	6a3b      	ldr	r3, [r7, #32]
 8001b92:	0a9b      	lsrs	r3, r3, #10
 8001b94:	f003 0301 	and.w	r3, r3, #1
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d03f      	beq.n	8001c1c <HAL_I2C_ER_IRQHandler+0x114>
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	0a1b      	lsrs	r3, r3, #8
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d039      	beq.n	8001c1c <HAL_I2C_ER_IRQHandler+0x114>
  {
    tmp1 = CurrentMode;
 8001ba8:	7efb      	ldrb	r3, [r7, #27]
 8001baa:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001bba:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc0:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8001bc2:	7ebb      	ldrb	r3, [r7, #26]
 8001bc4:	2b20      	cmp	r3, #32
 8001bc6:	d112      	bne.n	8001bee <HAL_I2C_ER_IRQHandler+0xe6>
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d10f      	bne.n	8001bee <HAL_I2C_ER_IRQHandler+0xe6>
 8001bce:	7cfb      	ldrb	r3, [r7, #19]
 8001bd0:	2b21      	cmp	r3, #33	; 0x21
 8001bd2:	d008      	beq.n	8001be6 <HAL_I2C_ER_IRQHandler+0xde>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8001bd4:	7cfb      	ldrb	r3, [r7, #19]
 8001bd6:	2b29      	cmp	r3, #41	; 0x29
 8001bd8:	d005      	beq.n	8001be6 <HAL_I2C_ER_IRQHandler+0xde>
 8001bda:	7cfb      	ldrb	r3, [r7, #19]
 8001bdc:	2b28      	cmp	r3, #40	; 0x28
 8001bde:	d106      	bne.n	8001bee <HAL_I2C_ER_IRQHandler+0xe6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	2b21      	cmp	r3, #33	; 0x21
 8001be4:	d103      	bne.n	8001bee <HAL_I2C_ER_IRQHandler+0xe6>
    {
      I2C_Slave_AF(hi2c);
 8001be6:	6878      	ldr	r0, [r7, #4]
 8001be8:	f001 f84a 	bl	8002c80 <I2C_Slave_AF>
 8001bec:	e016      	b.n	8001c1c <HAL_I2C_ER_IRQHandler+0x114>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001bf6:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8001bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bfa:	f043 0304 	orr.w	r3, r3, #4
 8001bfe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8001c00:	7efb      	ldrb	r3, [r7, #27]
 8001c02:	2b10      	cmp	r3, #16
 8001c04:	d002      	beq.n	8001c0c <HAL_I2C_ER_IRQHandler+0x104>
 8001c06:	7efb      	ldrb	r3, [r7, #27]
 8001c08:	2b40      	cmp	r3, #64	; 0x40
 8001c0a:	d107      	bne.n	8001c1c <HAL_I2C_ER_IRQHandler+0x114>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	681a      	ldr	r2, [r3, #0]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001c1a:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8001c1c:	6a3b      	ldr	r3, [r7, #32]
 8001c1e:	0adb      	lsrs	r3, r3, #11
 8001c20:	f003 0301 	and.w	r3, r3, #1
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d00e      	beq.n	8001c46 <HAL_I2C_ER_IRQHandler+0x13e>
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 0301 	and.w	r3, r3, #1
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_I2C_ER_IRQHandler+0x13e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8001c44:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8001c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d008      	beq.n	8001c5e <HAL_I2C_ER_IRQHandler+0x156>
  {
    hi2c->ErrorCode |= error;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8001c58:	6878      	ldr	r0, [r7, #4]
 8001c5a:	f001 f881 	bl	8002d60 <I2C_ITError>
  }
}
 8001c5e:	bf00      	nop
 8001c60:	3728      	adds	r7, #40	; 0x28
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bd80      	pop	{r7, pc}

08001c66 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c66:	b480      	push	{r7}
 8001c68:	b083      	sub	sp, #12
 8001c6a:	af00      	add	r7, sp, #0
 8001c6c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8001c80:	bf00      	nop
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c8a:	b480      	push	{r7}
 8001c8c:	b083      	sub	sp, #12
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8001c92:	bf00      	nop
 8001c94:	370c      	adds	r7, #12
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bc80      	pop	{r7}
 8001c9a:	4770      	bx	lr

08001c9c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	bc80      	pop	{r7}
 8001cac:	4770      	bx	lr

08001cae <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8001cc8:	bf00      	nop
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8001cd2:	b480      	push	{r7}
 8001cd4:	b083      	sub	sp, #12
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8001cda:	bf00      	nop
 8001cdc:	370c      	adds	r7, #12
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bc80      	pop	{r7}
 8001ce2:	4770      	bx	lr

08001ce4 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cf2:	b2db      	uxtb	r3, r3
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bc80      	pop	{r7}
 8001cfc:	4770      	bx	lr

08001cfe <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8001cfe:	b580      	push	{r7, lr}
 8001d00:	b084      	sub	sp, #16
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d0c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001d14:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d150      	bne.n	8001dc6 <I2C_MasterTransmit_TXE+0xc8>
 8001d24:	7bfb      	ldrb	r3, [r7, #15]
 8001d26:	2b21      	cmp	r3, #33	; 0x21
 8001d28:	d14d      	bne.n	8001dc6 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	2b08      	cmp	r3, #8
 8001d2e:	d01d      	beq.n	8001d6c <I2C_MasterTransmit_TXE+0x6e>
 8001d30:	68bb      	ldr	r3, [r7, #8]
 8001d32:	2b20      	cmp	r3, #32
 8001d34:	d01a      	beq.n	8001d6c <I2C_MasterTransmit_TXE+0x6e>
 8001d36:	68bb      	ldr	r3, [r7, #8]
 8001d38:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d3c:	d016      	beq.n	8001d6c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d4c:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2211      	movs	r2, #17
 8001d52:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2200      	movs	r2, #0
 8001d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2220      	movs	r2, #32
 8001d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff7e 	bl	8001c66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001d6a:	e060      	b.n	8001e2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	685a      	ldr	r2, [r3, #4]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001d7a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d8a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	2220      	movs	r2, #32
 8001d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001da0:	b2db      	uxtb	r3, r3
 8001da2:	2b40      	cmp	r3, #64	; 0x40
 8001da4:	d107      	bne.n	8001db6 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8001dae:	6878      	ldr	r0, [r7, #4]
 8001db0:	f7ff ff7d 	bl	8001cae <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001db4:	e03b      	b.n	8001e2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f7ff ff51 	bl	8001c66 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001dc4:	e033      	b.n	8001e2e <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	2b21      	cmp	r3, #33	; 0x21
 8001dca:	d005      	beq.n	8001dd8 <I2C_MasterTransmit_TXE+0xda>
 8001dcc:	7bbb      	ldrb	r3, [r7, #14]
 8001dce:	2b40      	cmp	r3, #64	; 0x40
 8001dd0:	d12d      	bne.n	8001e2e <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	2b22      	cmp	r3, #34	; 0x22
 8001dd6:	d12a      	bne.n	8001e2e <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ddc:	b29b      	uxth	r3, r3
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d108      	bne.n	8001df4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	685a      	ldr	r2, [r3, #4]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001df0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8001df2:	e01c      	b.n	8001e2e <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b40      	cmp	r3, #64	; 0x40
 8001dfe:	d103      	bne.n	8001e08 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f000 f88e 	bl	8001f22 <I2C_MemoryTransmit_TXE_BTF>
}
 8001e06:	e012      	b.n	8001e2e <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0c:	781a      	ldrb	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e18:	1c5a      	adds	r2, r3, #1
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	3b01      	subs	r3, #1
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001e2c:	e7ff      	b.n	8001e2e <I2C_MasterTransmit_TXE+0x130>
 8001e2e:	bf00      	nop
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8001e36:	b580      	push	{r7, lr}
 8001e38:	b084      	sub	sp, #16
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e42:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	2b21      	cmp	r3, #33	; 0x21
 8001e4e:	d164      	bne.n	8001f1a <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e54:	b29b      	uxth	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d012      	beq.n	8001e80 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5e:	781a      	ldrb	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e6a:	1c5a      	adds	r2, r3, #1
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e74:	b29b      	uxth	r3, r3
 8001e76:	3b01      	subs	r3, #1
 8001e78:	b29a      	uxth	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8001e7e:	e04c      	b.n	8001f1a <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	2b08      	cmp	r3, #8
 8001e84:	d01d      	beq.n	8001ec2 <I2C_MasterTransmit_BTF+0x8c>
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	2b20      	cmp	r3, #32
 8001e8a:	d01a      	beq.n	8001ec2 <I2C_MasterTransmit_BTF+0x8c>
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e92:	d016      	beq.n	8001ec2 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	685a      	ldr	r2, [r3, #4]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ea2:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2211      	movs	r2, #17
 8001ea8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2220      	movs	r2, #32
 8001eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8001eba:	6878      	ldr	r0, [r7, #4]
 8001ebc:	f7ff fed3 	bl	8001c66 <HAL_I2C_MasterTxCpltCallback>
}
 8001ec0:	e02b      	b.n	8001f1a <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	685a      	ldr	r2, [r3, #4]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ed0:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681a      	ldr	r2, [r3, #0]
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001ee0:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2220      	movs	r2, #32
 8001eec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b40      	cmp	r3, #64	; 0x40
 8001efa:	d107      	bne.n	8001f0c <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8001f04:	6878      	ldr	r0, [r7, #4]
 8001f06:	f7ff fed2 	bl	8001cae <HAL_I2C_MemTxCpltCallback>
}
 8001f0a:	e006      	b.n	8001f1a <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f7ff fea6 	bl	8001c66 <HAL_I2C_MasterTxCpltCallback>
}
 8001f1a:	bf00      	nop
 8001f1c:	3710      	adds	r7, #16
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}

08001f22 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8001f22:	b580      	push	{r7, lr}
 8001f24:	b084      	sub	sp, #16
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f30:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d11d      	bne.n	8001f76 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d10b      	bne.n	8001f5a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f46:	b2da      	uxtb	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f52:	1c9a      	adds	r2, r3, #2
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8001f58:	e073      	b.n	8002042 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5e:	b29b      	uxth	r3, r3
 8001f60:	121b      	asrs	r3, r3, #8
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f6e:	1c5a      	adds	r2, r3, #1
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f74:	e065      	b.n	8002042 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f7a:	2b01      	cmp	r3, #1
 8001f7c:	d10b      	bne.n	8001f96 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f82:	b2da      	uxtb	r2, r3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f8e:	1c5a      	adds	r2, r3, #1
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001f94:	e055      	b.n	8002042 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d151      	bne.n	8002042 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8001f9e:	7bfb      	ldrb	r3, [r7, #15]
 8001fa0:	2b22      	cmp	r3, #34	; 0x22
 8001fa2:	d10d      	bne.n	8001fc0 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681a      	ldr	r2, [r3, #0]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001fb2:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fb8:	1c5a      	adds	r2, r3, #1
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	651a      	str	r2, [r3, #80]	; 0x50
}
 8001fbe:	e040      	b.n	8002042 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d015      	beq.n	8001ff6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8001fca:	7bfb      	ldrb	r3, [r7, #15]
 8001fcc:	2b21      	cmp	r3, #33	; 0x21
 8001fce:	d112      	bne.n	8001ff6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd4:	781a      	ldrb	r2, [r3, #0]
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe0:	1c5a      	adds	r2, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fea:	b29b      	uxth	r3, r3
 8001fec:	3b01      	subs	r3, #1
 8001fee:	b29a      	uxth	r2, r3
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8001ff4:	e025      	b.n	8002042 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d120      	bne.n	8002042 <I2C_MemoryTransmit_TXE_BTF+0x120>
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	2b21      	cmp	r3, #33	; 0x21
 8002004:	d11d      	bne.n	8002042 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002014:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	681a      	ldr	r2, [r3, #0]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002024:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800203c:	6878      	ldr	r0, [r7, #4]
 800203e:	f7ff fe36 	bl	8001cae <HAL_I2C_MemTxCpltCallback>
}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}

0800204a <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800204a:	b580      	push	{r7, lr}
 800204c:	b084      	sub	sp, #16
 800204e:	af00      	add	r7, sp, #0
 8002050:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b22      	cmp	r3, #34	; 0x22
 800205c:	f040 80a2 	bne.w	80021a4 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002064:	b29b      	uxth	r3, r3
 8002066:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	2b03      	cmp	r3, #3
 800206c:	d921      	bls.n	80020b2 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	691a      	ldr	r2, [r3, #16]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	b2d2      	uxtb	r2, r2
 800207a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002080:	1c5a      	adds	r2, r3, #1
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800208a:	b29b      	uxth	r3, r3
 800208c:	3b01      	subs	r3, #1
 800208e:	b29a      	uxth	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002098:	b29b      	uxth	r3, r3
 800209a:	2b03      	cmp	r3, #3
 800209c:	f040 8082 	bne.w	80021a4 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	685a      	ldr	r2, [r3, #4]
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020ae:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80020b0:	e078      	b.n	80021a4 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d074      	beq.n	80021a4 <I2C_MasterReceive_RXNE+0x15a>
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d002      	beq.n	80020c6 <I2C_MasterReceive_RXNE+0x7c>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d16e      	bne.n	80021a4 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f001 f824 	bl	8003114 <I2C_WaitOnSTOPRequestThroughIT>
 80020cc:	4603      	mov	r3, r0
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d142      	bne.n	8002158 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80020e0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	685a      	ldr	r2, [r3, #4]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80020f0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	691a      	ldr	r2, [r3, #16]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	b2d2      	uxtb	r2, r2
 80020fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002104:	1c5a      	adds	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800210e:	b29b      	uxth	r3, r3
 8002110:	3b01      	subs	r3, #1
 8002112:	b29a      	uxth	r2, r3
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2220      	movs	r2, #32
 800211c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002126:	b2db      	uxtb	r3, r3
 8002128:	2b40      	cmp	r3, #64	; 0x40
 800212a:	d10a      	bne.n	8002142 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f7ff fdc0 	bl	8001cc0 <HAL_I2C_MemRxCpltCallback>
}
 8002140:	e030      	b.n	80021a4 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	2212      	movs	r2, #18
 800214e:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8002150:	6878      	ldr	r0, [r7, #4]
 8002152:	f7ff fd91 	bl	8001c78 <HAL_I2C_MasterRxCpltCallback>
}
 8002156:	e025      	b.n	80021a4 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	685a      	ldr	r2, [r3, #4]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002166:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	691a      	ldr	r2, [r3, #16]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002172:	b2d2      	uxtb	r2, r2
 8002174:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800217a:	1c5a      	adds	r2, r3, #1
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002184:	b29b      	uxth	r3, r3
 8002186:	3b01      	subs	r3, #1
 8002188:	b29a      	uxth	r2, r3
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe f94a 	bl	8000438 <HAL_I2C_ErrorCallback>
}
 80021a4:	bf00      	nop
 80021a6:	3710      	adds	r7, #16
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}

080021ac <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b084      	sub	sp, #16
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021b8:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021be:	b29b      	uxth	r3, r3
 80021c0:	2b04      	cmp	r3, #4
 80021c2:	d11b      	bne.n	80021fc <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80021d2:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	691a      	ldr	r2, [r3, #16]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021e6:	1c5a      	adds	r2, r3, #1
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29a      	uxth	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80021fa:	e0bd      	b.n	8002378 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002200:	b29b      	uxth	r3, r3
 8002202:	2b03      	cmp	r3, #3
 8002204:	d129      	bne.n	800225a <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	685a      	ldr	r2, [r3, #4]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002214:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	2b04      	cmp	r3, #4
 800221a:	d00a      	beq.n	8002232 <I2C_MasterReceive_BTF+0x86>
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	2b02      	cmp	r3, #2
 8002220:	d007      	beq.n	8002232 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	681a      	ldr	r2, [r3, #0]
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002230:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	691a      	ldr	r2, [r3, #16]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002244:	1c5a      	adds	r2, r3, #1
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800224e:	b29b      	uxth	r3, r3
 8002250:	3b01      	subs	r3, #1
 8002252:	b29a      	uxth	r2, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002258:	e08e      	b.n	8002378 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800225e:	b29b      	uxth	r3, r3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d176      	bne.n	8002352 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b01      	cmp	r3, #1
 8002268:	d002      	beq.n	8002270 <I2C_MasterReceive_BTF+0xc4>
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	2b10      	cmp	r3, #16
 800226e:	d108      	bne.n	8002282 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e019      	b.n	80022b6 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	2b04      	cmp	r3, #4
 8002286:	d002      	beq.n	800228e <I2C_MasterReceive_BTF+0xe2>
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	2b02      	cmp	r3, #2
 800228c:	d108      	bne.n	80022a0 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	e00a      	b.n	80022b6 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2b10      	cmp	r3, #16
 80022a4:	d007      	beq.n	80022b6 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022b4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	691a      	ldr	r2, [r3, #16]
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c0:	b2d2      	uxtb	r2, r2
 80022c2:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c8:	1c5a      	adds	r2, r3, #1
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	3b01      	subs	r3, #1
 80022d6:	b29a      	uxth	r2, r3
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	691a      	ldr	r2, [r3, #16]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022e6:	b2d2      	uxtb	r2, r2
 80022e8:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ee:	1c5a      	adds	r2, r3, #1
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	3b01      	subs	r3, #1
 80022fc:	b29a      	uxth	r2, r3
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	685a      	ldr	r2, [r3, #4]
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002310:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2220      	movs	r2, #32
 8002316:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002320:	b2db      	uxtb	r3, r3
 8002322:	2b40      	cmp	r3, #64	; 0x40
 8002324:	d10a      	bne.n	800233c <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fcc3 	bl	8001cc0 <HAL_I2C_MemRxCpltCallback>
}
 800233a:	e01d      	b.n	8002378 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2200      	movs	r2, #0
 8002340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2212      	movs	r2, #18
 8002348:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	f7ff fc94 	bl	8001c78 <HAL_I2C_MasterRxCpltCallback>
}
 8002350:	e012      	b.n	8002378 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	691a      	ldr	r2, [r3, #16]
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800235c:	b2d2      	uxtb	r2, r2
 800235e:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002364:	1c5a      	adds	r2, r3, #1
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800236e:	b29b      	uxth	r3, r3
 8002370:	3b01      	subs	r3, #1
 8002372:	b29a      	uxth	r2, r3
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8002378:	bf00      	nop
 800237a:	3710      	adds	r7, #16
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b40      	cmp	r3, #64	; 0x40
 8002392:	d117      	bne.n	80023c4 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002398:	2b00      	cmp	r3, #0
 800239a:	d109      	bne.n	80023b0 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a0:	b2db      	uxtb	r3, r3
 80023a2:	461a      	mov	r2, r3
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023ac:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80023ae:	e067      	b.n	8002480 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	f043 0301 	orr.w	r3, r3, #1
 80023ba:	b2da      	uxtb	r2, r3
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	611a      	str	r2, [r3, #16]
}
 80023c2:	e05d      	b.n	8002480 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80023cc:	d133      	bne.n	8002436 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b21      	cmp	r3, #33	; 0x21
 80023d8:	d109      	bne.n	80023ee <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023de:	b2db      	uxtb	r3, r3
 80023e0:	461a      	mov	r2, r3
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80023ea:	611a      	str	r2, [r3, #16]
 80023ec:	e008      	b.n	8002400 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	f043 0301 	orr.w	r3, r3, #1
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002404:	2b00      	cmp	r3, #0
 8002406:	d004      	beq.n	8002412 <I2C_Master_SB+0x92>
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800240c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002416:	2b00      	cmp	r3, #0
 8002418:	d032      	beq.n	8002480 <I2C_Master_SB+0x100>
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800241e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002420:	2b00      	cmp	r3, #0
 8002422:	d02d      	beq.n	8002480 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002432:	605a      	str	r2, [r3, #4]
}
 8002434:	e024      	b.n	8002480 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800243a:	2b00      	cmp	r3, #0
 800243c:	d10e      	bne.n	800245c <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002442:	b29b      	uxth	r3, r3
 8002444:	11db      	asrs	r3, r3, #7
 8002446:	b2db      	uxtb	r3, r3
 8002448:	f003 0306 	and.w	r3, r3, #6
 800244c:	b2db      	uxtb	r3, r3
 800244e:	f063 030f 	orn	r3, r3, #15
 8002452:	b2da      	uxtb	r2, r3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	611a      	str	r2, [r3, #16]
}
 800245a:	e011      	b.n	8002480 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002460:	2b01      	cmp	r3, #1
 8002462:	d10d      	bne.n	8002480 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002468:	b29b      	uxth	r3, r3
 800246a:	11db      	asrs	r3, r3, #7
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f003 0306 	and.w	r3, r3, #6
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f063 030e 	orn	r3, r3, #14
 8002478:	b2da      	uxtb	r2, r3
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	611a      	str	r2, [r3, #16]
}
 8002480:	bf00      	nop
 8002482:	370c      	adds	r7, #12
 8002484:	46bd      	mov	sp, r7
 8002486:	bc80      	pop	{r7}
 8002488:	4770      	bx	lr

0800248a <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800248a:	b480      	push	{r7}
 800248c:	b083      	sub	sp, #12
 800248e:	af00      	add	r7, sp, #0
 8002490:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002496:	b2da      	uxtb	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d004      	beq.n	80024b0 <I2C_Master_ADD10+0x26>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d108      	bne.n	80024c2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d00c      	beq.n	80024d2 <I2C_Master_ADD10+0x48>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	685a      	ldr	r2, [r3, #4]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80024d0:	605a      	str	r2, [r3, #4]
  }
}
 80024d2:	bf00      	nop
 80024d4:	370c      	adds	r7, #12
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bc80      	pop	{r7}
 80024da:	4770      	bx	lr

080024dc <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80024dc:	b480      	push	{r7}
 80024de:	b091      	sub	sp, #68	; 0x44
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80024ea:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024f2:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b22      	cmp	r3, #34	; 0x22
 8002504:	f040 8174 	bne.w	80027f0 <I2C_Master_ADDR+0x314>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800250c:	2b00      	cmp	r3, #0
 800250e:	d10f      	bne.n	8002530 <I2C_Master_ADDR+0x54>
 8002510:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002514:	2b40      	cmp	r3, #64	; 0x40
 8002516:	d10b      	bne.n	8002530 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002518:	2300      	movs	r3, #0
 800251a:	633b      	str	r3, [r7, #48]	; 0x30
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	633b      	str	r3, [r7, #48]	; 0x30
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	699b      	ldr	r3, [r3, #24]
 800252a:	633b      	str	r3, [r7, #48]	; 0x30
 800252c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800252e:	e16b      	b.n	8002808 <I2C_Master_ADDR+0x32c>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002534:	2b00      	cmp	r3, #0
 8002536:	d11d      	bne.n	8002574 <I2C_Master_ADDR+0x98>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	691b      	ldr	r3, [r3, #16]
 800253c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002540:	d118      	bne.n	8002574 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002542:	2300      	movs	r3, #0
 8002544:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002556:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681a      	ldr	r2, [r3, #0]
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002566:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256c:	1c5a      	adds	r2, r3, #1
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	651a      	str	r2, [r3, #80]	; 0x50
 8002572:	e149      	b.n	8002808 <I2C_Master_ADDR+0x32c>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002578:	b29b      	uxth	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d113      	bne.n	80025a6 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800257e:	2300      	movs	r3, #0
 8002580:	62bb      	str	r3, [r7, #40]	; 0x28
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	695b      	ldr	r3, [r3, #20]
 8002588:	62bb      	str	r3, [r7, #40]	; 0x28
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	699b      	ldr	r3, [r3, #24]
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
 8002592:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	e120      	b.n	80027e8 <I2C_Master_ADDR+0x30c>
      }
      else if (hi2c->XferCount == 1U)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025aa:	b29b      	uxth	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	f040 808a 	bne.w	80026c6 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80025b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025b4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025b8:	d137      	bne.n	800262a <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025c8:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80025d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025d8:	d113      	bne.n	8002602 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80025e8:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025ea:	2300      	movs	r3, #0
 80025ec:	627b      	str	r3, [r7, #36]	; 0x24
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	695b      	ldr	r3, [r3, #20]
 80025f4:	627b      	str	r3, [r7, #36]	; 0x24
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	699b      	ldr	r3, [r3, #24]
 80025fc:	627b      	str	r3, [r7, #36]	; 0x24
 80025fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002600:	e0f2      	b.n	80027e8 <I2C_Master_ADDR+0x30c>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002602:	2300      	movs	r3, #0
 8002604:	623b      	str	r3, [r7, #32]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	623b      	str	r3, [r7, #32]
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	699b      	ldr	r3, [r3, #24]
 8002614:	623b      	str	r3, [r7, #32]
 8002616:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681a      	ldr	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	e0de      	b.n	80027e8 <I2C_Master_ADDR+0x30c>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800262a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800262c:	2b08      	cmp	r3, #8
 800262e:	d02e      	beq.n	800268e <I2C_Master_ADDR+0x1b2>
 8002630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002632:	2b20      	cmp	r3, #32
 8002634:	d02b      	beq.n	800268e <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8002636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002638:	2b12      	cmp	r3, #18
 800263a:	d102      	bne.n	8002642 <I2C_Master_ADDR+0x166>
 800263c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800263e:	2b01      	cmp	r3, #1
 8002640:	d125      	bne.n	800268e <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8002642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002644:	2b04      	cmp	r3, #4
 8002646:	d00e      	beq.n	8002666 <I2C_Master_ADDR+0x18a>
 8002648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800264a:	2b02      	cmp	r3, #2
 800264c:	d00b      	beq.n	8002666 <I2C_Master_ADDR+0x18a>
 800264e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002650:	2b10      	cmp	r3, #16
 8002652:	d008      	beq.n	8002666 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002662:	601a      	str	r2, [r3, #0]
 8002664:	e007      	b.n	8002676 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002674:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	695b      	ldr	r3, [r3, #20]
 8002680:	61fb      	str	r3, [r7, #28]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	699b      	ldr	r3, [r3, #24]
 8002688:	61fb      	str	r3, [r7, #28]
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	e0ac      	b.n	80027e8 <I2C_Master_ADDR+0x30c>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	681a      	ldr	r2, [r3, #0]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800269c:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800269e:	2300      	movs	r3, #0
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	695b      	ldr	r3, [r3, #20]
 80026a8:	61bb      	str	r3, [r7, #24]
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	699b      	ldr	r3, [r3, #24]
 80026b0:	61bb      	str	r3, [r7, #24]
 80026b2:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	681a      	ldr	r2, [r3, #0]
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80026c2:	601a      	str	r2, [r3, #0]
 80026c4:	e090      	b.n	80027e8 <I2C_Master_ADDR+0x30c>
        }
      }
      else if (hi2c->XferCount == 2U)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026ca:	b29b      	uxth	r3, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d158      	bne.n	8002782 <I2C_Master_ADDR+0x2a6>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	2b04      	cmp	r3, #4
 80026d4:	d021      	beq.n	800271a <I2C_Master_ADDR+0x23e>
 80026d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d8:	2b02      	cmp	r3, #2
 80026da:	d01e      	beq.n	800271a <I2C_Master_ADDR+0x23e>
 80026dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026de:	2b10      	cmp	r3, #16
 80026e0:	d01b      	beq.n	800271a <I2C_Master_ADDR+0x23e>
        {
          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026f0:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026f2:	2300      	movs	r3, #0
 80026f4:	617b      	str	r3, [r7, #20]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	617b      	str	r3, [r7, #20]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	699b      	ldr	r3, [r3, #24]
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	697b      	ldr	r3, [r7, #20]

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002716:	601a      	str	r2, [r3, #0]
 8002718:	e012      	b.n	8002740 <I2C_Master_ADDR+0x264>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002728:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800272a:	2300      	movs	r3, #0
 800272c:	613b      	str	r3, [r7, #16]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	695b      	ldr	r3, [r3, #20]
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	613b      	str	r3, [r7, #16]
 800273e:	693b      	ldr	r3, [r7, #16]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800274a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800274e:	d14b      	bne.n	80027e8 <I2C_Master_ADDR+0x30c>
 8002750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002752:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002756:	d00b      	beq.n	8002770 <I2C_Master_ADDR+0x294>
 8002758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800275a:	2b01      	cmp	r3, #1
 800275c:	d008      	beq.n	8002770 <I2C_Master_ADDR+0x294>
 800275e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002760:	2b08      	cmp	r3, #8
 8002762:	d005      	beq.n	8002770 <I2C_Master_ADDR+0x294>
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	2b10      	cmp	r3, #16
 8002768:	d002      	beq.n	8002770 <I2C_Master_ADDR+0x294>
 800276a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276c:	2b20      	cmp	r3, #32
 800276e:	d13b      	bne.n	80027e8 <I2C_Master_ADDR+0x30c>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800277e:	605a      	str	r2, [r3, #4]
 8002780:	e032      	b.n	80027e8 <I2C_Master_ADDR+0x30c>
        }
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002790:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800279c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027a0:	d117      	bne.n	80027d2 <I2C_Master_ADDR+0x2f6>
 80027a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80027a8:	d00b      	beq.n	80027c2 <I2C_Master_ADDR+0x2e6>
 80027aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ac:	2b01      	cmp	r3, #1
 80027ae:	d008      	beq.n	80027c2 <I2C_Master_ADDR+0x2e6>
 80027b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b2:	2b08      	cmp	r3, #8
 80027b4:	d005      	beq.n	80027c2 <I2C_Master_ADDR+0x2e6>
 80027b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d002      	beq.n	80027c2 <I2C_Master_ADDR+0x2e6>
 80027bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027be:	2b20      	cmp	r3, #32
 80027c0:	d107      	bne.n	80027d2 <I2C_Master_ADDR+0x2f6>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80027d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027d2:	2300      	movs	r3, #0
 80027d4:	60fb      	str	r3, [r7, #12]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	695b      	ldr	r3, [r3, #20]
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	699b      	ldr	r3, [r3, #24]
 80027e4:	60fb      	str	r3, [r7, #12]
 80027e6:	68fb      	ldr	r3, [r7, #12]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80027ee:	e00b      	b.n	8002808 <I2C_Master_ADDR+0x32c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	695b      	ldr	r3, [r3, #20]
 80027fa:	60bb      	str	r3, [r7, #8]
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	60bb      	str	r3, [r7, #8]
 8002804:	68bb      	ldr	r3, [r7, #8]
}
 8002806:	e7ff      	b.n	8002808 <I2C_Master_ADDR+0x32c>
 8002808:	bf00      	nop
 800280a:	3744      	adds	r7, #68	; 0x44
 800280c:	46bd      	mov	sp, r7
 800280e:	bc80      	pop	{r7}
 8002810:	4770      	bx	lr

08002812 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8002812:	b580      	push	{r7, lr}
 8002814:	b084      	sub	sp, #16
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002820:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002826:	b29b      	uxth	r3, r3
 8002828:	2b00      	cmp	r3, #0
 800282a:	d02b      	beq.n	8002884 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002830:	781a      	ldrb	r2, [r3, #0]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	1c5a      	adds	r2, r3, #1
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002846:	b29b      	uxth	r3, r3
 8002848:	3b01      	subs	r3, #1
 800284a:	b29a      	uxth	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002854:	b29b      	uxth	r3, r3
 8002856:	2b00      	cmp	r3, #0
 8002858:	d114      	bne.n	8002884 <I2C_SlaveTransmit_TXE+0x72>
 800285a:	7bfb      	ldrb	r3, [r7, #15]
 800285c:	2b29      	cmp	r3, #41	; 0x29
 800285e:	d111      	bne.n	8002884 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	685a      	ldr	r2, [r3, #4]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800286e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2221      	movs	r2, #33	; 0x21
 8002874:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2228      	movs	r2, #40	; 0x28
 800287a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800287e:	6878      	ldr	r0, [r7, #4]
 8002880:	f7ff fa03 	bl	8001c8a <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800288c:	b480      	push	{r7}
 800288e:	b083      	sub	sp, #12
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d011      	beq.n	80028c2 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028a2:	781a      	ldrb	r2, [r3, #0]
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ae:	1c5a      	adds	r2, r3, #1
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028b8:	b29b      	uxth	r3, r3
 80028ba:	3b01      	subs	r3, #1
 80028bc:	b29a      	uxth	r2, r3
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bc80      	pop	{r7}
 80028ca:	4770      	bx	lr

080028cc <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028da:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028e0:	b29b      	uxth	r3, r3
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d02c      	beq.n	8002940 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f0:	b2d2      	uxtb	r2, r2
 80028f2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028f8:	1c5a      	adds	r2, r3, #1
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002902:	b29b      	uxth	r3, r3
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d114      	bne.n	8002940 <I2C_SlaveReceive_RXNE+0x74>
 8002916:	7bfb      	ldrb	r3, [r7, #15]
 8002918:	2b2a      	cmp	r3, #42	; 0x2a
 800291a:	d111      	bne.n	8002940 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800292a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2222      	movs	r2, #34	; 0x22
 8002930:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	2228      	movs	r2, #40	; 0x28
 8002936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f7fd fd20 	bl	8000380 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8002940:	bf00      	nop
 8002942:	3710      	adds	r7, #16
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002954:	b29b      	uxth	r3, r3
 8002956:	2b00      	cmp	r3, #0
 8002958:	d012      	beq.n	8002980 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	691a      	ldr	r2, [r3, #16]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002964:	b2d2      	uxtb	r2, r2
 8002966:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800296c:	1c5a      	adds	r2, r3, #1
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002976:	b29b      	uxth	r3, r3
 8002978:	3b01      	subs	r3, #1
 800297a:	b29a      	uxth	r2, r3
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bc80      	pop	{r7}
 8002988:	4770      	bx	lr

0800298a <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800298a:	b580      	push	{r7, lr}
 800298c:	b084      	sub	sp, #16
 800298e:	af00      	add	r7, sp, #0
 8002990:	6078      	str	r0, [r7, #4]
 8002992:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800299e:	b2db      	uxtb	r3, r3
 80029a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029a4:	2b28      	cmp	r3, #40	; 0x28
 80029a6:	d127      	bne.n	80029f8 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80029b6:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	089b      	lsrs	r3, r3, #2
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80029c4:	2301      	movs	r3, #1
 80029c6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	09db      	lsrs	r3, r3, #7
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d103      	bne.n	80029dc <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	68db      	ldr	r3, [r3, #12]
 80029d8:	81bb      	strh	r3, [r7, #12]
 80029da:	e002      	b.n	80029e2 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80029ea:	89ba      	ldrh	r2, [r7, #12]
 80029ec:	7bfb      	ldrb	r3, [r7, #15]
 80029ee:	4619      	mov	r1, r3
 80029f0:	6878      	ldr	r0, [r7, #4]
 80029f2:	f7fd fcfd 	bl	80003f0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80029f6:	e00e      	b.n	8002a16 <I2C_Slave_ADDR+0x8c>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029f8:	2300      	movs	r3, #0
 80029fa:	60bb      	str	r3, [r7, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	695b      	ldr	r3, [r3, #20]
 8002a02:	60bb      	str	r3, [r7, #8]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	60bb      	str	r3, [r7, #8]
 8002a0c:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8002a16:	bf00      	nop
 8002a18:	3710      	adds	r7, #16
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
	...

08002a20 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	b084      	sub	sp, #16
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002a3e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8002a40:	2300      	movs	r3, #0
 8002a42:	60bb      	str	r3, [r7, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	695b      	ldr	r3, [r3, #20]
 8002a4a:	60bb      	str	r3, [r7, #8]
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f042 0201 	orr.w	r2, r2, #1
 8002a5a:	601a      	str	r2, [r3, #0]
 8002a5c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002a6c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002a78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002a7c:	d172      	bne.n	8002b64 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002a7e:	7bfb      	ldrb	r3, [r7, #15]
 8002a80:	2b22      	cmp	r3, #34	; 0x22
 8002a82:	d002      	beq.n	8002a8a <I2C_Slave_STOPF+0x6a>
 8002a84:	7bfb      	ldrb	r3, [r7, #15]
 8002a86:	2b2a      	cmp	r3, #42	; 0x2a
 8002a88:	d135      	bne.n	8002af6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	685b      	ldr	r3, [r3, #4]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a9c:	b29b      	uxth	r3, r3
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d005      	beq.n	8002aae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f043 0204 	orr.w	r2, r3, #4
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	685a      	ldr	r2, [r3, #4]
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002abc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe faaa 	bl	800101c <HAL_DMA_GetState>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d049      	beq.n	8002b62 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad2:	4a69      	ldr	r2, [pc, #420]	; (8002c78 <I2C_Slave_STOPF+0x258>)
 8002ad4:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fe fa28 	bl	8000f30 <HAL_DMA_Abort_IT>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d03d      	beq.n	8002b62 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002af0:	4610      	mov	r0, r2
 8002af2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002af4:	e035      	b.n	8002b62 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	b29a      	uxth	r2, r3
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b08:	b29b      	uxth	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d005      	beq.n	8002b1a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b12:	f043 0204 	orr.w	r2, r3, #4
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b28:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b2e:	4618      	mov	r0, r3
 8002b30:	f7fe fa74 	bl	800101c <HAL_DMA_GetState>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d014      	beq.n	8002b64 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b3e:	4a4e      	ldr	r2, [pc, #312]	; (8002c78 <I2C_Slave_STOPF+0x258>)
 8002b40:	635a      	str	r2, [r3, #52]	; 0x34

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fe f9f2 	bl	8000f30 <HAL_DMA_Abort_IT>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d008      	beq.n	8002b64 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b58:	687a      	ldr	r2, [r7, #4]
 8002b5a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002b5c:	4610      	mov	r0, r2
 8002b5e:	4798      	blx	r3
 8002b60:	e000      	b.n	8002b64 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8002b62:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b68:	b29b      	uxth	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d03e      	beq.n	8002bec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	695b      	ldr	r3, [r3, #20]
 8002b74:	f003 0304 	and.w	r3, r3, #4
 8002b78:	2b04      	cmp	r3, #4
 8002b7a:	d112      	bne.n	8002ba2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8e:	1c5a      	adds	r2, r3, #1
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b98:	b29b      	uxth	r3, r3
 8002b9a:	3b01      	subs	r3, #1
 8002b9c:	b29a      	uxth	r2, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	695b      	ldr	r3, [r3, #20]
 8002ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bac:	2b40      	cmp	r3, #64	; 0x40
 8002bae:	d112      	bne.n	8002bd6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691a      	ldr	r2, [r3, #16]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc2:	1c5a      	adds	r2, r3, #1
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	b29a      	uxth	r2, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d005      	beq.n	8002bec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d003      	beq.n	8002bfc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f8b3 	bl	8002d60 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8002bfa:	e039      	b.n	8002c70 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002bfc:	7bfb      	ldrb	r3, [r7, #15]
 8002bfe:	2b2a      	cmp	r3, #42	; 0x2a
 8002c00:	d109      	bne.n	8002c16 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2200      	movs	r2, #0
 8002c06:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2228      	movs	r2, #40	; 0x28
 8002c0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c10:	6878      	ldr	r0, [r7, #4]
 8002c12:	f7fd fbb5 	bl	8000380 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b28      	cmp	r3, #40	; 0x28
 8002c20:	d111      	bne.n	8002c46 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	4a15      	ldr	r2, [pc, #84]	; (8002c7c <I2C_Slave_STOPF+0x25c>)
 8002c26:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2220      	movs	r2, #32
 8002c32:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff f82c 	bl	8001c9c <HAL_I2C_ListenCpltCallback>
}
 8002c44:	e014      	b.n	8002c70 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	2b22      	cmp	r3, #34	; 0x22
 8002c4c:	d002      	beq.n	8002c54 <I2C_Slave_STOPF+0x234>
 8002c4e:	7bfb      	ldrb	r3, [r7, #15]
 8002c50:	2b22      	cmp	r3, #34	; 0x22
 8002c52:	d10d      	bne.n	8002c70 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7fd fb88 	bl	8000380 <HAL_I2C_SlaveRxCpltCallback>
}
 8002c70:	bf00      	nop
 8002c72:	3710      	adds	r7, #16
 8002c74:	46bd      	mov	sp, r7
 8002c76:	bd80      	pop	{r7, pc}
 8002c78:	08002fc5 	.word	0x08002fc5
 8002c7c:	ffff0000 	.word	0xffff0000

08002c80 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c8e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c94:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8002c96:	68bb      	ldr	r3, [r7, #8]
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d002      	beq.n	8002ca2 <I2C_Slave_AF+0x22>
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	2b20      	cmp	r3, #32
 8002ca0:	d129      	bne.n	8002cf6 <I2C_Slave_AF+0x76>
 8002ca2:	7bfb      	ldrb	r3, [r7, #15]
 8002ca4:	2b28      	cmp	r3, #40	; 0x28
 8002ca6:	d126      	bne.n	8002cf6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	4a2c      	ldr	r2, [pc, #176]	; (8002d5c <I2C_Slave_AF+0xdc>)
 8002cac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002cbc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cc6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cd6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2200      	movs	r2, #0
 8002cdc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f7fe ffd4 	bl	8001c9c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8002cf4:	e02e      	b.n	8002d54 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8002cf6:	7bfb      	ldrb	r3, [r7, #15]
 8002cf8:	2b21      	cmp	r3, #33	; 0x21
 8002cfa:	d126      	bne.n	8002d4a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	4a17      	ldr	r2, [pc, #92]	; (8002d5c <I2C_Slave_AF+0xdc>)
 8002d00:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2221      	movs	r2, #33	; 0x21
 8002d06:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685a      	ldr	r2, [r3, #4]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002d26:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d30:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d40:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe ffa1 	bl	8001c8a <HAL_I2C_SlaveTxCpltCallback>
}
 8002d48:	e004      	b.n	8002d54 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002d52:	615a      	str	r2, [r3, #20]
}
 8002d54:	bf00      	nop
 8002d56:	3710      	adds	r7, #16
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	ffff0000 	.word	0xffff0000

08002d60 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d6e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d76:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8002d78:	7bbb      	ldrb	r3, [r7, #14]
 8002d7a:	2b10      	cmp	r3, #16
 8002d7c:	d002      	beq.n	8002d84 <I2C_ITError+0x24>
 8002d7e:	7bbb      	ldrb	r3, [r7, #14]
 8002d80:	2b40      	cmp	r3, #64	; 0x40
 8002d82:	d10a      	bne.n	8002d9a <I2C_ITError+0x3a>
 8002d84:	7bfb      	ldrb	r3, [r7, #15]
 8002d86:	2b22      	cmp	r3, #34	; 0x22
 8002d88:	d107      	bne.n	8002d9a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d98:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002d9a:	7bfb      	ldrb	r3, [r7, #15]
 8002d9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002da0:	2b28      	cmp	r3, #40	; 0x28
 8002da2:	d107      	bne.n	8002db4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2228      	movs	r2, #40	; 0x28
 8002dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002db2:	e015      	b.n	8002de0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc2:	d00a      	beq.n	8002dda <I2C_ITError+0x7a>
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b60      	cmp	r3, #96	; 0x60
 8002dc8:	d007      	beq.n	8002dda <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2220      	movs	r2, #32
 8002dce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2200      	movs	r2, #0
 8002dde:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dee:	d161      	bne.n	8002eb4 <I2C_ITError+0x154>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	685a      	ldr	r2, [r3, #4]
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002dfe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e04:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d020      	beq.n	8002e4e <I2C_ITError+0xee>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e10:	4a6a      	ldr	r2, [pc, #424]	; (8002fbc <I2C_ITError+0x25c>)
 8002e12:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7fe f889 	bl	8000f30 <HAL_DMA_Abort_IT>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	f000 8089 	beq.w	8002f38 <I2C_ITError+0x1d8>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2220      	movs	r2, #32
 8002e3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002e48:	4610      	mov	r0, r2
 8002e4a:	4798      	blx	r3
 8002e4c:	e074      	b.n	8002f38 <I2C_ITError+0x1d8>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e52:	4a5a      	ldr	r2, [pc, #360]	; (8002fbc <I2C_ITError+0x25c>)
 8002e54:	635a      	str	r2, [r3, #52]	; 0x34

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f7fe f868 	bl	8000f30 <HAL_DMA_Abort_IT>
 8002e60:	4603      	mov	r3, r0
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d068      	beq.n	8002f38 <I2C_ITError+0x1d8>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	695b      	ldr	r3, [r3, #20]
 8002e6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e70:	2b40      	cmp	r3, #64	; 0x40
 8002e72:	d10b      	bne.n	8002e8c <I2C_ITError+0x12c>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691a      	ldr	r2, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7e:	b2d2      	uxtb	r2, r2
 8002e80:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	1c5a      	adds	r2, r3, #1
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	681a      	ldr	r2, [r3, #0]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	f022 0201 	bic.w	r2, r2, #1
 8002e9a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2220      	movs	r2, #32
 8002ea0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eaa:	687a      	ldr	r2, [r7, #4]
 8002eac:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002eae:	4610      	mov	r0, r2
 8002eb0:	4798      	blx	r3
 8002eb2:	e041      	b.n	8002f38 <I2C_ITError+0x1d8>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002eba:	b2db      	uxtb	r3, r3
 8002ebc:	2b60      	cmp	r3, #96	; 0x60
 8002ebe:	d125      	bne.n	8002f0c <I2C_ITError+0x1ac>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2220      	movs	r2, #32
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	695b      	ldr	r3, [r3, #20]
 8002ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ed8:	2b40      	cmp	r3, #64	; 0x40
 8002eda:	d10b      	bne.n	8002ef4 <I2C_ITError+0x194>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee6:	b2d2      	uxtb	r2, r2
 8002ee8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eee:	1c5a      	adds	r2, r3, #1
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 0201 	bic.w	r2, r2, #1
 8002f02:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f7fe fee4 	bl	8001cd2 <HAL_I2C_AbortCpltCallback>
 8002f0a:	e015      	b.n	8002f38 <I2C_ITError+0x1d8>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	695b      	ldr	r3, [r3, #20]
 8002f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f16:	2b40      	cmp	r3, #64	; 0x40
 8002f18:	d10b      	bne.n	8002f32 <I2C_ITError+0x1d2>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	691a      	ldr	r2, [r3, #16]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f24:	b2d2      	uxtb	r2, r2
 8002f26:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	1c5a      	adds	r2, r3, #1
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f7fd fa80 	bl	8000438 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f3c:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f3e:	68bb      	ldr	r3, [r7, #8]
 8002f40:	f003 0301 	and.w	r3, r3, #1
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d10e      	bne.n	8002f66 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d109      	bne.n	8002f66 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f52:	68bb      	ldr	r3, [r7, #8]
 8002f54:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d104      	bne.n	8002f66 <I2C_ITError+0x206>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8002f5c:	68bb      	ldr	r3, [r7, #8]
 8002f5e:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <I2C_ITError+0x216>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	685a      	ldr	r2, [r3, #4]
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8002f74:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f7c:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f82:	f003 0304 	and.w	r3, r3, #4
 8002f86:	2b04      	cmp	r3, #4
 8002f88:	d113      	bne.n	8002fb2 <I2C_ITError+0x252>
 8002f8a:	7bfb      	ldrb	r3, [r7, #15]
 8002f8c:	2b28      	cmp	r3, #40	; 0x28
 8002f8e:	d110      	bne.n	8002fb2 <I2C_ITError+0x252>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0b      	ldr	r2, [pc, #44]	; (8002fc0 <I2C_ITError+0x260>)
 8002f94:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2220      	movs	r2, #32
 8002fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8002fac:	6878      	ldr	r0, [r7, #4]
 8002fae:	f7fe fe75 	bl	8001c9c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002fb2:	bf00      	nop
 8002fb4:	3710      	adds	r7, #16
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	bd80      	pop	{r7, pc}
 8002fba:	bf00      	nop
 8002fbc:	08002fc5 	.word	0x08002fc5
 8002fc0:	ffff0000 	.word	0xffff0000

08002fc4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b086      	sub	sp, #24
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002fdc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002fde:	4b4b      	ldr	r3, [pc, #300]	; (800310c <I2C_DMAAbort+0x148>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	08db      	lsrs	r3, r3, #3
 8002fe4:	4a4a      	ldr	r2, [pc, #296]	; (8003110 <I2C_DMAAbort+0x14c>)
 8002fe6:	fba2 2303 	umull	r2, r3, r2, r3
 8002fea:	0a1a      	lsrs	r2, r3, #8
 8002fec:	4613      	mov	r3, r2
 8002fee:	009b      	lsls	r3, r3, #2
 8002ff0:	4413      	add	r3, r2
 8002ff2:	00da      	lsls	r2, r3, #3
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d106      	bne.n	800300c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003002:	f043 0220 	orr.w	r2, r3, #32
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800300a:	e00a      	b.n	8003022 <I2C_DMAAbort+0x5e>
    }
    count--;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	3b01      	subs	r3, #1
 8003010:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800301c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003020:	d0ea      	beq.n	8002ff8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
  }
  if (hi2c->hdmarx != NULL)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003036:	2b00      	cmp	r3, #0
 8003038:	d003      	beq.n	8003042 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800303a:	697b      	ldr	r3, [r7, #20]
 800303c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800303e:	2200      	movs	r2, #0
 8003040:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	681a      	ldr	r2, [r3, #0]
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003050:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	2200      	movs	r2, #0
 8003056:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800305c:	2b00      	cmp	r3, #0
 800305e:	d003      	beq.n	8003068 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003060:	697b      	ldr	r3, [r7, #20]
 8003062:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003064:	2200      	movs	r2, #0
 8003066:	635a      	str	r2, [r3, #52]	; 0x34
  }
  if (hi2c->hdmarx != NULL)
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800306c:	2b00      	cmp	r3, #0
 800306e:	d003      	beq.n	8003078 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003074:	2200      	movs	r2, #0
 8003076:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f022 0201 	bic.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800308e:	b2db      	uxtb	r3, r3
 8003090:	2b60      	cmp	r3, #96	; 0x60
 8003092:	d10e      	bne.n	80030b2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	2220      	movs	r2, #32
 8003098:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	2200      	movs	r2, #0
 80030a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80030a4:	697b      	ldr	r3, [r7, #20]
 80030a6:	2200      	movs	r2, #0
 80030a8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80030aa:	6978      	ldr	r0, [r7, #20]
 80030ac:	f7fe fe11 	bl	8001cd2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80030b0:	e027      	b.n	8003102 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80030b2:	7cfb      	ldrb	r3, [r7, #19]
 80030b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80030b8:	2b28      	cmp	r3, #40	; 0x28
 80030ba:	d117      	bne.n	80030ec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	681a      	ldr	r2, [r3, #0]
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f042 0201 	orr.w	r2, r2, #1
 80030ca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	697b      	ldr	r3, [r7, #20]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80030da:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80030dc:	697b      	ldr	r3, [r7, #20]
 80030de:	2200      	movs	r2, #0
 80030e0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80030e2:	697b      	ldr	r3, [r7, #20]
 80030e4:	2228      	movs	r2, #40	; 0x28
 80030e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80030ea:	e007      	b.n	80030fc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2220      	movs	r2, #32
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	2200      	movs	r2, #0
 80030f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80030fc:	6978      	ldr	r0, [r7, #20]
 80030fe:	f7fd f99b 	bl	8000438 <HAL_I2C_ErrorCallback>
}
 8003102:	bf00      	nop
 8003104:	3718      	adds	r7, #24
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
 800310a:	bf00      	nop
 800310c:	20000000 	.word	0x20000000
 8003110:	14f8b589 	.word	0x14f8b589

08003114 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8003114:	b480      	push	{r7}
 8003116:	b085      	sub	sp, #20
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	08db      	lsrs	r3, r3, #3
 8003126:	4a13      	ldr	r2, [pc, #76]	; (8003174 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8003128:	fba2 2303 	umull	r2, r3, r2, r3
 800312c:	0a1a      	lsrs	r2, r3, #8
 800312e:	4613      	mov	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	4413      	add	r3, r2
 8003134:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	3b01      	subs	r3, #1
 800313a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d107      	bne.n	8003152 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f043 0220 	orr.w	r2, r3, #32
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e008      	b.n	8003164 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800315c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003160:	d0e9      	beq.n	8003136 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8003162:	2300      	movs	r3, #0
}
 8003164:	4618      	mov	r0, r3
 8003166:	3714      	adds	r7, #20
 8003168:	46bd      	mov	sp, r7
 800316a:	bc80      	pop	{r7}
 800316c:	4770      	bx	lr
 800316e:	bf00      	nop
 8003170:	20000000 	.word	0x20000000
 8003174:	14f8b589 	.word	0x14f8b589

08003178 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8003178:	b480      	push	{r7}
 800317a:	b083      	sub	sp, #12
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003184:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003188:	d103      	bne.n	8003192 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8003190:	e007      	b.n	80031a2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003196:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800319a:	d102      	bne.n	80031a2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2208      	movs	r2, #8
 80031a0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80031a2:	bf00      	nop
 80031a4:	370c      	adds	r7, #12
 80031a6:	46bd      	mov	sp, r7
 80031a8:	bc80      	pop	{r7}
 80031aa:	4770      	bx	lr

080031ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031ac:	b580      	push	{r7, lr}
 80031ae:	b086      	sub	sp, #24
 80031b0:	af00      	add	r7, sp, #0
 80031b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d101      	bne.n	80031be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ba:	2301      	movs	r3, #1
 80031bc:	e272      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f003 0301 	and.w	r3, r3, #1
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	f000 8087 	beq.w	80032da <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80031cc:	4b92      	ldr	r3, [pc, #584]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f003 030c 	and.w	r3, r3, #12
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	d00c      	beq.n	80031f2 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031d8:	4b8f      	ldr	r3, [pc, #572]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	f003 030c 	and.w	r3, r3, #12
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d112      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
 80031e4:	4b8c      	ldr	r3, [pc, #560]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f0:	d10b      	bne.n	800320a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f2:	4b89      	ldr	r3, [pc, #548]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d06c      	beq.n	80032d8 <HAL_RCC_OscConfig+0x12c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	685b      	ldr	r3, [r3, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d168      	bne.n	80032d8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e24c      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003212:	d106      	bne.n	8003222 <HAL_RCC_OscConfig+0x76>
 8003214:	4b80      	ldr	r3, [pc, #512]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4a7f      	ldr	r2, [pc, #508]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800321a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	e02e      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	685b      	ldr	r3, [r3, #4]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d10c      	bne.n	8003244 <HAL_RCC_OscConfig+0x98>
 800322a:	4b7b      	ldr	r3, [pc, #492]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a7a      	ldr	r2, [pc, #488]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003230:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003234:	6013      	str	r3, [r2, #0]
 8003236:	4b78      	ldr	r3, [pc, #480]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a77      	ldr	r2, [pc, #476]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800323c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003240:	6013      	str	r3, [r2, #0]
 8003242:	e01d      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800324c:	d10c      	bne.n	8003268 <HAL_RCC_OscConfig+0xbc>
 800324e:	4b72      	ldr	r3, [pc, #456]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4a71      	ldr	r2, [pc, #452]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003258:	6013      	str	r3, [r2, #0]
 800325a:	4b6f      	ldr	r3, [pc, #444]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4a6e      	ldr	r2, [pc, #440]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003264:	6013      	str	r3, [r2, #0]
 8003266:	e00b      	b.n	8003280 <HAL_RCC_OscConfig+0xd4>
 8003268:	4b6b      	ldr	r3, [pc, #428]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a6a      	ldr	r2, [pc, #424]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800326e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003272:	6013      	str	r3, [r2, #0]
 8003274:	4b68      	ldr	r3, [pc, #416]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a67      	ldr	r2, [pc, #412]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800327a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800327e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d013      	beq.n	80032b0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003288:	f7fd fd00 	bl	8000c8c <HAL_GetTick>
 800328c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	e008      	b.n	80032a2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003290:	f7fd fcfc 	bl	8000c8c <HAL_GetTick>
 8003294:	4602      	mov	r2, r0
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	1ad3      	subs	r3, r2, r3
 800329a:	2b64      	cmp	r3, #100	; 0x64
 800329c:	d901      	bls.n	80032a2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800329e:	2303      	movs	r3, #3
 80032a0:	e200      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032a2:	4b5d      	ldr	r3, [pc, #372]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d0f0      	beq.n	8003290 <HAL_RCC_OscConfig+0xe4>
 80032ae:	e014      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032b0:	f7fd fcec 	bl	8000c8c <HAL_GetTick>
 80032b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032b8:	f7fd fce8 	bl	8000c8c <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e1ec      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ca:	4b53      	ldr	r3, [pc, #332]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d1f0      	bne.n	80032b8 <HAL_RCC_OscConfig+0x10c>
 80032d6:	e000      	b.n	80032da <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0302 	and.w	r3, r3, #2
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d063      	beq.n	80033ae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032e6:	4b4c      	ldr	r3, [pc, #304]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00b      	beq.n	800330a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80032f2:	4b49      	ldr	r3, [pc, #292]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	f003 030c 	and.w	r3, r3, #12
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d11c      	bne.n	8003338 <HAL_RCC_OscConfig+0x18c>
 80032fe:	4b46      	ldr	r3, [pc, #280]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d116      	bne.n	8003338 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800330a:	4b43      	ldr	r3, [pc, #268]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d005      	beq.n	8003322 <HAL_RCC_OscConfig+0x176>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	2b01      	cmp	r3, #1
 800331c:	d001      	beq.n	8003322 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e1c0      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003322:	4b3d      	ldr	r3, [pc, #244]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	695b      	ldr	r3, [r3, #20]
 800332e:	00db      	lsls	r3, r3, #3
 8003330:	4939      	ldr	r1, [pc, #228]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003332:	4313      	orrs	r3, r2
 8003334:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003336:	e03a      	b.n	80033ae <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	691b      	ldr	r3, [r3, #16]
 800333c:	2b00      	cmp	r3, #0
 800333e:	d020      	beq.n	8003382 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003340:	4b36      	ldr	r3, [pc, #216]	; (800341c <HAL_RCC_OscConfig+0x270>)
 8003342:	2201      	movs	r2, #1
 8003344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003346:	f7fd fca1 	bl	8000c8c <HAL_GetTick>
 800334a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	e008      	b.n	8003360 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800334e:	f7fd fc9d 	bl	8000c8c <HAL_GetTick>
 8003352:	4602      	mov	r2, r0
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	1ad3      	subs	r3, r2, r3
 8003358:	2b02      	cmp	r3, #2
 800335a:	d901      	bls.n	8003360 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800335c:	2303      	movs	r3, #3
 800335e:	e1a1      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003360:	4b2d      	ldr	r3, [pc, #180]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0302 	and.w	r3, r3, #2
 8003368:	2b00      	cmp	r3, #0
 800336a:	d0f0      	beq.n	800334e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800336c:	4b2a      	ldr	r3, [pc, #168]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	695b      	ldr	r3, [r3, #20]
 8003378:	00db      	lsls	r3, r3, #3
 800337a:	4927      	ldr	r1, [pc, #156]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 800337c:	4313      	orrs	r3, r2
 800337e:	600b      	str	r3, [r1, #0]
 8003380:	e015      	b.n	80033ae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003382:	4b26      	ldr	r3, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x270>)
 8003384:	2200      	movs	r2, #0
 8003386:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003388:	f7fd fc80 	bl	8000c8c <HAL_GetTick>
 800338c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	e008      	b.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003390:	f7fd fc7c 	bl	8000c8c <HAL_GetTick>
 8003394:	4602      	mov	r2, r0
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	1ad3      	subs	r3, r2, r3
 800339a:	2b02      	cmp	r3, #2
 800339c:	d901      	bls.n	80033a2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800339e:	2303      	movs	r3, #3
 80033a0:	e180      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033a2:	4b1d      	ldr	r3, [pc, #116]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d1f0      	bne.n	8003390 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f003 0308 	and.w	r3, r3, #8
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d03a      	beq.n	8003430 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	699b      	ldr	r3, [r3, #24]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d019      	beq.n	80033f6 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033c2:	4b17      	ldr	r3, [pc, #92]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80033c4:	2201      	movs	r2, #1
 80033c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033c8:	f7fd fc60 	bl	8000c8c <HAL_GetTick>
 80033cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	e008      	b.n	80033e2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80033d0:	f7fd fc5c 	bl	8000c8c <HAL_GetTick>
 80033d4:	4602      	mov	r2, r0
 80033d6:	693b      	ldr	r3, [r7, #16]
 80033d8:	1ad3      	subs	r3, r2, r3
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d901      	bls.n	80033e2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80033de:	2303      	movs	r3, #3
 80033e0:	e160      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033e2:	4b0d      	ldr	r3, [pc, #52]	; (8003418 <HAL_RCC_OscConfig+0x26c>)
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d0f0      	beq.n	80033d0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80033ee:	2001      	movs	r0, #1
 80033f0:	f000 fad8 	bl	80039a4 <RCC_Delay>
 80033f4:	e01c      	b.n	8003430 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033f6:	4b0a      	ldr	r3, [pc, #40]	; (8003420 <HAL_RCC_OscConfig+0x274>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033fc:	f7fd fc46 	bl	8000c8c <HAL_GetTick>
 8003400:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003402:	e00f      	b.n	8003424 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003404:	f7fd fc42 	bl	8000c8c <HAL_GetTick>
 8003408:	4602      	mov	r2, r0
 800340a:	693b      	ldr	r3, [r7, #16]
 800340c:	1ad3      	subs	r3, r2, r3
 800340e:	2b02      	cmp	r3, #2
 8003410:	d908      	bls.n	8003424 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003412:	2303      	movs	r3, #3
 8003414:	e146      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
 8003416:	bf00      	nop
 8003418:	40021000 	.word	0x40021000
 800341c:	42420000 	.word	0x42420000
 8003420:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003424:	4b92      	ldr	r3, [pc, #584]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003428:	f003 0302 	and.w	r3, r3, #2
 800342c:	2b00      	cmp	r3, #0
 800342e:	d1e9      	bne.n	8003404 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	f000 80a6 	beq.w	800358a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800343e:	2300      	movs	r3, #0
 8003440:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003442:	4b8b      	ldr	r3, [pc, #556]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003444:	69db      	ldr	r3, [r3, #28]
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d10d      	bne.n	800346a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800344e:	4b88      	ldr	r3, [pc, #544]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003450:	69db      	ldr	r3, [r3, #28]
 8003452:	4a87      	ldr	r2, [pc, #540]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003454:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003458:	61d3      	str	r3, [r2, #28]
 800345a:	4b85      	ldr	r3, [pc, #532]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800345c:	69db      	ldr	r3, [r3, #28]
 800345e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003466:	2301      	movs	r3, #1
 8003468:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800346a:	4b82      	ldr	r3, [pc, #520]	; (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d118      	bne.n	80034a8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003476:	4b7f      	ldr	r3, [pc, #508]	; (8003674 <HAL_RCC_OscConfig+0x4c8>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a7e      	ldr	r2, [pc, #504]	; (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800347c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003480:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003482:	f7fd fc03 	bl	8000c8c <HAL_GetTick>
 8003486:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003488:	e008      	b.n	800349c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800348a:	f7fd fbff 	bl	8000c8c <HAL_GetTick>
 800348e:	4602      	mov	r2, r0
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	1ad3      	subs	r3, r2, r3
 8003494:	2b64      	cmp	r3, #100	; 0x64
 8003496:	d901      	bls.n	800349c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003498:	2303      	movs	r3, #3
 800349a:	e103      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800349c:	4b75      	ldr	r3, [pc, #468]	; (8003674 <HAL_RCC_OscConfig+0x4c8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d0f0      	beq.n	800348a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68db      	ldr	r3, [r3, #12]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d106      	bne.n	80034be <HAL_RCC_OscConfig+0x312>
 80034b0:	4b6f      	ldr	r3, [pc, #444]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034b2:	6a1b      	ldr	r3, [r3, #32]
 80034b4:	4a6e      	ldr	r2, [pc, #440]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034b6:	f043 0301 	orr.w	r3, r3, #1
 80034ba:	6213      	str	r3, [r2, #32]
 80034bc:	e02d      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	68db      	ldr	r3, [r3, #12]
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d10c      	bne.n	80034e0 <HAL_RCC_OscConfig+0x334>
 80034c6:	4b6a      	ldr	r3, [pc, #424]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034c8:	6a1b      	ldr	r3, [r3, #32]
 80034ca:	4a69      	ldr	r2, [pc, #420]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034cc:	f023 0301 	bic.w	r3, r3, #1
 80034d0:	6213      	str	r3, [r2, #32]
 80034d2:	4b67      	ldr	r3, [pc, #412]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034d4:	6a1b      	ldr	r3, [r3, #32]
 80034d6:	4a66      	ldr	r2, [pc, #408]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034d8:	f023 0304 	bic.w	r3, r3, #4
 80034dc:	6213      	str	r3, [r2, #32]
 80034de:	e01c      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	68db      	ldr	r3, [r3, #12]
 80034e4:	2b05      	cmp	r3, #5
 80034e6:	d10c      	bne.n	8003502 <HAL_RCC_OscConfig+0x356>
 80034e8:	4b61      	ldr	r3, [pc, #388]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034ea:	6a1b      	ldr	r3, [r3, #32]
 80034ec:	4a60      	ldr	r2, [pc, #384]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034ee:	f043 0304 	orr.w	r3, r3, #4
 80034f2:	6213      	str	r3, [r2, #32]
 80034f4:	4b5e      	ldr	r3, [pc, #376]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034f6:	6a1b      	ldr	r3, [r3, #32]
 80034f8:	4a5d      	ldr	r2, [pc, #372]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80034fa:	f043 0301 	orr.w	r3, r3, #1
 80034fe:	6213      	str	r3, [r2, #32]
 8003500:	e00b      	b.n	800351a <HAL_RCC_OscConfig+0x36e>
 8003502:	4b5b      	ldr	r3, [pc, #364]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003504:	6a1b      	ldr	r3, [r3, #32]
 8003506:	4a5a      	ldr	r2, [pc, #360]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003508:	f023 0301 	bic.w	r3, r3, #1
 800350c:	6213      	str	r3, [r2, #32]
 800350e:	4b58      	ldr	r3, [pc, #352]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003510:	6a1b      	ldr	r3, [r3, #32]
 8003512:	4a57      	ldr	r2, [pc, #348]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003514:	f023 0304 	bic.w	r3, r3, #4
 8003518:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d015      	beq.n	800354e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003522:	f7fd fbb3 	bl	8000c8c <HAL_GetTick>
 8003526:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003528:	e00a      	b.n	8003540 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800352a:	f7fd fbaf 	bl	8000c8c <HAL_GetTick>
 800352e:	4602      	mov	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	f241 3288 	movw	r2, #5000	; 0x1388
 8003538:	4293      	cmp	r3, r2
 800353a:	d901      	bls.n	8003540 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800353c:	2303      	movs	r3, #3
 800353e:	e0b1      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003540:	4b4b      	ldr	r3, [pc, #300]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003542:	6a1b      	ldr	r3, [r3, #32]
 8003544:	f003 0302 	and.w	r3, r3, #2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d0ee      	beq.n	800352a <HAL_RCC_OscConfig+0x37e>
 800354c:	e014      	b.n	8003578 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354e:	f7fd fb9d 	bl	8000c8c <HAL_GetTick>
 8003552:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003554:	e00a      	b.n	800356c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003556:	f7fd fb99 	bl	8000c8c <HAL_GetTick>
 800355a:	4602      	mov	r2, r0
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	1ad3      	subs	r3, r2, r3
 8003560:	f241 3288 	movw	r2, #5000	; 0x1388
 8003564:	4293      	cmp	r3, r2
 8003566:	d901      	bls.n	800356c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003568:	2303      	movs	r3, #3
 800356a:	e09b      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	4b40      	ldr	r3, [pc, #256]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800356e:	6a1b      	ldr	r3, [r3, #32]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d1ee      	bne.n	8003556 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003578:	7dfb      	ldrb	r3, [r7, #23]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d105      	bne.n	800358a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800357e:	4b3c      	ldr	r3, [pc, #240]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	4a3b      	ldr	r2, [pc, #236]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003584:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003588:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	2b00      	cmp	r3, #0
 8003590:	f000 8087 	beq.w	80036a2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003594:	4b36      	ldr	r3, [pc, #216]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	f003 030c 	and.w	r3, r3, #12
 800359c:	2b08      	cmp	r3, #8
 800359e:	d061      	beq.n	8003664 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2b02      	cmp	r3, #2
 80035a6:	d146      	bne.n	8003636 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035a8:	4b33      	ldr	r3, [pc, #204]	; (8003678 <HAL_RCC_OscConfig+0x4cc>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ae:	f7fd fb6d 	bl	8000c8c <HAL_GetTick>
 80035b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035b4:	e008      	b.n	80035c8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035b6:	f7fd fb69 	bl	8000c8c <HAL_GetTick>
 80035ba:	4602      	mov	r2, r0
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	1ad3      	subs	r3, r2, r3
 80035c0:	2b02      	cmp	r3, #2
 80035c2:	d901      	bls.n	80035c8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80035c4:	2303      	movs	r3, #3
 80035c6:	e06d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80035c8:	4b29      	ldr	r3, [pc, #164]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1f0      	bne.n	80035b6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80035dc:	d108      	bne.n	80035f0 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80035de:	4b24      	ldr	r3, [pc, #144]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	689b      	ldr	r3, [r3, #8]
 80035ea:	4921      	ldr	r1, [pc, #132]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	4313      	orrs	r3, r2
 80035ee:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035f0:	4b1f      	ldr	r3, [pc, #124]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a19      	ldr	r1, [r3, #32]
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003600:	430b      	orrs	r3, r1
 8003602:	491b      	ldr	r1, [pc, #108]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003604:	4313      	orrs	r3, r2
 8003606:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003608:	4b1b      	ldr	r3, [pc, #108]	; (8003678 <HAL_RCC_OscConfig+0x4cc>)
 800360a:	2201      	movs	r2, #1
 800360c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800360e:	f7fd fb3d 	bl	8000c8c <HAL_GetTick>
 8003612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003614:	e008      	b.n	8003628 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003616:	f7fd fb39 	bl	8000c8c <HAL_GetTick>
 800361a:	4602      	mov	r2, r0
 800361c:	693b      	ldr	r3, [r7, #16]
 800361e:	1ad3      	subs	r3, r2, r3
 8003620:	2b02      	cmp	r3, #2
 8003622:	d901      	bls.n	8003628 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003624:	2303      	movs	r3, #3
 8003626:	e03d      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003628:	4b11      	ldr	r3, [pc, #68]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003630:	2b00      	cmp	r3, #0
 8003632:	d0f0      	beq.n	8003616 <HAL_RCC_OscConfig+0x46a>
 8003634:	e035      	b.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003636:	4b10      	ldr	r3, [pc, #64]	; (8003678 <HAL_RCC_OscConfig+0x4cc>)
 8003638:	2200      	movs	r2, #0
 800363a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800363c:	f7fd fb26 	bl	8000c8c <HAL_GetTick>
 8003640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003642:	e008      	b.n	8003656 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003644:	f7fd fb22 	bl	8000c8c <HAL_GetTick>
 8003648:	4602      	mov	r2, r0
 800364a:	693b      	ldr	r3, [r7, #16]
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	2b02      	cmp	r3, #2
 8003650:	d901      	bls.n	8003656 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003652:	2303      	movs	r3, #3
 8003654:	e026      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003656:	4b06      	ldr	r3, [pc, #24]	; (8003670 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d1f0      	bne.n	8003644 <HAL_RCC_OscConfig+0x498>
 8003662:	e01e      	b.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	69db      	ldr	r3, [r3, #28]
 8003668:	2b01      	cmp	r3, #1
 800366a:	d107      	bne.n	800367c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800366c:	2301      	movs	r3, #1
 800366e:	e019      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
 8003670:	40021000 	.word	0x40021000
 8003674:	40007000 	.word	0x40007000
 8003678:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800367c:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <HAL_RCC_OscConfig+0x500>)
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	429a      	cmp	r2, r3
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800369a:	429a      	cmp	r2, r3
 800369c:	d001      	beq.n	80036a2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800369e:	2301      	movs	r3, #1
 80036a0:	e000      	b.n	80036a4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	40021000 	.word	0x40021000

080036b0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e0d0      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b6a      	ldr	r3, [pc, #424]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0307 	and.w	r3, r3, #7
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d910      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b67      	ldr	r3, [pc, #412]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 0207 	bic.w	r2, r3, #7
 80036da:	4965      	ldr	r1, [pc, #404]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b63      	ldr	r3, [pc, #396]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e0b8      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0302 	and.w	r3, r3, #2
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d020      	beq.n	8003742 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 0304 	and.w	r3, r3, #4
 8003708:	2b00      	cmp	r3, #0
 800370a:	d005      	beq.n	8003718 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800370c:	4b59      	ldr	r3, [pc, #356]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	4a58      	ldr	r2, [pc, #352]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003712:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003716:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f003 0308 	and.w	r3, r3, #8
 8003720:	2b00      	cmp	r3, #0
 8003722:	d005      	beq.n	8003730 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003724:	4b53      	ldr	r3, [pc, #332]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003726:	685b      	ldr	r3, [r3, #4]
 8003728:	4a52      	ldr	r2, [pc, #328]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800372a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800372e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003730:	4b50      	ldr	r3, [pc, #320]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	689b      	ldr	r3, [r3, #8]
 800373c:	494d      	ldr	r1, [pc, #308]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800373e:	4313      	orrs	r3, r2
 8003740:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	2b00      	cmp	r3, #0
 800374c:	d040      	beq.n	80037d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d107      	bne.n	8003766 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003756:	4b47      	ldr	r3, [pc, #284]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d115      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	e07f      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	685b      	ldr	r3, [r3, #4]
 800376a:	2b02      	cmp	r3, #2
 800376c:	d107      	bne.n	800377e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376e:	4b41      	ldr	r3, [pc, #260]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003776:	2b00      	cmp	r3, #0
 8003778:	d109      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e073      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377e:	4b3d      	ldr	r3, [pc, #244]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0302 	and.w	r3, r3, #2
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e06b      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378e:	4b39      	ldr	r3, [pc, #228]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003790:	685b      	ldr	r3, [r3, #4]
 8003792:	f023 0203 	bic.w	r2, r3, #3
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	4936      	ldr	r1, [pc, #216]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	4313      	orrs	r3, r2
 800379e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037a0:	f7fd fa74 	bl	8000c8c <HAL_GetTick>
 80037a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a6:	e00a      	b.n	80037be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a8:	f7fd fa70 	bl	8000c8c <HAL_GetTick>
 80037ac:	4602      	mov	r2, r0
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	1ad3      	subs	r3, r2, r3
 80037b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b6:	4293      	cmp	r3, r2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e053      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037be:	4b2d      	ldr	r3, [pc, #180]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	f003 020c 	and.w	r2, r3, #12
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	009b      	lsls	r3, r3, #2
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d1eb      	bne.n	80037a8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80037d0:	4b27      	ldr	r3, [pc, #156]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0307 	and.w	r3, r3, #7
 80037d8:	683a      	ldr	r2, [r7, #0]
 80037da:	429a      	cmp	r2, r3
 80037dc:	d210      	bcs.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037de:	4b24      	ldr	r3, [pc, #144]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f023 0207 	bic.w	r2, r3, #7
 80037e6:	4922      	ldr	r1, [pc, #136]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	4313      	orrs	r3, r2
 80037ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ee:	4b20      	ldr	r3, [pc, #128]	; (8003870 <HAL_RCC_ClockConfig+0x1c0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	f003 0307 	and.w	r3, r3, #7
 80037f6:	683a      	ldr	r2, [r7, #0]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d001      	beq.n	8003800 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e032      	b.n	8003866 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d008      	beq.n	800381e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800380c:	4b19      	ldr	r3, [pc, #100]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800380e:	685b      	ldr	r3, [r3, #4]
 8003810:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4916      	ldr	r1, [pc, #88]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800381a:	4313      	orrs	r3, r2
 800381c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f003 0308 	and.w	r3, r3, #8
 8003826:	2b00      	cmp	r3, #0
 8003828:	d009      	beq.n	800383e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800382a:	4b12      	ldr	r3, [pc, #72]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	00db      	lsls	r3, r3, #3
 8003838:	490e      	ldr	r1, [pc, #56]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 800383a:	4313      	orrs	r3, r2
 800383c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800383e:	f000 f821 	bl	8003884 <HAL_RCC_GetSysClockFreq>
 8003842:	4602      	mov	r2, r0
 8003844:	4b0b      	ldr	r3, [pc, #44]	; (8003874 <HAL_RCC_ClockConfig+0x1c4>)
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	091b      	lsrs	r3, r3, #4
 800384a:	f003 030f 	and.w	r3, r3, #15
 800384e:	490a      	ldr	r1, [pc, #40]	; (8003878 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	5ccb      	ldrb	r3, [r1, r3]
 8003852:	fa22 f303 	lsr.w	r3, r2, r3
 8003856:	4a09      	ldr	r2, [pc, #36]	; (800387c <HAL_RCC_ClockConfig+0x1cc>)
 8003858:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800385a:	4b09      	ldr	r3, [pc, #36]	; (8003880 <HAL_RCC_ClockConfig+0x1d0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fd f9d2 	bl	8000c08 <HAL_InitTick>

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3710      	adds	r7, #16
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}
 800386e:	bf00      	nop
 8003870:	40022000 	.word	0x40022000
 8003874:	40021000 	.word	0x40021000
 8003878:	080057a0 	.word	0x080057a0
 800387c:	20000000 	.word	0x20000000
 8003880:	20000004 	.word	0x20000004

08003884 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003884:	b490      	push	{r4, r7}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800388a:	4b29      	ldr	r3, [pc, #164]	; (8003930 <HAL_RCC_GetSysClockFreq+0xac>)
 800388c:	1d3c      	adds	r4, r7, #4
 800388e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003890:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003894:	f240 2301 	movw	r3, #513	; 0x201
 8003898:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800389a:	2300      	movs	r3, #0
 800389c:	61fb      	str	r3, [r7, #28]
 800389e:	2300      	movs	r3, #0
 80038a0:	61bb      	str	r3, [r7, #24]
 80038a2:	2300      	movs	r3, #0
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
 80038a6:	2300      	movs	r3, #0
 80038a8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80038ae:	4b21      	ldr	r3, [pc, #132]	; (8003934 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	f003 030c 	and.w	r3, r3, #12
 80038ba:	2b04      	cmp	r3, #4
 80038bc:	d002      	beq.n	80038c4 <HAL_RCC_GetSysClockFreq+0x40>
 80038be:	2b08      	cmp	r3, #8
 80038c0:	d003      	beq.n	80038ca <HAL_RCC_GetSysClockFreq+0x46>
 80038c2:	e02b      	b.n	800391c <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80038c4:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038c6:	623b      	str	r3, [r7, #32]
      break;
 80038c8:	e02b      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80038ca:	69fb      	ldr	r3, [r7, #28]
 80038cc:	0c9b      	lsrs	r3, r3, #18
 80038ce:	f003 030f 	and.w	r3, r3, #15
 80038d2:	3328      	adds	r3, #40	; 0x28
 80038d4:	443b      	add	r3, r7
 80038d6:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80038da:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80038dc:	69fb      	ldr	r3, [r7, #28]
 80038de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d012      	beq.n	800390c <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80038e6:	4b13      	ldr	r3, [pc, #76]	; (8003934 <HAL_RCC_GetSysClockFreq+0xb0>)
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	0c5b      	lsrs	r3, r3, #17
 80038ec:	f003 0301 	and.w	r3, r3, #1
 80038f0:	3328      	adds	r3, #40	; 0x28
 80038f2:	443b      	add	r3, r7
 80038f4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80038f8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80038fa:	697b      	ldr	r3, [r7, #20]
 80038fc:	4a0e      	ldr	r2, [pc, #56]	; (8003938 <HAL_RCC_GetSysClockFreq+0xb4>)
 80038fe:	fb03 f202 	mul.w	r2, r3, r2
 8003902:	69bb      	ldr	r3, [r7, #24]
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	627b      	str	r3, [r7, #36]	; 0x24
 800390a:	e004      	b.n	8003916 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	4a0b      	ldr	r2, [pc, #44]	; (800393c <HAL_RCC_GetSysClockFreq+0xb8>)
 8003910:	fb02 f303 	mul.w	r3, r2, r3
 8003914:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	623b      	str	r3, [r7, #32]
      break;
 800391a:	e002      	b.n	8003922 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4b06      	ldr	r3, [pc, #24]	; (8003938 <HAL_RCC_GetSysClockFreq+0xb4>)
 800391e:	623b      	str	r3, [r7, #32]
      break;
 8003920:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003922:	6a3b      	ldr	r3, [r7, #32]
}
 8003924:	4618      	mov	r0, r3
 8003926:	3728      	adds	r7, #40	; 0x28
 8003928:	46bd      	mov	sp, r7
 800392a:	bc90      	pop	{r4, r7}
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	08005790 	.word	0x08005790
 8003934:	40021000 	.word	0x40021000
 8003938:	007a1200 	.word	0x007a1200
 800393c:	003d0900 	.word	0x003d0900

08003940 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003940:	b480      	push	{r7}
 8003942:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003944:	4b02      	ldr	r3, [pc, #8]	; (8003950 <HAL_RCC_GetHCLKFreq+0x10>)
 8003946:	681b      	ldr	r3, [r3, #0]
}
 8003948:	4618      	mov	r0, r3
 800394a:	46bd      	mov	sp, r7
 800394c:	bc80      	pop	{r7}
 800394e:	4770      	bx	lr
 8003950:	20000000 	.word	0x20000000

08003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003958:	f7ff fff2 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 800395c:	4602      	mov	r2, r0
 800395e:	4b05      	ldr	r3, [pc, #20]	; (8003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	0a1b      	lsrs	r3, r3, #8
 8003964:	f003 0307 	and.w	r3, r3, #7
 8003968:	4903      	ldr	r1, [pc, #12]	; (8003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 800396a:	5ccb      	ldrb	r3, [r1, r3]
 800396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003970:	4618      	mov	r0, r3
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40021000 	.word	0x40021000
 8003978:	080057b0 	.word	0x080057b0

0800397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800397c:	b580      	push	{r7, lr}
 800397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003980:	f7ff ffde 	bl	8003940 <HAL_RCC_GetHCLKFreq>
 8003984:	4602      	mov	r2, r0
 8003986:	4b05      	ldr	r3, [pc, #20]	; (800399c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	0adb      	lsrs	r3, r3, #11
 800398c:	f003 0307 	and.w	r3, r3, #7
 8003990:	4903      	ldr	r1, [pc, #12]	; (80039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003992:	5ccb      	ldrb	r3, [r1, r3]
 8003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003998:	4618      	mov	r0, r3
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	080057b0 	.word	0x080057b0

080039a4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b085      	sub	sp, #20
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039ac:	4b0a      	ldr	r3, [pc, #40]	; (80039d8 <RCC_Delay+0x34>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a0a      	ldr	r2, [pc, #40]	; (80039dc <RCC_Delay+0x38>)
 80039b2:	fba2 2303 	umull	r2, r3, r2, r3
 80039b6:	0a5b      	lsrs	r3, r3, #9
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	fb02 f303 	mul.w	r3, r2, r3
 80039be:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039c0:	bf00      	nop
  }
  while (Delay --);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	1e5a      	subs	r2, r3, #1
 80039c6:	60fa      	str	r2, [r7, #12]
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d1f9      	bne.n	80039c0 <RCC_Delay+0x1c>
}
 80039cc:	bf00      	nop
 80039ce:	bf00      	nop
 80039d0:	3714      	adds	r7, #20
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bc80      	pop	{r7}
 80039d6:	4770      	bx	lr
 80039d8:	20000000 	.word	0x20000000
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b082      	sub	sp, #8
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e041      	b.n	8003a76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039f8:	b2db      	uxtb	r3, r3
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d106      	bne.n	8003a0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2200      	movs	r2, #0
 8003a02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a06:	6878      	ldr	r0, [r7, #4]
 8003a08:	f7fc ff74 	bl	80008f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2202      	movs	r2, #2
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	3304      	adds	r3, #4
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4610      	mov	r0, r2
 8003a20:	f000 fa70 	bl	8003f04 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2201      	movs	r2, #1
 8003a28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2201      	movs	r2, #1
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2201      	movs	r2, #1
 8003a38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2201      	movs	r2, #1
 8003a48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3708      	adds	r7, #8
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
	...

08003a80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b085      	sub	sp, #20
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d001      	beq.n	8003a98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a94:	2301      	movs	r3, #1
 8003a96:	e03a      	b.n	8003b0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2202      	movs	r2, #2
 8003a9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	68da      	ldr	r2, [r3, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f042 0201 	orr.w	r2, r2, #1
 8003aae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	4a18      	ldr	r2, [pc, #96]	; (8003b18 <HAL_TIM_Base_Start_IT+0x98>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00e      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x58>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ac2:	d009      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x58>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <HAL_TIM_Base_Start_IT+0x9c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d004      	beq.n	8003ad8 <HAL_TIM_Base_Start_IT+0x58>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	4a13      	ldr	r2, [pc, #76]	; (8003b20 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ad4:	4293      	cmp	r3, r2
 8003ad6:	d111      	bne.n	8003afc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 0307 	and.w	r3, r3, #7
 8003ae2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2b06      	cmp	r3, #6
 8003ae8:	d010      	beq.n	8003b0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f042 0201 	orr.w	r2, r2, #1
 8003af8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afa:	e007      	b.n	8003b0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681a      	ldr	r2, [r3, #0]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	4618      	mov	r0, r3
 8003b10:	3714      	adds	r7, #20
 8003b12:	46bd      	mov	sp, r7
 8003b14:	bc80      	pop	{r7}
 8003b16:	4770      	bx	lr
 8003b18:	40012c00 	.word	0x40012c00
 8003b1c:	40000400 	.word	0x40000400
 8003b20:	40000800 	.word	0x40000800

08003b24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b02      	cmp	r3, #2
 8003b38:	d122      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	f003 0302 	and.w	r3, r3, #2
 8003b44:	2b02      	cmp	r3, #2
 8003b46:	d11b      	bne.n	8003b80 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	f06f 0202 	mvn.w	r2, #2
 8003b50:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2201      	movs	r2, #1
 8003b56:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	699b      	ldr	r3, [r3, #24]
 8003b5e:	f003 0303 	and.w	r3, r3, #3
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d003      	beq.n	8003b6e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f9b1 	bl	8003ece <HAL_TIM_IC_CaptureCallback>
 8003b6c:	e005      	b.n	8003b7a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b6e:	6878      	ldr	r0, [r7, #4]
 8003b70:	f000 f9a4 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f9b3 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	691b      	ldr	r3, [r3, #16]
 8003b86:	f003 0304 	and.w	r3, r3, #4
 8003b8a:	2b04      	cmp	r3, #4
 8003b8c:	d122      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	68db      	ldr	r3, [r3, #12]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b04      	cmp	r3, #4
 8003b9a:	d11b      	bne.n	8003bd4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f06f 0204 	mvn.w	r2, #4
 8003ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2202      	movs	r2, #2
 8003baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d003      	beq.n	8003bc2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f987 	bl	8003ece <HAL_TIM_IC_CaptureCallback>
 8003bc0:	e005      	b.n	8003bce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f97a 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bc8:	6878      	ldr	r0, [r7, #4]
 8003bca:	f000 f989 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	691b      	ldr	r3, [r3, #16]
 8003bda:	f003 0308 	and.w	r3, r3, #8
 8003bde:	2b08      	cmp	r3, #8
 8003be0:	d122      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	68db      	ldr	r3, [r3, #12]
 8003be8:	f003 0308 	and.w	r3, r3, #8
 8003bec:	2b08      	cmp	r3, #8
 8003bee:	d11b      	bne.n	8003c28 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	f06f 0208 	mvn.w	r2, #8
 8003bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2204      	movs	r2, #4
 8003bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	69db      	ldr	r3, [r3, #28]
 8003c06:	f003 0303 	and.w	r3, r3, #3
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d003      	beq.n	8003c16 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f000 f95d 	bl	8003ece <HAL_TIM_IC_CaptureCallback>
 8003c14:	e005      	b.n	8003c22 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c16:	6878      	ldr	r0, [r7, #4]
 8003c18:	f000 f950 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f000 f95f 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	2200      	movs	r2, #0
 8003c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	f003 0310 	and.w	r3, r3, #16
 8003c32:	2b10      	cmp	r3, #16
 8003c34:	d122      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b10      	cmp	r3, #16
 8003c42:	d11b      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f06f 0210 	mvn.w	r2, #16
 8003c4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2208      	movs	r2, #8
 8003c52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	69db      	ldr	r3, [r3, #28]
 8003c5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d003      	beq.n	8003c6a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c62:	6878      	ldr	r0, [r7, #4]
 8003c64:	f000 f933 	bl	8003ece <HAL_TIM_IC_CaptureCallback>
 8003c68:	e005      	b.n	8003c76 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c6a:	6878      	ldr	r0, [r7, #4]
 8003c6c:	f000 f926 	bl	8003ebc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	f000 f935 	bl	8003ee0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d10e      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0301 	and.w	r3, r3, #1
 8003c94:	2b01      	cmp	r3, #1
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0201 	mvn.w	r2, #1
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f7fc fa94 	bl	80001d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	691b      	ldr	r3, [r3, #16]
 8003cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cb2:	2b80      	cmp	r3, #128	; 0x80
 8003cb4:	d10e      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	68db      	ldr	r3, [r3, #12]
 8003cbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cc0:	2b80      	cmp	r3, #128	; 0x80
 8003cc2:	d107      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003ccc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 fa77 	bl	80041c2 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d10e      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cec:	2b40      	cmp	r3, #64	; 0x40
 8003cee:	d107      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003cf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cfa:	6878      	ldr	r0, [r7, #4]
 8003cfc:	f000 f8f9 	bl	8003ef2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0320 	and.w	r3, r3, #32
 8003d0a:	2b20      	cmp	r3, #32
 8003d0c:	d10e      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0320 	and.w	r3, r3, #32
 8003d18:	2b20      	cmp	r3, #32
 8003d1a:	d107      	bne.n	8003d2c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0220 	mvn.w	r2, #32
 8003d24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 fa42 	bl	80041b0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003d2c:	bf00      	nop
 8003d2e:	3708      	adds	r7, #8
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d101      	bne.n	8003d4c <HAL_TIM_ConfigClockSource+0x18>
 8003d48:	2302      	movs	r3, #2
 8003d4a:	e0b3      	b.n	8003eb4 <HAL_TIM_ConfigClockSource+0x180>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2202      	movs	r2, #2
 8003d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	689b      	ldr	r3, [r3, #8]
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d6a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d72:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	68fa      	ldr	r2, [r7, #12]
 8003d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d84:	d03e      	beq.n	8003e04 <HAL_TIM_ConfigClockSource+0xd0>
 8003d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8a:	f200 8087 	bhi.w	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d92:	f000 8085 	beq.w	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	d87f      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003d9c:	2b70      	cmp	r3, #112	; 0x70
 8003d9e:	d01a      	beq.n	8003dd6 <HAL_TIM_ConfigClockSource+0xa2>
 8003da0:	2b70      	cmp	r3, #112	; 0x70
 8003da2:	d87b      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003da4:	2b60      	cmp	r3, #96	; 0x60
 8003da6:	d050      	beq.n	8003e4a <HAL_TIM_ConfigClockSource+0x116>
 8003da8:	2b60      	cmp	r3, #96	; 0x60
 8003daa:	d877      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003dac:	2b50      	cmp	r3, #80	; 0x50
 8003dae:	d03c      	beq.n	8003e2a <HAL_TIM_ConfigClockSource+0xf6>
 8003db0:	2b50      	cmp	r3, #80	; 0x50
 8003db2:	d873      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d058      	beq.n	8003e6a <HAL_TIM_ConfigClockSource+0x136>
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d86f      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003dbc:	2b30      	cmp	r3, #48	; 0x30
 8003dbe:	d064      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x156>
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d86b      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003dc4:	2b20      	cmp	r3, #32
 8003dc6:	d060      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x156>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d867      	bhi.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d05c      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x156>
 8003dd0:	2b10      	cmp	r3, #16
 8003dd2:	d05a      	beq.n	8003e8a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003dd4:	e062      	b.n	8003e9c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6818      	ldr	r0, [r3, #0]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	6899      	ldr	r1, [r3, #8]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	68db      	ldr	r3, [r3, #12]
 8003de6:	f000 f966 	bl	80040b6 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	689b      	ldr	r3, [r3, #8]
 8003df0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003df8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	68fa      	ldr	r2, [r7, #12]
 8003e00:	609a      	str	r2, [r3, #8]
      break;
 8003e02:	e04e      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f000 f94f 	bl	80040b6 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	689a      	ldr	r2, [r3, #8]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e26:	609a      	str	r2, [r3, #8]
      break;
 8003e28:	e03b      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6818      	ldr	r0, [r3, #0]
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	6859      	ldr	r1, [r3, #4]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	68db      	ldr	r3, [r3, #12]
 8003e36:	461a      	mov	r2, r3
 8003e38:	f000 f8c6 	bl	8003fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	2150      	movs	r1, #80	; 0x50
 8003e42:	4618      	mov	r0, r3
 8003e44:	f000 f91d 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003e48:	e02b      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	6818      	ldr	r0, [r3, #0]
 8003e4e:	683b      	ldr	r3, [r7, #0]
 8003e50:	6859      	ldr	r1, [r3, #4]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	461a      	mov	r2, r3
 8003e58:	f000 f8e4 	bl	8004024 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2160      	movs	r1, #96	; 0x60
 8003e62:	4618      	mov	r0, r3
 8003e64:	f000 f90d 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003e68:	e01b      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6818      	ldr	r0, [r3, #0]
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	6859      	ldr	r1, [r3, #4]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	461a      	mov	r2, r3
 8003e78:	f000 f8a6 	bl	8003fc8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2140      	movs	r1, #64	; 0x40
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 f8fd 	bl	8004082 <TIM_ITRx_SetConfig>
      break;
 8003e88:	e00b      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4619      	mov	r1, r3
 8003e94:	4610      	mov	r0, r2
 8003e96:	f000 f8f4 	bl	8004082 <TIM_ITRx_SetConfig>
        break;
 8003e9a:	e002      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003e9c:	bf00      	nop
 8003e9e:	e000      	b.n	8003ea2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003ea0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2200      	movs	r2, #0
 8003eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	b083      	sub	sp, #12
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003ec4:	bf00      	nop
 8003ec6:	370c      	adds	r7, #12
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bc80      	pop	{r7}
 8003ecc:	4770      	bx	lr

08003ece <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ece:	b480      	push	{r7}
 8003ed0:	b083      	sub	sp, #12
 8003ed2:	af00      	add	r7, sp, #0
 8003ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bc80      	pop	{r7}
 8003ede:	4770      	bx	lr

08003ee0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ee0:	b480      	push	{r7}
 8003ee2:	b083      	sub	sp, #12
 8003ee4:	af00      	add	r7, sp, #0
 8003ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ee8:	bf00      	nop
 8003eea:	370c      	adds	r7, #12
 8003eec:	46bd      	mov	sp, r7
 8003eee:	bc80      	pop	{r7}
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bc80      	pop	{r7}
 8003f02:	4770      	bx	lr

08003f04 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f04:	b480      	push	{r7}
 8003f06:	b085      	sub	sp, #20
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	6078      	str	r0, [r7, #4]
 8003f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	4a29      	ldr	r2, [pc, #164]	; (8003fbc <TIM_Base_SetConfig+0xb8>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d00b      	beq.n	8003f34 <TIM_Base_SetConfig+0x30>
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f22:	d007      	beq.n	8003f34 <TIM_Base_SetConfig+0x30>
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a26      	ldr	r2, [pc, #152]	; (8003fc0 <TIM_Base_SetConfig+0xbc>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d003      	beq.n	8003f34 <TIM_Base_SetConfig+0x30>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	4a25      	ldr	r2, [pc, #148]	; (8003fc4 <TIM_Base_SetConfig+0xc0>)
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d108      	bne.n	8003f46 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f3a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	685b      	ldr	r3, [r3, #4]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a1c      	ldr	r2, [pc, #112]	; (8003fbc <TIM_Base_SetConfig+0xb8>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d00b      	beq.n	8003f66 <TIM_Base_SetConfig+0x62>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f54:	d007      	beq.n	8003f66 <TIM_Base_SetConfig+0x62>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a19      	ldr	r2, [pc, #100]	; (8003fc0 <TIM_Base_SetConfig+0xbc>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0x62>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a18      	ldr	r2, [pc, #96]	; (8003fc4 <TIM_Base_SetConfig+0xc0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d108      	bne.n	8003f78 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f6c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	68fa      	ldr	r2, [r7, #12]
 8003f74:	4313      	orrs	r3, r2
 8003f76:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	68fa      	ldr	r2, [r7, #12]
 8003f8a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	689a      	ldr	r2, [r3, #8]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	4a07      	ldr	r2, [pc, #28]	; (8003fbc <TIM_Base_SetConfig+0xb8>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	d103      	bne.n	8003fac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fa4:	683b      	ldr	r3, [r7, #0]
 8003fa6:	691a      	ldr	r2, [r3, #16]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	615a      	str	r2, [r3, #20]
}
 8003fb2:	bf00      	nop
 8003fb4:	3714      	adds	r7, #20
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bc80      	pop	{r7}
 8003fba:	4770      	bx	lr
 8003fbc:	40012c00 	.word	0x40012c00
 8003fc0:	40000400 	.word	0x40000400
 8003fc4:	40000800 	.word	0x40000800

08003fc8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003fc8:	b480      	push	{r7}
 8003fca:	b087      	sub	sp, #28
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
 8003fd8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6a1b      	ldr	r3, [r3, #32]
 8003fde:	f023 0201 	bic.w	r2, r3, #1
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	699b      	ldr	r3, [r3, #24]
 8003fea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003fec:	693b      	ldr	r3, [r7, #16]
 8003fee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ff2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	011b      	lsls	r3, r3, #4
 8003ff8:	693a      	ldr	r2, [r7, #16]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 030a 	bic.w	r3, r3, #10
 8004004:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004006:	697a      	ldr	r2, [r7, #20]
 8004008:	68bb      	ldr	r3, [r7, #8]
 800400a:	4313      	orrs	r3, r2
 800400c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	693a      	ldr	r2, [r7, #16]
 8004012:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	621a      	str	r2, [r3, #32]
}
 800401a:	bf00      	nop
 800401c:	371c      	adds	r7, #28
 800401e:	46bd      	mov	sp, r7
 8004020:	bc80      	pop	{r7}
 8004022:	4770      	bx	lr

08004024 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004024:	b480      	push	{r7}
 8004026:	b087      	sub	sp, #28
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	6a1b      	ldr	r3, [r3, #32]
 8004034:	f023 0210 	bic.w	r2, r3, #16
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	6a1b      	ldr	r3, [r3, #32]
 8004046:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800404e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	031b      	lsls	r3, r3, #12
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	4313      	orrs	r3, r2
 8004058:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004060:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004062:	68bb      	ldr	r3, [r7, #8]
 8004064:	011b      	lsls	r3, r3, #4
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	4313      	orrs	r3, r2
 800406a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	697a      	ldr	r2, [r7, #20]
 8004070:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	693a      	ldr	r2, [r7, #16]
 8004076:	621a      	str	r2, [r3, #32]
}
 8004078:	bf00      	nop
 800407a:	371c      	adds	r7, #28
 800407c:	46bd      	mov	sp, r7
 800407e:	bc80      	pop	{r7}
 8004080:	4770      	bx	lr

08004082 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004082:	b480      	push	{r7}
 8004084:	b085      	sub	sp, #20
 8004086:	af00      	add	r7, sp, #0
 8004088:	6078      	str	r0, [r7, #4]
 800408a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	689b      	ldr	r3, [r3, #8]
 8004090:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004098:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800409a:	683a      	ldr	r2, [r7, #0]
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	4313      	orrs	r3, r2
 80040a0:	f043 0307 	orr.w	r3, r3, #7
 80040a4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68fa      	ldr	r2, [r7, #12]
 80040aa:	609a      	str	r2, [r3, #8]
}
 80040ac:	bf00      	nop
 80040ae:	3714      	adds	r7, #20
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bc80      	pop	{r7}
 80040b4:	4770      	bx	lr

080040b6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80040b6:	b480      	push	{r7}
 80040b8:	b087      	sub	sp, #28
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	60f8      	str	r0, [r7, #12]
 80040be:	60b9      	str	r1, [r7, #8]
 80040c0:	607a      	str	r2, [r7, #4]
 80040c2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80040ca:	697b      	ldr	r3, [r7, #20]
 80040cc:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80040d0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	021a      	lsls	r2, r3, #8
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	431a      	orrs	r2, r3
 80040da:	68bb      	ldr	r3, [r7, #8]
 80040dc:	4313      	orrs	r3, r2
 80040de:	697a      	ldr	r2, [r7, #20]
 80040e0:	4313      	orrs	r3, r2
 80040e2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	697a      	ldr	r2, [r7, #20]
 80040e8:	609a      	str	r2, [r3, #8]
}
 80040ea:	bf00      	nop
 80040ec:	371c      	adds	r7, #28
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bc80      	pop	{r7}
 80040f2:	4770      	bx	lr

080040f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b085      	sub	sp, #20
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004108:	2302      	movs	r3, #2
 800410a:	e046      	b.n	800419a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2202      	movs	r2, #2
 8004118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	685b      	ldr	r3, [r3, #4]
 8004122:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	689b      	ldr	r3, [r3, #8]
 800412a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004132:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	68fa      	ldr	r2, [r7, #12]
 800413a:	4313      	orrs	r3, r2
 800413c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a16      	ldr	r2, [pc, #88]	; (80041a4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d00e      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004158:	d009      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a12      	ldr	r2, [pc, #72]	; (80041a8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d004      	beq.n	800416e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a10      	ldr	r2, [pc, #64]	; (80041ac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d10c      	bne.n	8004188 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800416e:	68bb      	ldr	r3, [r7, #8]
 8004170:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	685b      	ldr	r3, [r3, #4]
 800417a:	68ba      	ldr	r2, [r7, #8]
 800417c:	4313      	orrs	r3, r2
 800417e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	68ba      	ldr	r2, [r7, #8]
 8004186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004198:	2300      	movs	r3, #0
}
 800419a:	4618      	mov	r0, r3
 800419c:	3714      	adds	r7, #20
 800419e:	46bd      	mov	sp, r7
 80041a0:	bc80      	pop	{r7}
 80041a2:	4770      	bx	lr
 80041a4:	40012c00 	.word	0x40012c00
 80041a8:	40000400 	.word	0x40000400
 80041ac:	40000800 	.word	0x40000800

080041b0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	bc80      	pop	{r7}
 80041c0:	4770      	bx	lr

080041c2 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041c2:	b480      	push	{r7}
 80041c4:	b083      	sub	sp, #12
 80041c6:	af00      	add	r7, sp, #0
 80041c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041ca:	bf00      	nop
 80041cc:	370c      	adds	r7, #12
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bc80      	pop	{r7}
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d101      	bne.n	80041e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e03f      	b.n	8004266 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d106      	bne.n	8004200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80041fa:	6878      	ldr	r0, [r7, #4]
 80041fc:	f7fc fb9e 	bl	800093c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	2224      	movs	r2, #36	; 0x24
 8004204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	68da      	ldr	r2, [r3, #12]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f000 fcdd 	bl	8004bd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691a      	ldr	r2, [r3, #16]
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800422c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695a      	ldr	r2, [r3, #20]
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800423c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	68da      	ldr	r2, [r3, #12]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800424c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2220      	movs	r2, #32
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004264:	2300      	movs	r3, #0
}
 8004266:	4618      	mov	r0, r3
 8004268:	3708      	adds	r7, #8
 800426a:	46bd      	mov	sp, r7
 800426c:	bd80      	pop	{r7, pc}

0800426e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800426e:	b580      	push	{r7, lr}
 8004270:	b08a      	sub	sp, #40	; 0x28
 8004272:	af02      	add	r7, sp, #8
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	603b      	str	r3, [r7, #0]
 800427a:	4613      	mov	r3, r2
 800427c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800427e:	2300      	movs	r3, #0
 8004280:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b20      	cmp	r3, #32
 800428c:	d17c      	bne.n	8004388 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	2b00      	cmp	r3, #0
 8004292:	d002      	beq.n	800429a <HAL_UART_Transmit+0x2c>
 8004294:	88fb      	ldrh	r3, [r7, #6]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d101      	bne.n	800429e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	e075      	b.n	800438a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d101      	bne.n	80042ac <HAL_UART_Transmit+0x3e>
 80042a8:	2302      	movs	r3, #2
 80042aa:	e06e      	b.n	800438a <HAL_UART_Transmit+0x11c>
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	2221      	movs	r2, #33	; 0x21
 80042be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80042c2:	f7fc fce3 	bl	8000c8c <HAL_GetTick>
 80042c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	88fa      	ldrh	r2, [r7, #6]
 80042d2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	689b      	ldr	r3, [r3, #8]
 80042d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042dc:	d108      	bne.n	80042f0 <HAL_UART_Transmit+0x82>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d104      	bne.n	80042f0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	61bb      	str	r3, [r7, #24]
 80042ee:	e003      	b.n	80042f8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80042f0:	68bb      	ldr	r3, [r7, #8]
 80042f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80042f4:	2300      	movs	r3, #0
 80042f6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004300:	e02a      	b.n	8004358 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	9300      	str	r3, [sp, #0]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	2180      	movs	r1, #128	; 0x80
 800430c:	68f8      	ldr	r0, [r7, #12]
 800430e:	f000 fa90 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 8004312:	4603      	mov	r3, r0
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e036      	b.n	800438a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800431c:	69fb      	ldr	r3, [r7, #28]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d10b      	bne.n	800433a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004322:	69bb      	ldr	r3, [r7, #24]
 8004324:	881b      	ldrh	r3, [r3, #0]
 8004326:	461a      	mov	r2, r3
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004330:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	3302      	adds	r3, #2
 8004336:	61bb      	str	r3, [r7, #24]
 8004338:	e007      	b.n	800434a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	781a      	ldrb	r2, [r3, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004344:	69fb      	ldr	r3, [r7, #28]
 8004346:	3301      	adds	r3, #1
 8004348:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800435c:	b29b      	uxth	r3, r3
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1cf      	bne.n	8004302 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	2200      	movs	r2, #0
 800436a:	2140      	movs	r1, #64	; 0x40
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f000 fa60 	bl	8004832 <UART_WaitOnFlagUntilTimeout>
 8004372:	4603      	mov	r3, r0
 8004374:	2b00      	cmp	r3, #0
 8004376:	d001      	beq.n	800437c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e006      	b.n	800438a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2220      	movs	r2, #32
 8004380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	e000      	b.n	800438a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004388:	2302      	movs	r3, #2
  }
}
 800438a:	4618      	mov	r0, r3
 800438c:	3720      	adds	r7, #32
 800438e:	46bd      	mov	sp, r7
 8004390:	bd80      	pop	{r7, pc}

08004392 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004392:	b480      	push	{r7}
 8004394:	b085      	sub	sp, #20
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	4613      	mov	r3, r2
 800439e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043a6:	b2db      	uxtb	r3, r3
 80043a8:	2b20      	cmp	r3, #32
 80043aa:	d130      	bne.n	800440e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043ac:	68bb      	ldr	r3, [r7, #8]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d002      	beq.n	80043b8 <HAL_UART_Transmit_IT+0x26>
 80043b2:	88fb      	ldrh	r3, [r7, #6]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e029      	b.n	8004410 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c2:	2b01      	cmp	r3, #1
 80043c4:	d101      	bne.n	80043ca <HAL_UART_Transmit_IT+0x38>
 80043c6:	2302      	movs	r3, #2
 80043c8:	e022      	b.n	8004410 <HAL_UART_Transmit_IT+0x7e>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2201      	movs	r2, #1
 80043ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	88fa      	ldrh	r2, [r7, #6]
 80043dc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	88fa      	ldrh	r2, [r7, #6]
 80043e2:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	2200      	movs	r2, #0
 80043e8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2221      	movs	r2, #33	; 0x21
 80043ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68da      	ldr	r2, [r3, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004408:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800440a:	2300      	movs	r3, #0
 800440c:	e000      	b.n	8004410 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800440e:	2302      	movs	r3, #2
  }
}
 8004410:	4618      	mov	r0, r3
 8004412:	3714      	adds	r7, #20
 8004414:	46bd      	mov	sp, r7
 8004416:	bc80      	pop	{r7}
 8004418:	4770      	bx	lr

0800441a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800441a:	b580      	push	{r7, lr}
 800441c:	b084      	sub	sp, #16
 800441e:	af00      	add	r7, sp, #0
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	60b9      	str	r1, [r7, #8]
 8004424:	4613      	mov	r3, r2
 8004426:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800442e:	b2db      	uxtb	r3, r3
 8004430:	2b20      	cmp	r3, #32
 8004432:	d11d      	bne.n	8004470 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004434:	68bb      	ldr	r3, [r7, #8]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d002      	beq.n	8004440 <HAL_UART_Receive_IT+0x26>
 800443a:	88fb      	ldrh	r3, [r7, #6]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d101      	bne.n	8004444 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004440:	2301      	movs	r3, #1
 8004442:	e016      	b.n	8004472 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_UART_Receive_IT+0x38>
 800444e:	2302      	movs	r3, #2
 8004450:	e00f      	b.n	8004472 <HAL_UART_Receive_IT+0x58>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8004460:	88fb      	ldrh	r3, [r7, #6]
 8004462:	461a      	mov	r2, r3
 8004464:	68b9      	ldr	r1, [r7, #8]
 8004466:	68f8      	ldr	r0, [r7, #12]
 8004468:	f000 fa2d 	bl	80048c6 <UART_Start_Receive_IT>
 800446c:	4603      	mov	r3, r0
 800446e:	e000      	b.n	8004472 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004470:	2302      	movs	r3, #2
  }
}
 8004472:	4618      	mov	r0, r3
 8004474:	3710      	adds	r7, #16
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
	...

0800447c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800447c:	b580      	push	{r7, lr}
 800447e:	b08a      	sub	sp, #40	; 0x28
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68db      	ldr	r3, [r3, #12]
 8004492:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	695b      	ldr	r3, [r3, #20]
 800449a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800449c:	2300      	movs	r3, #0
 800449e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80044a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a6:	f003 030f 	and.w	r3, r3, #15
 80044aa:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80044ac:	69bb      	ldr	r3, [r7, #24]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d10d      	bne.n	80044ce <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80044b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b4:	f003 0320 	and.w	r3, r3, #32
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d008      	beq.n	80044ce <HAL_UART_IRQHandler+0x52>
 80044bc:	6a3b      	ldr	r3, [r7, #32]
 80044be:	f003 0320 	and.w	r3, r3, #32
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d003      	beq.n	80044ce <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fadd 	bl	8004a86 <UART_Receive_IT>
      return;
 80044cc:	e17b      	b.n	80047c6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80044ce:	69bb      	ldr	r3, [r7, #24]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	f000 80b1 	beq.w	8004638 <HAL_UART_IRQHandler+0x1bc>
 80044d6:	69fb      	ldr	r3, [r7, #28]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d105      	bne.n	80044ec <HAL_UART_IRQHandler+0x70>
 80044e0:	6a3b      	ldr	r3, [r7, #32]
 80044e2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 80a6 	beq.w	8004638 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	f003 0301 	and.w	r3, r3, #1
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <HAL_UART_IRQHandler+0x90>
 80044f6:	6a3b      	ldr	r3, [r7, #32]
 80044f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d005      	beq.n	800450c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004504:	f043 0201 	orr.w	r2, r3, #1
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800450c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800450e:	f003 0304 	and.w	r3, r3, #4
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00a      	beq.n	800452c <HAL_UART_IRQHandler+0xb0>
 8004516:	69fb      	ldr	r3, [r7, #28]
 8004518:	f003 0301 	and.w	r3, r3, #1
 800451c:	2b00      	cmp	r3, #0
 800451e:	d005      	beq.n	800452c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004524:	f043 0202 	orr.w	r2, r3, #2
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800452c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800452e:	f003 0302 	and.w	r3, r3, #2
 8004532:	2b00      	cmp	r3, #0
 8004534:	d00a      	beq.n	800454c <HAL_UART_IRQHandler+0xd0>
 8004536:	69fb      	ldr	r3, [r7, #28]
 8004538:	f003 0301 	and.w	r3, r3, #1
 800453c:	2b00      	cmp	r3, #0
 800453e:	d005      	beq.n	800454c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004544:	f043 0204 	orr.w	r2, r3, #4
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800454c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00f      	beq.n	8004576 <HAL_UART_IRQHandler+0xfa>
 8004556:	6a3b      	ldr	r3, [r7, #32]
 8004558:	f003 0320 	and.w	r3, r3, #32
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <HAL_UART_IRQHandler+0xee>
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d005      	beq.n	8004576 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800456e:	f043 0208 	orr.w	r2, r3, #8
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457a:	2b00      	cmp	r3, #0
 800457c:	f000 811e 	beq.w	80047bc <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d007      	beq.n	800459a <HAL_UART_IRQHandler+0x11e>
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	f003 0320 	and.w	r3, r3, #32
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004594:	6878      	ldr	r0, [r7, #4]
 8004596:	f000 fa76 	bl	8004a86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	695b      	ldr	r3, [r3, #20]
 80045a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf14      	ite	ne
 80045a8:	2301      	movne	r3, #1
 80045aa:	2300      	moveq	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045b4:	f003 0308 	and.w	r3, r3, #8
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d102      	bne.n	80045c2 <HAL_UART_IRQHandler+0x146>
 80045bc:	697b      	ldr	r3, [r7, #20]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d031      	beq.n	8004626 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80045c2:	6878      	ldr	r0, [r7, #4]
 80045c4:	f000 f9b8 	bl	8004938 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	695b      	ldr	r3, [r3, #20]
 80045ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d023      	beq.n	800461e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	695a      	ldr	r2, [r3, #20]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80045e4:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d013      	beq.n	8004616 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f2:	4a76      	ldr	r2, [pc, #472]	; (80047cc <HAL_UART_IRQHandler+0x350>)
 80045f4:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7fc fc98 	bl	8000f30 <HAL_DMA_Abort_IT>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d016      	beq.n	8004634 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800460a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800460c:	687a      	ldr	r2, [r7, #4]
 800460e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004610:	4610      	mov	r0, r2
 8004612:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004614:	e00e      	b.n	8004634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004616:	6878      	ldr	r0, [r7, #4]
 8004618:	f000 f8da 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800461c:	e00a      	b.n	8004634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 f8d6 	bl	80047d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004624:	e006      	b.n	8004634 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 f8d2 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004632:	e0c3      	b.n	80047bc <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004634:	bf00      	nop
    return;
 8004636:	e0c1      	b.n	80047bc <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463c:	2b01      	cmp	r3, #1
 800463e:	f040 80a1 	bne.w	8004784 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8004642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004644:	f003 0310 	and.w	r3, r3, #16
 8004648:	2b00      	cmp	r3, #0
 800464a:	f000 809b 	beq.w	8004784 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800464e:	6a3b      	ldr	r3, [r7, #32]
 8004650:	f003 0310 	and.w	r3, r3, #16
 8004654:	2b00      	cmp	r3, #0
 8004656:	f000 8095 	beq.w	8004784 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800465a:	2300      	movs	r3, #0
 800465c:	60fb      	str	r3, [r7, #12]
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	60fb      	str	r3, [r7, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800467a:	2b00      	cmp	r3, #0
 800467c:	d04e      	beq.n	800471c <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	685b      	ldr	r3, [r3, #4]
 8004686:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004688:	8a3b      	ldrh	r3, [r7, #16]
 800468a:	2b00      	cmp	r3, #0
 800468c:	f000 8098 	beq.w	80047c0 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004694:	8a3a      	ldrh	r2, [r7, #16]
 8004696:	429a      	cmp	r2, r3
 8004698:	f080 8092 	bcs.w	80047c0 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	8a3a      	ldrh	r2, [r7, #16]
 80046a0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b20      	cmp	r3, #32
 80046aa:	d02b      	beq.n	8004704 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	68da      	ldr	r2, [r3, #12]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ba:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695a      	ldr	r2, [r3, #20]
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	f022 0201 	bic.w	r2, r2, #1
 80046ca:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695a      	ldr	r2, [r3, #20]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80046da:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2220      	movs	r2, #32
 80046e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68da      	ldr	r2, [r3, #12]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f022 0210 	bic.w	r2, r2, #16
 80046f8:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fc fbdb 	bl	8000eba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800470c:	b29b      	uxth	r3, r3
 800470e:	1ad3      	subs	r3, r2, r3
 8004710:	b29b      	uxth	r3, r3
 8004712:	4619      	mov	r1, r3
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	f000 f864 	bl	80047e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800471a:	e051      	b.n	80047c0 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004724:	b29b      	uxth	r3, r3
 8004726:	1ad3      	subs	r3, r2, r3
 8004728:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800472e:	b29b      	uxth	r3, r3
 8004730:	2b00      	cmp	r3, #0
 8004732:	d047      	beq.n	80047c4 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8004734:	8a7b      	ldrh	r3, [r7, #18]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d044      	beq.n	80047c4 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8004748:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	695a      	ldr	r2, [r3, #20]
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f022 0201 	bic.w	r2, r2, #1
 8004758:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2220      	movs	r2, #32
 800475e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	68da      	ldr	r2, [r3, #12]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f022 0210 	bic.w	r2, r2, #16
 8004776:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004778:	8a7b      	ldrh	r3, [r7, #18]
 800477a:	4619      	mov	r1, r3
 800477c:	6878      	ldr	r0, [r7, #4]
 800477e:	f000 f830 	bl	80047e2 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004782:	e01f      	b.n	80047c4 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800478a:	2b00      	cmp	r3, #0
 800478c:	d008      	beq.n	80047a0 <HAL_UART_IRQHandler+0x324>
 800478e:	6a3b      	ldr	r3, [r7, #32]
 8004790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004794:	2b00      	cmp	r3, #0
 8004796:	d003      	beq.n	80047a0 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f000 f90d 	bl	80049b8 <UART_Transmit_IT>
    return;
 800479e:	e012      	b.n	80047c6 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80047a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d00d      	beq.n	80047c6 <HAL_UART_IRQHandler+0x34a>
 80047aa:	6a3b      	ldr	r3, [r7, #32]
 80047ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d008      	beq.n	80047c6 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f000 f94e 	bl	8004a56 <UART_EndTransmit_IT>
    return;
 80047ba:	e004      	b.n	80047c6 <HAL_UART_IRQHandler+0x34a>
    return;
 80047bc:	bf00      	nop
 80047be:	e002      	b.n	80047c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80047c0:	bf00      	nop
 80047c2:	e000      	b.n	80047c6 <HAL_UART_IRQHandler+0x34a>
      return;
 80047c4:	bf00      	nop
  }
}
 80047c6:	3728      	adds	r7, #40	; 0x28
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	08004991 	.word	0x08004991

080047d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80047d8:	bf00      	nop
 80047da:	370c      	adds	r7, #12
 80047dc:	46bd      	mov	sp, r7
 80047de:	bc80      	pop	{r7}
 80047e0:	4770      	bx	lr

080047e2 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80047e2:	b480      	push	{r7}
 80047e4:	b083      	sub	sp, #12
 80047e6:	af00      	add	r7, sp, #0
 80047e8:	6078      	str	r0, [r7, #4]
 80047ea:	460b      	mov	r3, r1
 80047ec:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80047ee:	bf00      	nop
 80047f0:	370c      	adds	r7, #12
 80047f2:	46bd      	mov	sp, r7
 80047f4:	bc80      	pop	{r7}
 80047f6:	4770      	bx	lr

080047f8 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b085      	sub	sp, #20
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8004800:	2300      	movs	r3, #0
 8004802:	60fb      	str	r3, [r7, #12]
 8004804:	2300      	movs	r3, #0
 8004806:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800480e:	b2db      	uxtb	r3, r3
 8004810:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004818:	b2db      	uxtb	r3, r3
 800481a:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	b2da      	uxtb	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	b2db      	uxtb	r3, r3
 8004824:	4313      	orrs	r3, r2
 8004826:	b2db      	uxtb	r3, r3
}
 8004828:	4618      	mov	r0, r3
 800482a:	3714      	adds	r7, #20
 800482c:	46bd      	mov	sp, r7
 800482e:	bc80      	pop	{r7}
 8004830:	4770      	bx	lr

08004832 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004832:	b580      	push	{r7, lr}
 8004834:	b084      	sub	sp, #16
 8004836:	af00      	add	r7, sp, #0
 8004838:	60f8      	str	r0, [r7, #12]
 800483a:	60b9      	str	r1, [r7, #8]
 800483c:	603b      	str	r3, [r7, #0]
 800483e:	4613      	mov	r3, r2
 8004840:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004842:	e02c      	b.n	800489e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004844:	69bb      	ldr	r3, [r7, #24]
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484a:	d028      	beq.n	800489e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800484c:	69bb      	ldr	r3, [r7, #24]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d007      	beq.n	8004862 <UART_WaitOnFlagUntilTimeout+0x30>
 8004852:	f7fc fa1b 	bl	8000c8c <HAL_GetTick>
 8004856:	4602      	mov	r2, r0
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	1ad3      	subs	r3, r2, r3
 800485c:	69ba      	ldr	r2, [r7, #24]
 800485e:	429a      	cmp	r2, r3
 8004860:	d21d      	bcs.n	800489e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	68da      	ldr	r2, [r3, #12]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004870:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	695a      	ldr	r2, [r3, #20]
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f022 0201 	bic.w	r2, r2, #1
 8004880:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800489a:	2303      	movs	r3, #3
 800489c:	e00f      	b.n	80048be <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	681a      	ldr	r2, [r3, #0]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4013      	ands	r3, r2
 80048a8:	68ba      	ldr	r2, [r7, #8]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	bf0c      	ite	eq
 80048ae:	2301      	moveq	r3, #1
 80048b0:	2300      	movne	r3, #0
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	461a      	mov	r2, r3
 80048b6:	79fb      	ldrb	r3, [r7, #7]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d0c3      	beq.n	8004844 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80048bc:	2300      	movs	r3, #0
}
 80048be:	4618      	mov	r0, r3
 80048c0:	3710      	adds	r7, #16
 80048c2:	46bd      	mov	sp, r7
 80048c4:	bd80      	pop	{r7, pc}

080048c6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048c6:	b480      	push	{r7}
 80048c8:	b085      	sub	sp, #20
 80048ca:	af00      	add	r7, sp, #0
 80048cc:	60f8      	str	r0, [r7, #12]
 80048ce:	60b9      	str	r1, [r7, #8]
 80048d0:	4613      	mov	r3, r2
 80048d2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	68ba      	ldr	r2, [r7, #8]
 80048d8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	88fa      	ldrh	r2, [r7, #6]
 80048de:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	88fa      	ldrh	r2, [r7, #6]
 80048e4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	2200      	movs	r2, #0
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2222      	movs	r2, #34	; 0x22
 80048f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68da      	ldr	r2, [r3, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800490a:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	695a      	ldr	r2, [r3, #20]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	f042 0201 	orr.w	r2, r2, #1
 800491a:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f042 0220 	orr.w	r2, r2, #32
 800492a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	bc80      	pop	{r7}
 8004936:	4770      	bx	lr

08004938 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004938:	b480      	push	{r7}
 800493a:	b083      	sub	sp, #12
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800494e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	695a      	ldr	r2, [r3, #20]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f022 0201 	bic.w	r2, r2, #1
 800495e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004964:	2b01      	cmp	r3, #1
 8004966:	d107      	bne.n	8004978 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	68da      	ldr	r2, [r3, #12]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0210 	bic.w	r2, r2, #16
 8004976:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2220      	movs	r2, #32
 800497c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004986:	bf00      	nop
 8004988:	370c      	adds	r7, #12
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b084      	sub	sp, #16
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	2200      	movs	r2, #0
 80049a8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049aa:	68f8      	ldr	r0, [r7, #12]
 80049ac:	f7ff ff10 	bl	80047d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049b0:	bf00      	nop
 80049b2:	3710      	adds	r7, #16
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd80      	pop	{r7, pc}

080049b8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80049c6:	b2db      	uxtb	r3, r3
 80049c8:	2b21      	cmp	r3, #33	; 0x21
 80049ca:	d13e      	bne.n	8004a4a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d4:	d114      	bne.n	8004a00 <UART_Transmit_IT+0x48>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d110      	bne.n	8004a00 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a1b      	ldr	r3, [r3, #32]
 80049e2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	881b      	ldrh	r3, [r3, #0]
 80049e8:	461a      	mov	r2, r3
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049f2:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	1c9a      	adds	r2, r3, #2
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	621a      	str	r2, [r3, #32]
 80049fe:	e008      	b.n	8004a12 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a1b      	ldr	r3, [r3, #32]
 8004a04:	1c59      	adds	r1, r3, #1
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	6211      	str	r1, [r2, #32]
 8004a0a:	781a      	ldrb	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a16:	b29b      	uxth	r3, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	b29b      	uxth	r3, r3
 8004a1c:	687a      	ldr	r2, [r7, #4]
 8004a1e:	4619      	mov	r1, r3
 8004a20:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d10f      	bne.n	8004a46 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a34:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68da      	ldr	r2, [r3, #12]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a44:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a46:	2300      	movs	r3, #0
 8004a48:	e000      	b.n	8004a4c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a4a:	2302      	movs	r3, #2
  }
}
 8004a4c:	4618      	mov	r0, r3
 8004a4e:	3714      	adds	r7, #20
 8004a50:	46bd      	mov	sp, r7
 8004a52:	bc80      	pop	{r7}
 8004a54:	4770      	bx	lr

08004a56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b082      	sub	sp, #8
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68da      	ldr	r2, [r3, #12]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2220      	movs	r2, #32
 8004a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fb fc34 	bl	80002e4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}

08004a86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a86:	b580      	push	{r7, lr}
 8004a88:	b086      	sub	sp, #24
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	2b22      	cmp	r3, #34	; 0x22
 8004a98:	f040 8099 	bne.w	8004bce <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	689b      	ldr	r3, [r3, #8]
 8004aa0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa4:	d117      	bne.n	8004ad6 <UART_Receive_IT+0x50>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	691b      	ldr	r3, [r3, #16]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d113      	bne.n	8004ad6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ace:	1c9a      	adds	r2, r3, #2
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	629a      	str	r2, [r3, #40]	; 0x28
 8004ad4:	e026      	b.n	8004b24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ada:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8004adc:	2300      	movs	r3, #0
 8004ade:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ae8:	d007      	beq.n	8004afa <UART_Receive_IT+0x74>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10a      	bne.n	8004b08 <UART_Receive_IT+0x82>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d106      	bne.n	8004b08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	701a      	strb	r2, [r3, #0]
 8004b06:	e008      	b.n	8004b1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	1c5a      	adds	r2, r3, #1
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b28:	b29b      	uxth	r3, r3
 8004b2a:	3b01      	subs	r3, #1
 8004b2c:	b29b      	uxth	r3, r3
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	4619      	mov	r1, r3
 8004b32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d148      	bne.n	8004bca <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68da      	ldr	r2, [r3, #12]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0220 	bic.w	r2, r2, #32
 8004b46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68da      	ldr	r2, [r3, #12]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004b56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f022 0201 	bic.w	r2, r2, #1
 8004b66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2220      	movs	r2, #32
 8004b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d123      	bne.n	8004bc0 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0210 	bic.w	r2, r2, #16
 8004b8c:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d10a      	bne.n	8004bb2 <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b9c:	2300      	movs	r3, #0
 8004b9e:	60fb      	str	r3, [r7, #12]
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	60fb      	str	r3, [r7, #12]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004bb6:	4619      	mov	r1, r3
 8004bb8:	6878      	ldr	r0, [r7, #4]
 8004bba:	f7ff fe12 	bl	80047e2 <HAL_UARTEx_RxEventCallback>
 8004bbe:	e002      	b.n	8004bc6 <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fb fba7 	bl	8000314 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	e002      	b.n	8004bd0 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	e000      	b.n	8004bd0 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8004bce:	2302      	movs	r3, #2
  }
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3718      	adds	r7, #24
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	bd80      	pop	{r7, pc}

08004bd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	430a      	orrs	r2, r1
 8004bf4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	689a      	ldr	r2, [r3, #8]
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	691b      	ldr	r3, [r3, #16]
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	695b      	ldr	r3, [r3, #20]
 8004c04:	4313      	orrs	r3, r2
 8004c06:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	68db      	ldr	r3, [r3, #12]
 8004c0e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8004c12:	f023 030c 	bic.w	r3, r3, #12
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	6812      	ldr	r2, [r2, #0]
 8004c1a:	68b9      	ldr	r1, [r7, #8]
 8004c1c:	430b      	orrs	r3, r1
 8004c1e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	695b      	ldr	r3, [r3, #20]
 8004c26:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699a      	ldr	r2, [r3, #24]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	4a2c      	ldr	r2, [pc, #176]	; (8004cec <UART_SetConfig+0x114>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d103      	bne.n	8004c48 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c40:	f7fe fe9c 	bl	800397c <HAL_RCC_GetPCLK2Freq>
 8004c44:	60f8      	str	r0, [r7, #12]
 8004c46:	e002      	b.n	8004c4e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c48:	f7fe fe84 	bl	8003954 <HAL_RCC_GetPCLK1Freq>
 8004c4c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c4e:	68fa      	ldr	r2, [r7, #12]
 8004c50:	4613      	mov	r3, r2
 8004c52:	009b      	lsls	r3, r3, #2
 8004c54:	4413      	add	r3, r2
 8004c56:	009a      	lsls	r2, r3, #2
 8004c58:	441a      	add	r2, r3
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	009b      	lsls	r3, r3, #2
 8004c60:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c64:	4a22      	ldr	r2, [pc, #136]	; (8004cf0 <UART_SetConfig+0x118>)
 8004c66:	fba2 2303 	umull	r2, r3, r2, r3
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	0119      	lsls	r1, r3, #4
 8004c6e:	68fa      	ldr	r2, [r7, #12]
 8004c70:	4613      	mov	r3, r2
 8004c72:	009b      	lsls	r3, r3, #2
 8004c74:	4413      	add	r3, r2
 8004c76:	009a      	lsls	r2, r3, #2
 8004c78:	441a      	add	r2, r3
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <UART_SetConfig+0x118>)
 8004c86:	fba3 0302 	umull	r0, r3, r3, r2
 8004c8a:	095b      	lsrs	r3, r3, #5
 8004c8c:	2064      	movs	r0, #100	; 0x64
 8004c8e:	fb00 f303 	mul.w	r3, r0, r3
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	011b      	lsls	r3, r3, #4
 8004c96:	3332      	adds	r3, #50	; 0x32
 8004c98:	4a15      	ldr	r2, [pc, #84]	; (8004cf0 <UART_SetConfig+0x118>)
 8004c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c9e:	095b      	lsrs	r3, r3, #5
 8004ca0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004ca4:	4419      	add	r1, r3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	009b      	lsls	r3, r3, #2
 8004cac:	4413      	add	r3, r2
 8004cae:	009a      	lsls	r2, r3, #2
 8004cb0:	441a      	add	r2, r3
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	fbb2 f2f3 	udiv	r2, r2, r3
 8004cbc:	4b0c      	ldr	r3, [pc, #48]	; (8004cf0 <UART_SetConfig+0x118>)
 8004cbe:	fba3 0302 	umull	r0, r3, r3, r2
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	2064      	movs	r0, #100	; 0x64
 8004cc6:	fb00 f303 	mul.w	r3, r0, r3
 8004cca:	1ad3      	subs	r3, r2, r3
 8004ccc:	011b      	lsls	r3, r3, #4
 8004cce:	3332      	adds	r3, #50	; 0x32
 8004cd0:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <UART_SetConfig+0x118>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	095b      	lsrs	r3, r3, #5
 8004cd8:	f003 020f 	and.w	r2, r3, #15
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	440a      	add	r2, r1
 8004ce2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004ce4:	bf00      	nop
 8004ce6:	3710      	adds	r7, #16
 8004ce8:	46bd      	mov	sp, r7
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	40013800 	.word	0x40013800
 8004cf0:	51eb851f 	.word	0x51eb851f

08004cf4 <asiprintf>:
 8004cf4:	b40e      	push	{r1, r2, r3}
 8004cf6:	b530      	push	{r4, r5, lr}
 8004cf8:	2400      	movs	r4, #0
 8004cfa:	b09c      	sub	sp, #112	; 0x70
 8004cfc:	ab1f      	add	r3, sp, #124	; 0x7c
 8004cfe:	4605      	mov	r5, r0
 8004d00:	490c      	ldr	r1, [pc, #48]	; (8004d34 <asiprintf+0x40>)
 8004d02:	480d      	ldr	r0, [pc, #52]	; (8004d38 <asiprintf+0x44>)
 8004d04:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d08:	e9cd 1405 	strd	r1, r4, [sp, #20]
 8004d0c:	6800      	ldr	r0, [r0, #0]
 8004d0e:	a902      	add	r1, sp, #8
 8004d10:	9301      	str	r3, [sp, #4]
 8004d12:	9402      	str	r4, [sp, #8]
 8004d14:	9404      	str	r4, [sp, #16]
 8004d16:	9407      	str	r4, [sp, #28]
 8004d18:	f000 f982 	bl	8005020 <_svfiprintf_r>
 8004d1c:	2800      	cmp	r0, #0
 8004d1e:	bfa1      	itttt	ge
 8004d20:	9b02      	ldrge	r3, [sp, #8]
 8004d22:	701c      	strbge	r4, [r3, #0]
 8004d24:	9b06      	ldrge	r3, [sp, #24]
 8004d26:	602b      	strge	r3, [r5, #0]
 8004d28:	b01c      	add	sp, #112	; 0x70
 8004d2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d2e:	b003      	add	sp, #12
 8004d30:	4770      	bx	lr
 8004d32:	bf00      	nop
 8004d34:	ffff0288 	.word	0xffff0288
 8004d38:	2000000c 	.word	0x2000000c

08004d3c <__errno>:
 8004d3c:	4b01      	ldr	r3, [pc, #4]	; (8004d44 <__errno+0x8>)
 8004d3e:	6818      	ldr	r0, [r3, #0]
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	2000000c 	.word	0x2000000c

08004d48 <__libc_init_array>:
 8004d48:	b570      	push	{r4, r5, r6, lr}
 8004d4a:	2600      	movs	r6, #0
 8004d4c:	4d0c      	ldr	r5, [pc, #48]	; (8004d80 <__libc_init_array+0x38>)
 8004d4e:	4c0d      	ldr	r4, [pc, #52]	; (8004d84 <__libc_init_array+0x3c>)
 8004d50:	1b64      	subs	r4, r4, r5
 8004d52:	10a4      	asrs	r4, r4, #2
 8004d54:	42a6      	cmp	r6, r4
 8004d56:	d109      	bne.n	8004d6c <__libc_init_array+0x24>
 8004d58:	f000 fc84 	bl	8005664 <_init>
 8004d5c:	2600      	movs	r6, #0
 8004d5e:	4d0a      	ldr	r5, [pc, #40]	; (8004d88 <__libc_init_array+0x40>)
 8004d60:	4c0a      	ldr	r4, [pc, #40]	; (8004d8c <__libc_init_array+0x44>)
 8004d62:	1b64      	subs	r4, r4, r5
 8004d64:	10a4      	asrs	r4, r4, #2
 8004d66:	42a6      	cmp	r6, r4
 8004d68:	d105      	bne.n	8004d76 <__libc_init_array+0x2e>
 8004d6a:	bd70      	pop	{r4, r5, r6, pc}
 8004d6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d70:	4798      	blx	r3
 8004d72:	3601      	adds	r6, #1
 8004d74:	e7ee      	b.n	8004d54 <__libc_init_array+0xc>
 8004d76:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d7a:	4798      	blx	r3
 8004d7c:	3601      	adds	r6, #1
 8004d7e:	e7f2      	b.n	8004d66 <__libc_init_array+0x1e>
 8004d80:	080057ec 	.word	0x080057ec
 8004d84:	080057ec 	.word	0x080057ec
 8004d88:	080057ec 	.word	0x080057ec
 8004d8c:	080057f0 	.word	0x080057f0

08004d90 <free>:
 8004d90:	4b02      	ldr	r3, [pc, #8]	; (8004d9c <free+0xc>)
 8004d92:	4601      	mov	r1, r0
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	f000 b80b 	b.w	8004db0 <_free_r>
 8004d9a:	bf00      	nop
 8004d9c:	2000000c 	.word	0x2000000c

08004da0 <memset>:
 8004da0:	4603      	mov	r3, r0
 8004da2:	4402      	add	r2, r0
 8004da4:	4293      	cmp	r3, r2
 8004da6:	d100      	bne.n	8004daa <memset+0xa>
 8004da8:	4770      	bx	lr
 8004daa:	f803 1b01 	strb.w	r1, [r3], #1
 8004dae:	e7f9      	b.n	8004da4 <memset+0x4>

08004db0 <_free_r>:
 8004db0:	b538      	push	{r3, r4, r5, lr}
 8004db2:	4605      	mov	r5, r0
 8004db4:	2900      	cmp	r1, #0
 8004db6:	d040      	beq.n	8004e3a <_free_r+0x8a>
 8004db8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dbc:	1f0c      	subs	r4, r1, #4
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	bfb8      	it	lt
 8004dc2:	18e4      	addlt	r4, r4, r3
 8004dc4:	f000 fc08 	bl	80055d8 <__malloc_lock>
 8004dc8:	4a1c      	ldr	r2, [pc, #112]	; (8004e3c <_free_r+0x8c>)
 8004dca:	6813      	ldr	r3, [r2, #0]
 8004dcc:	b933      	cbnz	r3, 8004ddc <_free_r+0x2c>
 8004dce:	6063      	str	r3, [r4, #4]
 8004dd0:	6014      	str	r4, [r2, #0]
 8004dd2:	4628      	mov	r0, r5
 8004dd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dd8:	f000 bc04 	b.w	80055e4 <__malloc_unlock>
 8004ddc:	42a3      	cmp	r3, r4
 8004dde:	d908      	bls.n	8004df2 <_free_r+0x42>
 8004de0:	6820      	ldr	r0, [r4, #0]
 8004de2:	1821      	adds	r1, r4, r0
 8004de4:	428b      	cmp	r3, r1
 8004de6:	bf01      	itttt	eq
 8004de8:	6819      	ldreq	r1, [r3, #0]
 8004dea:	685b      	ldreq	r3, [r3, #4]
 8004dec:	1809      	addeq	r1, r1, r0
 8004dee:	6021      	streq	r1, [r4, #0]
 8004df0:	e7ed      	b.n	8004dce <_free_r+0x1e>
 8004df2:	461a      	mov	r2, r3
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	b10b      	cbz	r3, 8004dfc <_free_r+0x4c>
 8004df8:	42a3      	cmp	r3, r4
 8004dfa:	d9fa      	bls.n	8004df2 <_free_r+0x42>
 8004dfc:	6811      	ldr	r1, [r2, #0]
 8004dfe:	1850      	adds	r0, r2, r1
 8004e00:	42a0      	cmp	r0, r4
 8004e02:	d10b      	bne.n	8004e1c <_free_r+0x6c>
 8004e04:	6820      	ldr	r0, [r4, #0]
 8004e06:	4401      	add	r1, r0
 8004e08:	1850      	adds	r0, r2, r1
 8004e0a:	4283      	cmp	r3, r0
 8004e0c:	6011      	str	r1, [r2, #0]
 8004e0e:	d1e0      	bne.n	8004dd2 <_free_r+0x22>
 8004e10:	6818      	ldr	r0, [r3, #0]
 8004e12:	685b      	ldr	r3, [r3, #4]
 8004e14:	4401      	add	r1, r0
 8004e16:	6011      	str	r1, [r2, #0]
 8004e18:	6053      	str	r3, [r2, #4]
 8004e1a:	e7da      	b.n	8004dd2 <_free_r+0x22>
 8004e1c:	d902      	bls.n	8004e24 <_free_r+0x74>
 8004e1e:	230c      	movs	r3, #12
 8004e20:	602b      	str	r3, [r5, #0]
 8004e22:	e7d6      	b.n	8004dd2 <_free_r+0x22>
 8004e24:	6820      	ldr	r0, [r4, #0]
 8004e26:	1821      	adds	r1, r4, r0
 8004e28:	428b      	cmp	r3, r1
 8004e2a:	bf01      	itttt	eq
 8004e2c:	6819      	ldreq	r1, [r3, #0]
 8004e2e:	685b      	ldreq	r3, [r3, #4]
 8004e30:	1809      	addeq	r1, r1, r0
 8004e32:	6021      	streq	r1, [r4, #0]
 8004e34:	6063      	str	r3, [r4, #4]
 8004e36:	6054      	str	r4, [r2, #4]
 8004e38:	e7cb      	b.n	8004dd2 <_free_r+0x22>
 8004e3a:	bd38      	pop	{r3, r4, r5, pc}
 8004e3c:	200001e0 	.word	0x200001e0

08004e40 <sbrk_aligned>:
 8004e40:	b570      	push	{r4, r5, r6, lr}
 8004e42:	4e0e      	ldr	r6, [pc, #56]	; (8004e7c <sbrk_aligned+0x3c>)
 8004e44:	460c      	mov	r4, r1
 8004e46:	6831      	ldr	r1, [r6, #0]
 8004e48:	4605      	mov	r5, r0
 8004e4a:	b911      	cbnz	r1, 8004e52 <sbrk_aligned+0x12>
 8004e4c:	f000 fb7e 	bl	800554c <_sbrk_r>
 8004e50:	6030      	str	r0, [r6, #0]
 8004e52:	4621      	mov	r1, r4
 8004e54:	4628      	mov	r0, r5
 8004e56:	f000 fb79 	bl	800554c <_sbrk_r>
 8004e5a:	1c43      	adds	r3, r0, #1
 8004e5c:	d00a      	beq.n	8004e74 <sbrk_aligned+0x34>
 8004e5e:	1cc4      	adds	r4, r0, #3
 8004e60:	f024 0403 	bic.w	r4, r4, #3
 8004e64:	42a0      	cmp	r0, r4
 8004e66:	d007      	beq.n	8004e78 <sbrk_aligned+0x38>
 8004e68:	1a21      	subs	r1, r4, r0
 8004e6a:	4628      	mov	r0, r5
 8004e6c:	f000 fb6e 	bl	800554c <_sbrk_r>
 8004e70:	3001      	adds	r0, #1
 8004e72:	d101      	bne.n	8004e78 <sbrk_aligned+0x38>
 8004e74:	f04f 34ff 	mov.w	r4, #4294967295
 8004e78:	4620      	mov	r0, r4
 8004e7a:	bd70      	pop	{r4, r5, r6, pc}
 8004e7c:	200001e4 	.word	0x200001e4

08004e80 <_malloc_r>:
 8004e80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004e84:	1ccd      	adds	r5, r1, #3
 8004e86:	f025 0503 	bic.w	r5, r5, #3
 8004e8a:	3508      	adds	r5, #8
 8004e8c:	2d0c      	cmp	r5, #12
 8004e8e:	bf38      	it	cc
 8004e90:	250c      	movcc	r5, #12
 8004e92:	2d00      	cmp	r5, #0
 8004e94:	4607      	mov	r7, r0
 8004e96:	db01      	blt.n	8004e9c <_malloc_r+0x1c>
 8004e98:	42a9      	cmp	r1, r5
 8004e9a:	d905      	bls.n	8004ea8 <_malloc_r+0x28>
 8004e9c:	230c      	movs	r3, #12
 8004e9e:	2600      	movs	r6, #0
 8004ea0:	603b      	str	r3, [r7, #0]
 8004ea2:	4630      	mov	r0, r6
 8004ea4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ea8:	4e2e      	ldr	r6, [pc, #184]	; (8004f64 <_malloc_r+0xe4>)
 8004eaa:	f000 fb95 	bl	80055d8 <__malloc_lock>
 8004eae:	6833      	ldr	r3, [r6, #0]
 8004eb0:	461c      	mov	r4, r3
 8004eb2:	bb34      	cbnz	r4, 8004f02 <_malloc_r+0x82>
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	4638      	mov	r0, r7
 8004eb8:	f7ff ffc2 	bl	8004e40 <sbrk_aligned>
 8004ebc:	1c43      	adds	r3, r0, #1
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	d14d      	bne.n	8004f5e <_malloc_r+0xde>
 8004ec2:	6834      	ldr	r4, [r6, #0]
 8004ec4:	4626      	mov	r6, r4
 8004ec6:	2e00      	cmp	r6, #0
 8004ec8:	d140      	bne.n	8004f4c <_malloc_r+0xcc>
 8004eca:	6823      	ldr	r3, [r4, #0]
 8004ecc:	4631      	mov	r1, r6
 8004ece:	4638      	mov	r0, r7
 8004ed0:	eb04 0803 	add.w	r8, r4, r3
 8004ed4:	f000 fb3a 	bl	800554c <_sbrk_r>
 8004ed8:	4580      	cmp	r8, r0
 8004eda:	d13a      	bne.n	8004f52 <_malloc_r+0xd2>
 8004edc:	6821      	ldr	r1, [r4, #0]
 8004ede:	3503      	adds	r5, #3
 8004ee0:	1a6d      	subs	r5, r5, r1
 8004ee2:	f025 0503 	bic.w	r5, r5, #3
 8004ee6:	3508      	adds	r5, #8
 8004ee8:	2d0c      	cmp	r5, #12
 8004eea:	bf38      	it	cc
 8004eec:	250c      	movcc	r5, #12
 8004eee:	4638      	mov	r0, r7
 8004ef0:	4629      	mov	r1, r5
 8004ef2:	f7ff ffa5 	bl	8004e40 <sbrk_aligned>
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d02b      	beq.n	8004f52 <_malloc_r+0xd2>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	442b      	add	r3, r5
 8004efe:	6023      	str	r3, [r4, #0]
 8004f00:	e00e      	b.n	8004f20 <_malloc_r+0xa0>
 8004f02:	6822      	ldr	r2, [r4, #0]
 8004f04:	1b52      	subs	r2, r2, r5
 8004f06:	d41e      	bmi.n	8004f46 <_malloc_r+0xc6>
 8004f08:	2a0b      	cmp	r2, #11
 8004f0a:	d916      	bls.n	8004f3a <_malloc_r+0xba>
 8004f0c:	1961      	adds	r1, r4, r5
 8004f0e:	42a3      	cmp	r3, r4
 8004f10:	6025      	str	r5, [r4, #0]
 8004f12:	bf18      	it	ne
 8004f14:	6059      	strne	r1, [r3, #4]
 8004f16:	6863      	ldr	r3, [r4, #4]
 8004f18:	bf08      	it	eq
 8004f1a:	6031      	streq	r1, [r6, #0]
 8004f1c:	5162      	str	r2, [r4, r5]
 8004f1e:	604b      	str	r3, [r1, #4]
 8004f20:	4638      	mov	r0, r7
 8004f22:	f104 060b 	add.w	r6, r4, #11
 8004f26:	f000 fb5d 	bl	80055e4 <__malloc_unlock>
 8004f2a:	f026 0607 	bic.w	r6, r6, #7
 8004f2e:	1d23      	adds	r3, r4, #4
 8004f30:	1af2      	subs	r2, r6, r3
 8004f32:	d0b6      	beq.n	8004ea2 <_malloc_r+0x22>
 8004f34:	1b9b      	subs	r3, r3, r6
 8004f36:	50a3      	str	r3, [r4, r2]
 8004f38:	e7b3      	b.n	8004ea2 <_malloc_r+0x22>
 8004f3a:	6862      	ldr	r2, [r4, #4]
 8004f3c:	42a3      	cmp	r3, r4
 8004f3e:	bf0c      	ite	eq
 8004f40:	6032      	streq	r2, [r6, #0]
 8004f42:	605a      	strne	r2, [r3, #4]
 8004f44:	e7ec      	b.n	8004f20 <_malloc_r+0xa0>
 8004f46:	4623      	mov	r3, r4
 8004f48:	6864      	ldr	r4, [r4, #4]
 8004f4a:	e7b2      	b.n	8004eb2 <_malloc_r+0x32>
 8004f4c:	4634      	mov	r4, r6
 8004f4e:	6876      	ldr	r6, [r6, #4]
 8004f50:	e7b9      	b.n	8004ec6 <_malloc_r+0x46>
 8004f52:	230c      	movs	r3, #12
 8004f54:	4638      	mov	r0, r7
 8004f56:	603b      	str	r3, [r7, #0]
 8004f58:	f000 fb44 	bl	80055e4 <__malloc_unlock>
 8004f5c:	e7a1      	b.n	8004ea2 <_malloc_r+0x22>
 8004f5e:	6025      	str	r5, [r4, #0]
 8004f60:	e7de      	b.n	8004f20 <_malloc_r+0xa0>
 8004f62:	bf00      	nop
 8004f64:	200001e0 	.word	0x200001e0

08004f68 <__ssputs_r>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	688e      	ldr	r6, [r1, #8]
 8004f6e:	4682      	mov	sl, r0
 8004f70:	429e      	cmp	r6, r3
 8004f72:	460c      	mov	r4, r1
 8004f74:	4690      	mov	r8, r2
 8004f76:	461f      	mov	r7, r3
 8004f78:	d838      	bhi.n	8004fec <__ssputs_r+0x84>
 8004f7a:	898a      	ldrh	r2, [r1, #12]
 8004f7c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004f80:	d032      	beq.n	8004fe8 <__ssputs_r+0x80>
 8004f82:	6825      	ldr	r5, [r4, #0]
 8004f84:	6909      	ldr	r1, [r1, #16]
 8004f86:	3301      	adds	r3, #1
 8004f88:	eba5 0901 	sub.w	r9, r5, r1
 8004f8c:	6965      	ldr	r5, [r4, #20]
 8004f8e:	444b      	add	r3, r9
 8004f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004f98:	106d      	asrs	r5, r5, #1
 8004f9a:	429d      	cmp	r5, r3
 8004f9c:	bf38      	it	cc
 8004f9e:	461d      	movcc	r5, r3
 8004fa0:	0553      	lsls	r3, r2, #21
 8004fa2:	d531      	bpl.n	8005008 <__ssputs_r+0xa0>
 8004fa4:	4629      	mov	r1, r5
 8004fa6:	f7ff ff6b 	bl	8004e80 <_malloc_r>
 8004faa:	4606      	mov	r6, r0
 8004fac:	b950      	cbnz	r0, 8004fc4 <__ssputs_r+0x5c>
 8004fae:	230c      	movs	r3, #12
 8004fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8004fb4:	f8ca 3000 	str.w	r3, [sl]
 8004fb8:	89a3      	ldrh	r3, [r4, #12]
 8004fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004fbe:	81a3      	strh	r3, [r4, #12]
 8004fc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc4:	464a      	mov	r2, r9
 8004fc6:	6921      	ldr	r1, [r4, #16]
 8004fc8:	f000 fade 	bl	8005588 <memcpy>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004fd2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd6:	81a3      	strh	r3, [r4, #12]
 8004fd8:	6126      	str	r6, [r4, #16]
 8004fda:	444e      	add	r6, r9
 8004fdc:	6026      	str	r6, [r4, #0]
 8004fde:	463e      	mov	r6, r7
 8004fe0:	6165      	str	r5, [r4, #20]
 8004fe2:	eba5 0509 	sub.w	r5, r5, r9
 8004fe6:	60a5      	str	r5, [r4, #8]
 8004fe8:	42be      	cmp	r6, r7
 8004fea:	d900      	bls.n	8004fee <__ssputs_r+0x86>
 8004fec:	463e      	mov	r6, r7
 8004fee:	4632      	mov	r2, r6
 8004ff0:	4641      	mov	r1, r8
 8004ff2:	6820      	ldr	r0, [r4, #0]
 8004ff4:	f000 fad6 	bl	80055a4 <memmove>
 8004ff8:	68a3      	ldr	r3, [r4, #8]
 8004ffa:	2000      	movs	r0, #0
 8004ffc:	1b9b      	subs	r3, r3, r6
 8004ffe:	60a3      	str	r3, [r4, #8]
 8005000:	6823      	ldr	r3, [r4, #0]
 8005002:	4433      	add	r3, r6
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	e7db      	b.n	8004fc0 <__ssputs_r+0x58>
 8005008:	462a      	mov	r2, r5
 800500a:	f000 faf1 	bl	80055f0 <_realloc_r>
 800500e:	4606      	mov	r6, r0
 8005010:	2800      	cmp	r0, #0
 8005012:	d1e1      	bne.n	8004fd8 <__ssputs_r+0x70>
 8005014:	4650      	mov	r0, sl
 8005016:	6921      	ldr	r1, [r4, #16]
 8005018:	f7ff feca 	bl	8004db0 <_free_r>
 800501c:	e7c7      	b.n	8004fae <__ssputs_r+0x46>
	...

08005020 <_svfiprintf_r>:
 8005020:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005024:	4698      	mov	r8, r3
 8005026:	898b      	ldrh	r3, [r1, #12]
 8005028:	4607      	mov	r7, r0
 800502a:	061b      	lsls	r3, r3, #24
 800502c:	460d      	mov	r5, r1
 800502e:	4614      	mov	r4, r2
 8005030:	b09d      	sub	sp, #116	; 0x74
 8005032:	d50e      	bpl.n	8005052 <_svfiprintf_r+0x32>
 8005034:	690b      	ldr	r3, [r1, #16]
 8005036:	b963      	cbnz	r3, 8005052 <_svfiprintf_r+0x32>
 8005038:	2140      	movs	r1, #64	; 0x40
 800503a:	f7ff ff21 	bl	8004e80 <_malloc_r>
 800503e:	6028      	str	r0, [r5, #0]
 8005040:	6128      	str	r0, [r5, #16]
 8005042:	b920      	cbnz	r0, 800504e <_svfiprintf_r+0x2e>
 8005044:	230c      	movs	r3, #12
 8005046:	603b      	str	r3, [r7, #0]
 8005048:	f04f 30ff 	mov.w	r0, #4294967295
 800504c:	e0d1      	b.n	80051f2 <_svfiprintf_r+0x1d2>
 800504e:	2340      	movs	r3, #64	; 0x40
 8005050:	616b      	str	r3, [r5, #20]
 8005052:	2300      	movs	r3, #0
 8005054:	9309      	str	r3, [sp, #36]	; 0x24
 8005056:	2320      	movs	r3, #32
 8005058:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800505c:	2330      	movs	r3, #48	; 0x30
 800505e:	f04f 0901 	mov.w	r9, #1
 8005062:	f8cd 800c 	str.w	r8, [sp, #12]
 8005066:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800520c <_svfiprintf_r+0x1ec>
 800506a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800506e:	4623      	mov	r3, r4
 8005070:	469a      	mov	sl, r3
 8005072:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005076:	b10a      	cbz	r2, 800507c <_svfiprintf_r+0x5c>
 8005078:	2a25      	cmp	r2, #37	; 0x25
 800507a:	d1f9      	bne.n	8005070 <_svfiprintf_r+0x50>
 800507c:	ebba 0b04 	subs.w	fp, sl, r4
 8005080:	d00b      	beq.n	800509a <_svfiprintf_r+0x7a>
 8005082:	465b      	mov	r3, fp
 8005084:	4622      	mov	r2, r4
 8005086:	4629      	mov	r1, r5
 8005088:	4638      	mov	r0, r7
 800508a:	f7ff ff6d 	bl	8004f68 <__ssputs_r>
 800508e:	3001      	adds	r0, #1
 8005090:	f000 80aa 	beq.w	80051e8 <_svfiprintf_r+0x1c8>
 8005094:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005096:	445a      	add	r2, fp
 8005098:	9209      	str	r2, [sp, #36]	; 0x24
 800509a:	f89a 3000 	ldrb.w	r3, [sl]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 80a2 	beq.w	80051e8 <_svfiprintf_r+0x1c8>
 80050a4:	2300      	movs	r3, #0
 80050a6:	f04f 32ff 	mov.w	r2, #4294967295
 80050aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80050ae:	f10a 0a01 	add.w	sl, sl, #1
 80050b2:	9304      	str	r3, [sp, #16]
 80050b4:	9307      	str	r3, [sp, #28]
 80050b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80050ba:	931a      	str	r3, [sp, #104]	; 0x68
 80050bc:	4654      	mov	r4, sl
 80050be:	2205      	movs	r2, #5
 80050c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80050c4:	4851      	ldr	r0, [pc, #324]	; (800520c <_svfiprintf_r+0x1ec>)
 80050c6:	f000 fa51 	bl	800556c <memchr>
 80050ca:	9a04      	ldr	r2, [sp, #16]
 80050cc:	b9d8      	cbnz	r0, 8005106 <_svfiprintf_r+0xe6>
 80050ce:	06d0      	lsls	r0, r2, #27
 80050d0:	bf44      	itt	mi
 80050d2:	2320      	movmi	r3, #32
 80050d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050d8:	0711      	lsls	r1, r2, #28
 80050da:	bf44      	itt	mi
 80050dc:	232b      	movmi	r3, #43	; 0x2b
 80050de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80050e2:	f89a 3000 	ldrb.w	r3, [sl]
 80050e6:	2b2a      	cmp	r3, #42	; 0x2a
 80050e8:	d015      	beq.n	8005116 <_svfiprintf_r+0xf6>
 80050ea:	4654      	mov	r4, sl
 80050ec:	2000      	movs	r0, #0
 80050ee:	f04f 0c0a 	mov.w	ip, #10
 80050f2:	9a07      	ldr	r2, [sp, #28]
 80050f4:	4621      	mov	r1, r4
 80050f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80050fa:	3b30      	subs	r3, #48	; 0x30
 80050fc:	2b09      	cmp	r3, #9
 80050fe:	d94e      	bls.n	800519e <_svfiprintf_r+0x17e>
 8005100:	b1b0      	cbz	r0, 8005130 <_svfiprintf_r+0x110>
 8005102:	9207      	str	r2, [sp, #28]
 8005104:	e014      	b.n	8005130 <_svfiprintf_r+0x110>
 8005106:	eba0 0308 	sub.w	r3, r0, r8
 800510a:	fa09 f303 	lsl.w	r3, r9, r3
 800510e:	4313      	orrs	r3, r2
 8005110:	46a2      	mov	sl, r4
 8005112:	9304      	str	r3, [sp, #16]
 8005114:	e7d2      	b.n	80050bc <_svfiprintf_r+0x9c>
 8005116:	9b03      	ldr	r3, [sp, #12]
 8005118:	1d19      	adds	r1, r3, #4
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	9103      	str	r1, [sp, #12]
 800511e:	2b00      	cmp	r3, #0
 8005120:	bfbb      	ittet	lt
 8005122:	425b      	neglt	r3, r3
 8005124:	f042 0202 	orrlt.w	r2, r2, #2
 8005128:	9307      	strge	r3, [sp, #28]
 800512a:	9307      	strlt	r3, [sp, #28]
 800512c:	bfb8      	it	lt
 800512e:	9204      	strlt	r2, [sp, #16]
 8005130:	7823      	ldrb	r3, [r4, #0]
 8005132:	2b2e      	cmp	r3, #46	; 0x2e
 8005134:	d10c      	bne.n	8005150 <_svfiprintf_r+0x130>
 8005136:	7863      	ldrb	r3, [r4, #1]
 8005138:	2b2a      	cmp	r3, #42	; 0x2a
 800513a:	d135      	bne.n	80051a8 <_svfiprintf_r+0x188>
 800513c:	9b03      	ldr	r3, [sp, #12]
 800513e:	3402      	adds	r4, #2
 8005140:	1d1a      	adds	r2, r3, #4
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	9203      	str	r2, [sp, #12]
 8005146:	2b00      	cmp	r3, #0
 8005148:	bfb8      	it	lt
 800514a:	f04f 33ff 	movlt.w	r3, #4294967295
 800514e:	9305      	str	r3, [sp, #20]
 8005150:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005210 <_svfiprintf_r+0x1f0>
 8005154:	2203      	movs	r2, #3
 8005156:	4650      	mov	r0, sl
 8005158:	7821      	ldrb	r1, [r4, #0]
 800515a:	f000 fa07 	bl	800556c <memchr>
 800515e:	b140      	cbz	r0, 8005172 <_svfiprintf_r+0x152>
 8005160:	2340      	movs	r3, #64	; 0x40
 8005162:	eba0 000a 	sub.w	r0, r0, sl
 8005166:	fa03 f000 	lsl.w	r0, r3, r0
 800516a:	9b04      	ldr	r3, [sp, #16]
 800516c:	3401      	adds	r4, #1
 800516e:	4303      	orrs	r3, r0
 8005170:	9304      	str	r3, [sp, #16]
 8005172:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005176:	2206      	movs	r2, #6
 8005178:	4826      	ldr	r0, [pc, #152]	; (8005214 <_svfiprintf_r+0x1f4>)
 800517a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800517e:	f000 f9f5 	bl	800556c <memchr>
 8005182:	2800      	cmp	r0, #0
 8005184:	d038      	beq.n	80051f8 <_svfiprintf_r+0x1d8>
 8005186:	4b24      	ldr	r3, [pc, #144]	; (8005218 <_svfiprintf_r+0x1f8>)
 8005188:	bb1b      	cbnz	r3, 80051d2 <_svfiprintf_r+0x1b2>
 800518a:	9b03      	ldr	r3, [sp, #12]
 800518c:	3307      	adds	r3, #7
 800518e:	f023 0307 	bic.w	r3, r3, #7
 8005192:	3308      	adds	r3, #8
 8005194:	9303      	str	r3, [sp, #12]
 8005196:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005198:	4433      	add	r3, r6
 800519a:	9309      	str	r3, [sp, #36]	; 0x24
 800519c:	e767      	b.n	800506e <_svfiprintf_r+0x4e>
 800519e:	460c      	mov	r4, r1
 80051a0:	2001      	movs	r0, #1
 80051a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80051a6:	e7a5      	b.n	80050f4 <_svfiprintf_r+0xd4>
 80051a8:	2300      	movs	r3, #0
 80051aa:	f04f 0c0a 	mov.w	ip, #10
 80051ae:	4619      	mov	r1, r3
 80051b0:	3401      	adds	r4, #1
 80051b2:	9305      	str	r3, [sp, #20]
 80051b4:	4620      	mov	r0, r4
 80051b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80051ba:	3a30      	subs	r2, #48	; 0x30
 80051bc:	2a09      	cmp	r2, #9
 80051be:	d903      	bls.n	80051c8 <_svfiprintf_r+0x1a8>
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d0c5      	beq.n	8005150 <_svfiprintf_r+0x130>
 80051c4:	9105      	str	r1, [sp, #20]
 80051c6:	e7c3      	b.n	8005150 <_svfiprintf_r+0x130>
 80051c8:	4604      	mov	r4, r0
 80051ca:	2301      	movs	r3, #1
 80051cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80051d0:	e7f0      	b.n	80051b4 <_svfiprintf_r+0x194>
 80051d2:	ab03      	add	r3, sp, #12
 80051d4:	9300      	str	r3, [sp, #0]
 80051d6:	462a      	mov	r2, r5
 80051d8:	4638      	mov	r0, r7
 80051da:	4b10      	ldr	r3, [pc, #64]	; (800521c <_svfiprintf_r+0x1fc>)
 80051dc:	a904      	add	r1, sp, #16
 80051de:	f3af 8000 	nop.w
 80051e2:	1c42      	adds	r2, r0, #1
 80051e4:	4606      	mov	r6, r0
 80051e6:	d1d6      	bne.n	8005196 <_svfiprintf_r+0x176>
 80051e8:	89ab      	ldrh	r3, [r5, #12]
 80051ea:	065b      	lsls	r3, r3, #25
 80051ec:	f53f af2c 	bmi.w	8005048 <_svfiprintf_r+0x28>
 80051f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051f2:	b01d      	add	sp, #116	; 0x74
 80051f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051f8:	ab03      	add	r3, sp, #12
 80051fa:	9300      	str	r3, [sp, #0]
 80051fc:	462a      	mov	r2, r5
 80051fe:	4638      	mov	r0, r7
 8005200:	4b06      	ldr	r3, [pc, #24]	; (800521c <_svfiprintf_r+0x1fc>)
 8005202:	a904      	add	r1, sp, #16
 8005204:	f000 f87c 	bl	8005300 <_printf_i>
 8005208:	e7eb      	b.n	80051e2 <_svfiprintf_r+0x1c2>
 800520a:	bf00      	nop
 800520c:	080057b8 	.word	0x080057b8
 8005210:	080057be 	.word	0x080057be
 8005214:	080057c2 	.word	0x080057c2
 8005218:	00000000 	.word	0x00000000
 800521c:	08004f69 	.word	0x08004f69

08005220 <_printf_common>:
 8005220:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005224:	4616      	mov	r6, r2
 8005226:	4699      	mov	r9, r3
 8005228:	688a      	ldr	r2, [r1, #8]
 800522a:	690b      	ldr	r3, [r1, #16]
 800522c:	4607      	mov	r7, r0
 800522e:	4293      	cmp	r3, r2
 8005230:	bfb8      	it	lt
 8005232:	4613      	movlt	r3, r2
 8005234:	6033      	str	r3, [r6, #0]
 8005236:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800523a:	460c      	mov	r4, r1
 800523c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005240:	b10a      	cbz	r2, 8005246 <_printf_common+0x26>
 8005242:	3301      	adds	r3, #1
 8005244:	6033      	str	r3, [r6, #0]
 8005246:	6823      	ldr	r3, [r4, #0]
 8005248:	0699      	lsls	r1, r3, #26
 800524a:	bf42      	ittt	mi
 800524c:	6833      	ldrmi	r3, [r6, #0]
 800524e:	3302      	addmi	r3, #2
 8005250:	6033      	strmi	r3, [r6, #0]
 8005252:	6825      	ldr	r5, [r4, #0]
 8005254:	f015 0506 	ands.w	r5, r5, #6
 8005258:	d106      	bne.n	8005268 <_printf_common+0x48>
 800525a:	f104 0a19 	add.w	sl, r4, #25
 800525e:	68e3      	ldr	r3, [r4, #12]
 8005260:	6832      	ldr	r2, [r6, #0]
 8005262:	1a9b      	subs	r3, r3, r2
 8005264:	42ab      	cmp	r3, r5
 8005266:	dc28      	bgt.n	80052ba <_printf_common+0x9a>
 8005268:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800526c:	1e13      	subs	r3, r2, #0
 800526e:	6822      	ldr	r2, [r4, #0]
 8005270:	bf18      	it	ne
 8005272:	2301      	movne	r3, #1
 8005274:	0692      	lsls	r2, r2, #26
 8005276:	d42d      	bmi.n	80052d4 <_printf_common+0xb4>
 8005278:	4649      	mov	r1, r9
 800527a:	4638      	mov	r0, r7
 800527c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005280:	47c0      	blx	r8
 8005282:	3001      	adds	r0, #1
 8005284:	d020      	beq.n	80052c8 <_printf_common+0xa8>
 8005286:	6823      	ldr	r3, [r4, #0]
 8005288:	68e5      	ldr	r5, [r4, #12]
 800528a:	f003 0306 	and.w	r3, r3, #6
 800528e:	2b04      	cmp	r3, #4
 8005290:	bf18      	it	ne
 8005292:	2500      	movne	r5, #0
 8005294:	6832      	ldr	r2, [r6, #0]
 8005296:	f04f 0600 	mov.w	r6, #0
 800529a:	68a3      	ldr	r3, [r4, #8]
 800529c:	bf08      	it	eq
 800529e:	1aad      	subeq	r5, r5, r2
 80052a0:	6922      	ldr	r2, [r4, #16]
 80052a2:	bf08      	it	eq
 80052a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80052a8:	4293      	cmp	r3, r2
 80052aa:	bfc4      	itt	gt
 80052ac:	1a9b      	subgt	r3, r3, r2
 80052ae:	18ed      	addgt	r5, r5, r3
 80052b0:	341a      	adds	r4, #26
 80052b2:	42b5      	cmp	r5, r6
 80052b4:	d11a      	bne.n	80052ec <_printf_common+0xcc>
 80052b6:	2000      	movs	r0, #0
 80052b8:	e008      	b.n	80052cc <_printf_common+0xac>
 80052ba:	2301      	movs	r3, #1
 80052bc:	4652      	mov	r2, sl
 80052be:	4649      	mov	r1, r9
 80052c0:	4638      	mov	r0, r7
 80052c2:	47c0      	blx	r8
 80052c4:	3001      	adds	r0, #1
 80052c6:	d103      	bne.n	80052d0 <_printf_common+0xb0>
 80052c8:	f04f 30ff 	mov.w	r0, #4294967295
 80052cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052d0:	3501      	adds	r5, #1
 80052d2:	e7c4      	b.n	800525e <_printf_common+0x3e>
 80052d4:	2030      	movs	r0, #48	; 0x30
 80052d6:	18e1      	adds	r1, r4, r3
 80052d8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80052dc:	1c5a      	adds	r2, r3, #1
 80052de:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80052e2:	4422      	add	r2, r4
 80052e4:	3302      	adds	r3, #2
 80052e6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80052ea:	e7c5      	b.n	8005278 <_printf_common+0x58>
 80052ec:	2301      	movs	r3, #1
 80052ee:	4622      	mov	r2, r4
 80052f0:	4649      	mov	r1, r9
 80052f2:	4638      	mov	r0, r7
 80052f4:	47c0      	blx	r8
 80052f6:	3001      	adds	r0, #1
 80052f8:	d0e6      	beq.n	80052c8 <_printf_common+0xa8>
 80052fa:	3601      	adds	r6, #1
 80052fc:	e7d9      	b.n	80052b2 <_printf_common+0x92>
	...

08005300 <_printf_i>:
 8005300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005304:	7e0f      	ldrb	r7, [r1, #24]
 8005306:	4691      	mov	r9, r2
 8005308:	2f78      	cmp	r7, #120	; 0x78
 800530a:	4680      	mov	r8, r0
 800530c:	460c      	mov	r4, r1
 800530e:	469a      	mov	sl, r3
 8005310:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005316:	d807      	bhi.n	8005328 <_printf_i+0x28>
 8005318:	2f62      	cmp	r7, #98	; 0x62
 800531a:	d80a      	bhi.n	8005332 <_printf_i+0x32>
 800531c:	2f00      	cmp	r7, #0
 800531e:	f000 80d9 	beq.w	80054d4 <_printf_i+0x1d4>
 8005322:	2f58      	cmp	r7, #88	; 0x58
 8005324:	f000 80a4 	beq.w	8005470 <_printf_i+0x170>
 8005328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800532c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005330:	e03a      	b.n	80053a8 <_printf_i+0xa8>
 8005332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005336:	2b15      	cmp	r3, #21
 8005338:	d8f6      	bhi.n	8005328 <_printf_i+0x28>
 800533a:	a101      	add	r1, pc, #4	; (adr r1, 8005340 <_printf_i+0x40>)
 800533c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005340:	08005399 	.word	0x08005399
 8005344:	080053ad 	.word	0x080053ad
 8005348:	08005329 	.word	0x08005329
 800534c:	08005329 	.word	0x08005329
 8005350:	08005329 	.word	0x08005329
 8005354:	08005329 	.word	0x08005329
 8005358:	080053ad 	.word	0x080053ad
 800535c:	08005329 	.word	0x08005329
 8005360:	08005329 	.word	0x08005329
 8005364:	08005329 	.word	0x08005329
 8005368:	08005329 	.word	0x08005329
 800536c:	080054bb 	.word	0x080054bb
 8005370:	080053dd 	.word	0x080053dd
 8005374:	0800549d 	.word	0x0800549d
 8005378:	08005329 	.word	0x08005329
 800537c:	08005329 	.word	0x08005329
 8005380:	080054dd 	.word	0x080054dd
 8005384:	08005329 	.word	0x08005329
 8005388:	080053dd 	.word	0x080053dd
 800538c:	08005329 	.word	0x08005329
 8005390:	08005329 	.word	0x08005329
 8005394:	080054a5 	.word	0x080054a5
 8005398:	682b      	ldr	r3, [r5, #0]
 800539a:	1d1a      	adds	r2, r3, #4
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	602a      	str	r2, [r5, #0]
 80053a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80053a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0a4      	b.n	80054f6 <_printf_i+0x1f6>
 80053ac:	6820      	ldr	r0, [r4, #0]
 80053ae:	6829      	ldr	r1, [r5, #0]
 80053b0:	0606      	lsls	r6, r0, #24
 80053b2:	f101 0304 	add.w	r3, r1, #4
 80053b6:	d50a      	bpl.n	80053ce <_printf_i+0xce>
 80053b8:	680e      	ldr	r6, [r1, #0]
 80053ba:	602b      	str	r3, [r5, #0]
 80053bc:	2e00      	cmp	r6, #0
 80053be:	da03      	bge.n	80053c8 <_printf_i+0xc8>
 80053c0:	232d      	movs	r3, #45	; 0x2d
 80053c2:	4276      	negs	r6, r6
 80053c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80053c8:	230a      	movs	r3, #10
 80053ca:	485e      	ldr	r0, [pc, #376]	; (8005544 <_printf_i+0x244>)
 80053cc:	e019      	b.n	8005402 <_printf_i+0x102>
 80053ce:	680e      	ldr	r6, [r1, #0]
 80053d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80053d4:	602b      	str	r3, [r5, #0]
 80053d6:	bf18      	it	ne
 80053d8:	b236      	sxthne	r6, r6
 80053da:	e7ef      	b.n	80053bc <_printf_i+0xbc>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	6820      	ldr	r0, [r4, #0]
 80053e0:	1d19      	adds	r1, r3, #4
 80053e2:	6029      	str	r1, [r5, #0]
 80053e4:	0601      	lsls	r1, r0, #24
 80053e6:	d501      	bpl.n	80053ec <_printf_i+0xec>
 80053e8:	681e      	ldr	r6, [r3, #0]
 80053ea:	e002      	b.n	80053f2 <_printf_i+0xf2>
 80053ec:	0646      	lsls	r6, r0, #25
 80053ee:	d5fb      	bpl.n	80053e8 <_printf_i+0xe8>
 80053f0:	881e      	ldrh	r6, [r3, #0]
 80053f2:	2f6f      	cmp	r7, #111	; 0x6f
 80053f4:	bf0c      	ite	eq
 80053f6:	2308      	moveq	r3, #8
 80053f8:	230a      	movne	r3, #10
 80053fa:	4852      	ldr	r0, [pc, #328]	; (8005544 <_printf_i+0x244>)
 80053fc:	2100      	movs	r1, #0
 80053fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005402:	6865      	ldr	r5, [r4, #4]
 8005404:	2d00      	cmp	r5, #0
 8005406:	bfa8      	it	ge
 8005408:	6821      	ldrge	r1, [r4, #0]
 800540a:	60a5      	str	r5, [r4, #8]
 800540c:	bfa4      	itt	ge
 800540e:	f021 0104 	bicge.w	r1, r1, #4
 8005412:	6021      	strge	r1, [r4, #0]
 8005414:	b90e      	cbnz	r6, 800541a <_printf_i+0x11a>
 8005416:	2d00      	cmp	r5, #0
 8005418:	d04d      	beq.n	80054b6 <_printf_i+0x1b6>
 800541a:	4615      	mov	r5, r2
 800541c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005420:	fb03 6711 	mls	r7, r3, r1, r6
 8005424:	5dc7      	ldrb	r7, [r0, r7]
 8005426:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800542a:	4637      	mov	r7, r6
 800542c:	42bb      	cmp	r3, r7
 800542e:	460e      	mov	r6, r1
 8005430:	d9f4      	bls.n	800541c <_printf_i+0x11c>
 8005432:	2b08      	cmp	r3, #8
 8005434:	d10b      	bne.n	800544e <_printf_i+0x14e>
 8005436:	6823      	ldr	r3, [r4, #0]
 8005438:	07de      	lsls	r6, r3, #31
 800543a:	d508      	bpl.n	800544e <_printf_i+0x14e>
 800543c:	6923      	ldr	r3, [r4, #16]
 800543e:	6861      	ldr	r1, [r4, #4]
 8005440:	4299      	cmp	r1, r3
 8005442:	bfde      	ittt	le
 8005444:	2330      	movle	r3, #48	; 0x30
 8005446:	f805 3c01 	strble.w	r3, [r5, #-1]
 800544a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800544e:	1b52      	subs	r2, r2, r5
 8005450:	6122      	str	r2, [r4, #16]
 8005452:	464b      	mov	r3, r9
 8005454:	4621      	mov	r1, r4
 8005456:	4640      	mov	r0, r8
 8005458:	f8cd a000 	str.w	sl, [sp]
 800545c:	aa03      	add	r2, sp, #12
 800545e:	f7ff fedf 	bl	8005220 <_printf_common>
 8005462:	3001      	adds	r0, #1
 8005464:	d14c      	bne.n	8005500 <_printf_i+0x200>
 8005466:	f04f 30ff 	mov.w	r0, #4294967295
 800546a:	b004      	add	sp, #16
 800546c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005470:	4834      	ldr	r0, [pc, #208]	; (8005544 <_printf_i+0x244>)
 8005472:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005476:	6829      	ldr	r1, [r5, #0]
 8005478:	6823      	ldr	r3, [r4, #0]
 800547a:	f851 6b04 	ldr.w	r6, [r1], #4
 800547e:	6029      	str	r1, [r5, #0]
 8005480:	061d      	lsls	r5, r3, #24
 8005482:	d514      	bpl.n	80054ae <_printf_i+0x1ae>
 8005484:	07df      	lsls	r7, r3, #31
 8005486:	bf44      	itt	mi
 8005488:	f043 0320 	orrmi.w	r3, r3, #32
 800548c:	6023      	strmi	r3, [r4, #0]
 800548e:	b91e      	cbnz	r6, 8005498 <_printf_i+0x198>
 8005490:	6823      	ldr	r3, [r4, #0]
 8005492:	f023 0320 	bic.w	r3, r3, #32
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	2310      	movs	r3, #16
 800549a:	e7af      	b.n	80053fc <_printf_i+0xfc>
 800549c:	6823      	ldr	r3, [r4, #0]
 800549e:	f043 0320 	orr.w	r3, r3, #32
 80054a2:	6023      	str	r3, [r4, #0]
 80054a4:	2378      	movs	r3, #120	; 0x78
 80054a6:	4828      	ldr	r0, [pc, #160]	; (8005548 <_printf_i+0x248>)
 80054a8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80054ac:	e7e3      	b.n	8005476 <_printf_i+0x176>
 80054ae:	0659      	lsls	r1, r3, #25
 80054b0:	bf48      	it	mi
 80054b2:	b2b6      	uxthmi	r6, r6
 80054b4:	e7e6      	b.n	8005484 <_printf_i+0x184>
 80054b6:	4615      	mov	r5, r2
 80054b8:	e7bb      	b.n	8005432 <_printf_i+0x132>
 80054ba:	682b      	ldr	r3, [r5, #0]
 80054bc:	6826      	ldr	r6, [r4, #0]
 80054be:	1d18      	adds	r0, r3, #4
 80054c0:	6961      	ldr	r1, [r4, #20]
 80054c2:	6028      	str	r0, [r5, #0]
 80054c4:	0635      	lsls	r5, r6, #24
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	d501      	bpl.n	80054ce <_printf_i+0x1ce>
 80054ca:	6019      	str	r1, [r3, #0]
 80054cc:	e002      	b.n	80054d4 <_printf_i+0x1d4>
 80054ce:	0670      	lsls	r0, r6, #25
 80054d0:	d5fb      	bpl.n	80054ca <_printf_i+0x1ca>
 80054d2:	8019      	strh	r1, [r3, #0]
 80054d4:	2300      	movs	r3, #0
 80054d6:	4615      	mov	r5, r2
 80054d8:	6123      	str	r3, [r4, #16]
 80054da:	e7ba      	b.n	8005452 <_printf_i+0x152>
 80054dc:	682b      	ldr	r3, [r5, #0]
 80054de:	2100      	movs	r1, #0
 80054e0:	1d1a      	adds	r2, r3, #4
 80054e2:	602a      	str	r2, [r5, #0]
 80054e4:	681d      	ldr	r5, [r3, #0]
 80054e6:	6862      	ldr	r2, [r4, #4]
 80054e8:	4628      	mov	r0, r5
 80054ea:	f000 f83f 	bl	800556c <memchr>
 80054ee:	b108      	cbz	r0, 80054f4 <_printf_i+0x1f4>
 80054f0:	1b40      	subs	r0, r0, r5
 80054f2:	6060      	str	r0, [r4, #4]
 80054f4:	6863      	ldr	r3, [r4, #4]
 80054f6:	6123      	str	r3, [r4, #16]
 80054f8:	2300      	movs	r3, #0
 80054fa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80054fe:	e7a8      	b.n	8005452 <_printf_i+0x152>
 8005500:	462a      	mov	r2, r5
 8005502:	4649      	mov	r1, r9
 8005504:	4640      	mov	r0, r8
 8005506:	6923      	ldr	r3, [r4, #16]
 8005508:	47d0      	blx	sl
 800550a:	3001      	adds	r0, #1
 800550c:	d0ab      	beq.n	8005466 <_printf_i+0x166>
 800550e:	6823      	ldr	r3, [r4, #0]
 8005510:	079b      	lsls	r3, r3, #30
 8005512:	d413      	bmi.n	800553c <_printf_i+0x23c>
 8005514:	68e0      	ldr	r0, [r4, #12]
 8005516:	9b03      	ldr	r3, [sp, #12]
 8005518:	4298      	cmp	r0, r3
 800551a:	bfb8      	it	lt
 800551c:	4618      	movlt	r0, r3
 800551e:	e7a4      	b.n	800546a <_printf_i+0x16a>
 8005520:	2301      	movs	r3, #1
 8005522:	4632      	mov	r2, r6
 8005524:	4649      	mov	r1, r9
 8005526:	4640      	mov	r0, r8
 8005528:	47d0      	blx	sl
 800552a:	3001      	adds	r0, #1
 800552c:	d09b      	beq.n	8005466 <_printf_i+0x166>
 800552e:	3501      	adds	r5, #1
 8005530:	68e3      	ldr	r3, [r4, #12]
 8005532:	9903      	ldr	r1, [sp, #12]
 8005534:	1a5b      	subs	r3, r3, r1
 8005536:	42ab      	cmp	r3, r5
 8005538:	dcf2      	bgt.n	8005520 <_printf_i+0x220>
 800553a:	e7eb      	b.n	8005514 <_printf_i+0x214>
 800553c:	2500      	movs	r5, #0
 800553e:	f104 0619 	add.w	r6, r4, #25
 8005542:	e7f5      	b.n	8005530 <_printf_i+0x230>
 8005544:	080057c9 	.word	0x080057c9
 8005548:	080057da 	.word	0x080057da

0800554c <_sbrk_r>:
 800554c:	b538      	push	{r3, r4, r5, lr}
 800554e:	2300      	movs	r3, #0
 8005550:	4d05      	ldr	r5, [pc, #20]	; (8005568 <_sbrk_r+0x1c>)
 8005552:	4604      	mov	r4, r0
 8005554:	4608      	mov	r0, r1
 8005556:	602b      	str	r3, [r5, #0]
 8005558:	f7fb fade 	bl	8000b18 <_sbrk>
 800555c:	1c43      	adds	r3, r0, #1
 800555e:	d102      	bne.n	8005566 <_sbrk_r+0x1a>
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b103      	cbz	r3, 8005566 <_sbrk_r+0x1a>
 8005564:	6023      	str	r3, [r4, #0]
 8005566:	bd38      	pop	{r3, r4, r5, pc}
 8005568:	200001e8 	.word	0x200001e8

0800556c <memchr>:
 800556c:	4603      	mov	r3, r0
 800556e:	b510      	push	{r4, lr}
 8005570:	b2c9      	uxtb	r1, r1
 8005572:	4402      	add	r2, r0
 8005574:	4293      	cmp	r3, r2
 8005576:	4618      	mov	r0, r3
 8005578:	d101      	bne.n	800557e <memchr+0x12>
 800557a:	2000      	movs	r0, #0
 800557c:	e003      	b.n	8005586 <memchr+0x1a>
 800557e:	7804      	ldrb	r4, [r0, #0]
 8005580:	3301      	adds	r3, #1
 8005582:	428c      	cmp	r4, r1
 8005584:	d1f6      	bne.n	8005574 <memchr+0x8>
 8005586:	bd10      	pop	{r4, pc}

08005588 <memcpy>:
 8005588:	440a      	add	r2, r1
 800558a:	4291      	cmp	r1, r2
 800558c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005590:	d100      	bne.n	8005594 <memcpy+0xc>
 8005592:	4770      	bx	lr
 8005594:	b510      	push	{r4, lr}
 8005596:	f811 4b01 	ldrb.w	r4, [r1], #1
 800559a:	4291      	cmp	r1, r2
 800559c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80055a0:	d1f9      	bne.n	8005596 <memcpy+0xe>
 80055a2:	bd10      	pop	{r4, pc}

080055a4 <memmove>:
 80055a4:	4288      	cmp	r0, r1
 80055a6:	b510      	push	{r4, lr}
 80055a8:	eb01 0402 	add.w	r4, r1, r2
 80055ac:	d902      	bls.n	80055b4 <memmove+0x10>
 80055ae:	4284      	cmp	r4, r0
 80055b0:	4623      	mov	r3, r4
 80055b2:	d807      	bhi.n	80055c4 <memmove+0x20>
 80055b4:	1e43      	subs	r3, r0, #1
 80055b6:	42a1      	cmp	r1, r4
 80055b8:	d008      	beq.n	80055cc <memmove+0x28>
 80055ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 80055be:	f803 2f01 	strb.w	r2, [r3, #1]!
 80055c2:	e7f8      	b.n	80055b6 <memmove+0x12>
 80055c4:	4601      	mov	r1, r0
 80055c6:	4402      	add	r2, r0
 80055c8:	428a      	cmp	r2, r1
 80055ca:	d100      	bne.n	80055ce <memmove+0x2a>
 80055cc:	bd10      	pop	{r4, pc}
 80055ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80055d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80055d6:	e7f7      	b.n	80055c8 <memmove+0x24>

080055d8 <__malloc_lock>:
 80055d8:	4801      	ldr	r0, [pc, #4]	; (80055e0 <__malloc_lock+0x8>)
 80055da:	f000 b838 	b.w	800564e <__retarget_lock_acquire_recursive>
 80055de:	bf00      	nop
 80055e0:	200001ec 	.word	0x200001ec

080055e4 <__malloc_unlock>:
 80055e4:	4801      	ldr	r0, [pc, #4]	; (80055ec <__malloc_unlock+0x8>)
 80055e6:	f000 b833 	b.w	8005650 <__retarget_lock_release_recursive>
 80055ea:	bf00      	nop
 80055ec:	200001ec 	.word	0x200001ec

080055f0 <_realloc_r>:
 80055f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055f4:	4680      	mov	r8, r0
 80055f6:	4614      	mov	r4, r2
 80055f8:	460e      	mov	r6, r1
 80055fa:	b921      	cbnz	r1, 8005606 <_realloc_r+0x16>
 80055fc:	4611      	mov	r1, r2
 80055fe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005602:	f7ff bc3d 	b.w	8004e80 <_malloc_r>
 8005606:	b92a      	cbnz	r2, 8005614 <_realloc_r+0x24>
 8005608:	f7ff fbd2 	bl	8004db0 <_free_r>
 800560c:	4625      	mov	r5, r4
 800560e:	4628      	mov	r0, r5
 8005610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005614:	f000 f81d 	bl	8005652 <_malloc_usable_size_r>
 8005618:	4284      	cmp	r4, r0
 800561a:	4607      	mov	r7, r0
 800561c:	d802      	bhi.n	8005624 <_realloc_r+0x34>
 800561e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005622:	d812      	bhi.n	800564a <_realloc_r+0x5a>
 8005624:	4621      	mov	r1, r4
 8005626:	4640      	mov	r0, r8
 8005628:	f7ff fc2a 	bl	8004e80 <_malloc_r>
 800562c:	4605      	mov	r5, r0
 800562e:	2800      	cmp	r0, #0
 8005630:	d0ed      	beq.n	800560e <_realloc_r+0x1e>
 8005632:	42bc      	cmp	r4, r7
 8005634:	4622      	mov	r2, r4
 8005636:	4631      	mov	r1, r6
 8005638:	bf28      	it	cs
 800563a:	463a      	movcs	r2, r7
 800563c:	f7ff ffa4 	bl	8005588 <memcpy>
 8005640:	4631      	mov	r1, r6
 8005642:	4640      	mov	r0, r8
 8005644:	f7ff fbb4 	bl	8004db0 <_free_r>
 8005648:	e7e1      	b.n	800560e <_realloc_r+0x1e>
 800564a:	4635      	mov	r5, r6
 800564c:	e7df      	b.n	800560e <_realloc_r+0x1e>

0800564e <__retarget_lock_acquire_recursive>:
 800564e:	4770      	bx	lr

08005650 <__retarget_lock_release_recursive>:
 8005650:	4770      	bx	lr

08005652 <_malloc_usable_size_r>:
 8005652:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005656:	1f18      	subs	r0, r3, #4
 8005658:	2b00      	cmp	r3, #0
 800565a:	bfbc      	itt	lt
 800565c:	580b      	ldrlt	r3, [r1, r0]
 800565e:	18c0      	addlt	r0, r0, r3
 8005660:	4770      	bx	lr
	...

08005664 <_init>:
 8005664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005666:	bf00      	nop
 8005668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800566a:	bc08      	pop	{r3}
 800566c:	469e      	mov	lr, r3
 800566e:	4770      	bx	lr

08005670 <_fini>:
 8005670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005672:	bf00      	nop
 8005674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005676:	bc08      	pop	{r3}
 8005678:	469e      	mov	lr, r3
 800567a:	4770      	bx	lr
